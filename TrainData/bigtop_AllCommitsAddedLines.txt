/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 * This is a modification of a Parameterized JUnit runner (which has been relicensed 
 * under APL for this very hack BIGTOP-18) that takes care of two things:
 b/test/src/itest-common/src/main/groovy/org/apache/bigtop/itest/junit/OrderedParameterized.java
package org.apache.bigtop.itest.junit;
 b/bigtop-tests/test-artifacts/hadoop/src/main/groovy/org/apache/bigtop/itest/hadoop/hdfs/FSCmdExecutor.java
package org.apache.bigtop.itest.hadoop.hdfs;
 b/bigtop-test-framework/src/main/groovy/org/apache/bigtop/itest/Contract.java
/**
 * Specifies the contract for a test: what environment variables and system
 * properties are used or expected by the test.
 */
public @interface Contract {
 * Class containing utility methods for test classes to use (in a static
 * setup method) for obtaining the values of parameters passed in via
 * environment variables or system properties. The parameters are obtained
 * by introspecting the {@link org.apache.bigtop.itest.Contract Contract}
 * annotation of the test class.
  /**
   * Sets the values of parameters passed in via environment variables, using
   * convention.
   * Assumes the presence in the target class of static fields (the parameters)
   * with the same names as the environment variables.
   * (Unix/Linux environment variable names shall consist solely of uppercase
   * letters, digits, and the '_' (underscore) character, and shall not begin
   * with a digit.)
   * If an environment variable is required and it is not set, an
   * AssertionError is thrown.
   * @param target the test class
   * @throws NoSuchFieldException
   * @throws IllegalAccessException
   */
  public static void setEnv(Class target)
    Contract contract = (Contract) target.getAnnotation(Contract.class);
    Variable[] vars = contract.env();
      String name = var.name();
      Field field = target.getDeclaredField(name);
      String value = System.getenv(name);
        assertNotNull(name  " is not set", value);
      field.setAccessible(true);
  /**
   * Sets the values of parameters passed in via environment variables.
   * Assumes the presence in the target class of static fields with the given
   * names.
   * If an environment variable is required and it is not set, an
   * AssertionError is thrown.
   * @param target the test class
   * @param fieldNames the names of the static fields corresponding to the
   * environment variables; the number of names must match the number of
   * environment variables
   * @throws NoSuchFieldException
   * @throws IllegalAccessException
   */
  public static void setEnv(Class target, String[] fieldNames)
    Contract contract = (Contract) target.getAnnotation(Contract.class);
    Variable[] vars = contract.env();
    assert vars.length == fieldNames.length;
    for (int i = 0; i < vars.length; i) {
      Variable var = vars[i];
      String name = var.name();
      Field field = target.getDeclaredField(fieldNames[i]);
      String value = System.getenv(name);
      if (value == null && var.required()) {
        assertNotNull(name  " is not set", value);
      }
      field.setAccessible(true);
      field.set(target, value);
    }
  }

  /**
   * Sets the values of parameters passed in via system properties, using
   * convention.
   * Assumes the presence in the target class of static fields (the parameters)
   * with the same names as the system properties, except with '.' replaced by
   * '_'. (The names of the system properties shall be chosen so that the
   * corresponding field names are valid Java identifiers.)
   * If a system property is not set, the parameter is set to a default value.
   * Therefore usable default values must be provided in the annotation or else
   * test logic must be written to handle the lack thereof.
   * @param target the test class
   * @throws NoSuchFieldException
   * @throws IllegalAccessException
   */
  public static void setProperties(Class target)
      throws NoSuchFieldException, IllegalAccessException {
    Contract contract = (Contract) target.getAnnotation(Contract.class);
    Property[] props = contract.properties();
      String name = prop.name();
      Field field = target.getDeclaredField(name.replace('.', '_'));
        value = System.getProperty(name, prop.defaultValue());
        break;
        value = Integer.getInteger(name, prop.intValue());
        break;
        value = Long.getLong(name, prop.longValue());
        break;
        value = Boolean.getBoolean(name);
      field.setAccessible(true);
      field.set(target, value);
    }
  }

  /**
   * Sets the values of parameters passed in via system properties.
   * Assumes the presence in the target class of static fields with the given
   * names.
   * If a system property is not set, the parameter is set to a default value.
   * Therefore usable default values must be provided in the annotation or else
   * test logic must be written to handle the lack thereof.
   * @param target the test class
   * @param fieldNames the names of the static fields corresponding to the
   * system properties; the number of names must match the number of
   * system properties
   * @throws NoSuchFieldException
   * @throws IllegalAccessException
   */
  public static void setProperties(Class target, String[] fieldNames)
      throws NoSuchFieldException, IllegalAccessException {
    Contract contract = (Contract) target.getAnnotation(Contract.class);
    Property[] props = contract.properties();
    assert props.length == fieldNames.length;
    for (int i = 0; i < props.length; i) {
      Property prop = props[i];
      String name = prop.name();
      Field field = target.getDeclaredField(fieldNames[i]);
      Object value = null;
      switch (prop.type()) {
      case STRING:
        value = System.getProperty(name, prop.defaultValue());
        break;
      case INT:
        value = Integer.getInteger(name, prop.intValue());
        break;
      case LONG:
        value = Long.getLong(name, prop.longValue());
        break;
      case BOOLEAN:
        value = Boolean.getBoolean(name);
      }
      field.setAccessible(true);
  String defaultValue() default "";
  int intValue() default 0;
  long longValue() default 0L;
   cannot be found for it, an error may be thrown.
    Configuration conf = getConf();
    Job job = new Job(conf, "testMRIncrementalLoad");
    HTable table = new HTable(conf, Bytes.toBytes(args[0]));
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
    Configuration conf = HBaseConfiguration.create();
    byte [] tableName = Bytes.toBytes(argv[0]);
    HTable table = new HTable(conf, tableName);
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
    Configuration conf = HBaseConfiguration.create();
    byte [] tableName = Bytes.toBytes(argv[0]);
    HTable table = new HTable(conf, tableName);
import java.lang.annotation.Documented;

@Documented
import java.lang.annotation.Documented;

@Documented
      args[i] = args[i].replaceAll("USER_NAME", System.getProperty("user.name"));
  /**
   * Execute given hadoop FsShell command.
   */
  /**
   * Prapare given FsShell command for execution by ToolRunner.
   * This method also expands all variables used in the command.
   */
          new File(CLITestHelper.TEST_CACHE_DATA_DIR).
          toURI().toString().replace(' ', ''));
      args[i] = args[i].replaceAll("TEST_DIR_ABSOLUTE", TestCLI.TEST_DIR_ABSOLUTE);
 b/bigtop-tests/test-artifacts/hadoop/src/main/groovy/org/apache/bigtop/itest/hadoop/hcfs/FSCmdExecutor.java
package org.apache.bigtop.itest.hadoop.hcfs;
      // HCFS fs.default.name Hack (see TestCLI.java)
      args[i] = args[i].replaceAll("NAMENODETEST_DIR_ABSOLUTE", TestCLI.NAMENODE_TESTDIR_HACK);
      args[i] = args[i].replaceAll("CLITEST_DATA",
      args[i] = args[i].replaceAll("HCFS_SCHEME", TestCLI.HCFS_SCHEME);
      args[i] = args[i].replaceAll("HCFS_DIRSIZE", TestCLI.HCFS_DIRSIZE);
      args[i] = args[i].replaceAll("HCFS_NNMATCH", TestCLI.HCFS_NNMATCH);
 *
import org.apache.bigtop.bigpetstore.util.BigPetStoreConstants.OUTPUTS;
 * This class operates by ETL'ing the data-set into pig.
    private static Path getCleanedTsvPath(Path outputPath) {
      return new Path(outputPath, OUTPUTS.tsv.name());
    }

         * BigPetStore,storeCode_OK,2 1,yang,jay,3,flea collar,69.56,Mon Dec 15 23:33:49 EST 1969
         * ("BigPetStore,storeCode_OK,2", "1,yang,jay,3,flea collar,69.56,Mon Dec 15 23:33:49 EST 1969")
        pigServer.registerQuery("csvdata = LOAD '<i>' AS (ID,DETAILS);".replaceAll("<i>", inputPath.toString()));
        // currentCustomerId, firstName, lastName, product.id, product.name.toLowerCase, product.price, date
         * Now, we want to split the two tab delimited fields into uniform
        pigServer.registerQuery(
              "id_details = FOREACH csvdata GENERATE "
               "FLATTEN(STRSPLIT(ID, ',', 3)) AS " 
			"(drop, code, transaction) ,"
               "FLATTEN(STRSPLIT(DETAILS, ',', 7)) AS " 
                  "(custId, fname, lname, productId, product:chararray, price, date);");
        pigServer.registerQuery("mahout_records = FOREACH id_details GENERATE custId, productId, 1;");
        pigServer.store("id_details", getCleanedTsvPath(outputPath).toString());
        pigServer.store("mahout_records", new Path(outputPath, OUTPUTS.MahoutPaths.Mahout.name()).toString());
            Map<String,String> parameters = new HashMap<>();
            parameters.put("input", getCleanedTsvPath(outputPath).toString());
            Path adHocOut = new Path(dir, OUTPUTS.pig_ad_hoc_script.name()  (i));
                throw new RuntimeException("Pig script arg "  i  " "  f.getAbsolutePath()  " not found. ");

        int res = ToolRunner.run(c, new Tool() {
 *
import static org.apache.bigtop.bigpetstore.generator.PetStoreTransactionsInputFormat.props;
  public static final int DEFAULT_NUM_RECORDS = 100;
  final static Logger log = LoggerFactory.getLogger(BPSGenerator.class);

  public enum props {
    bigpetstore_records
  }

  public static Job createJob(Path output, int records) throws IOException {
    Configuration c = new Configuration();
    c.setInt(props.bigpetstore_records.name(), DEFAULT_NUM_RECORDS);
    return getCreateTransactionRecordsJob(output, c);
  }

  public static Job getCreateTransactionRecordsJob(Path outputDir, Configuration conf)
          throws IOException {
    Job job = new Job(conf, "PetStoreTransaction_ETL_"  System.currentTimeMillis());
    // recursively delete the data set if it exists.
    FileSystem.get(outputDir.toUri(), conf).delete(outputDir, true);
    job.setJarByClass(BPSGenerator.class);
    job.setMapperClass(MyMapper.class);
    // use the default reducer
    // job.setReducerClass(PetStoreTransactionGeneratorJob.Red.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(Text.class);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(Text.class);
    job.setInputFormatClass(PetStoreTransactionsInputFormat.class);
    job.setOutputFormatClass(TextOutputFormat.class);
    FileOutputFormat.setOutputPath(job, outputDir);
    return job;
  }

  public static class MyMapper extends Mapper<Text, Text, Text, Text> {
    @Override
    protected void setup(Context context) throws IOException,
    InterruptedException {
      super.setup(context);
    protected void map(Text key, Text value, Context context)
            throws java.io.IOException, InterruptedException {
      context.write(key, value);
  }
  public static void main(String args[]) throws Exception {
    if (args.length != 2) {
      System.err.println("USAGE : [number of records] [output path]");
      System.exit(0);
    } else {
      Configuration conf = new Configuration();
      DeveloperTools.validate(args, "# of records", "output path");
      conf.setInt(PetStoreTransactionsInputFormat.props.bigpetstore_records.name(),
              Integer.parseInt(args[0]));
      getCreateTransactionRecordsJob(new Path(args[1]), conf).waitForCompletion(true);
  }
 *
import org.apache.bigtop.bigpetstore.generator.util.State;
import org.apache.commons.lang3.Range;
    public State state;
    public Range<Long> customerIdRange;
    public PetStoreTransactionInputSplit(int records, Range<Long> customerIdRange, State state) {
        this.customerIdRange = customerIdRange;
    public void readFields(DataInput dataInputStream) throws IOException {
        records = dataInputStream.readInt();
        state = State.valueOf(dataInputStream.readUTF());
        customerIdRange = Range.between(dataInputStream.readLong(), dataInputStream.readLong());
    public void write(DataOutput dataOutputStream) throws IOException {
        dataOutputStream.writeInt(records);
        dataOutputStream.writeUTF(state.name());
        dataOutputStream.writeLong(customerIdRange.getMinimum());
        dataOutputStream.writeLong(customerIdRange.getMaximum());
        return records;
 *
 *
   public static enum OUTPUTS {
        tsv,
        CUSTOMER_PAGE; //crunchhh

        public static enum MahoutPaths {
          Mahout,
          AlsFactorization,
          AlsRecommendations
        }
 *
import org.apache.bigtop.bigpetstore.generator.util.State;
 *
    public static long toId(State state, String name){
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 b/bigtop-bigpetstore/bigpetstore-mapreduce/src/main/java/org/apache/bigtop/bigpetstore/contract/PetStoreStatistics.java
 *
 b/bigtop-bigpetstore/bigpetstore-mapreduce/src/main/java/org/apache/bigtop/bigpetstore/etl/CrunchETL.java
 *
 b/bigtop-bigpetstore/bigpetstore-mapreduce/src/main/java/org/apache/bigtop/bigpetstore/etl/LineItem.java
/**
 *
 b/bigtop-bigpetstore/bigpetstore-mapreduce/src/main/java/org/apache/bigtop/bigpetstore/generator/PetStoreTransaction.java
 *
 b/bigtop-bigpetstore/bigpetstore-mapreduce/src/main/java/org/apache/bigtop/bigpetstore/util/DeveloperTools.java
 *
 b/bigtop-bigpetstore/bigpetstore-mapreduce/src/main/java/org/apache/bigtop/bigpetstore/util/PetStoreParseFunctions.java
 *
 b/bigtop-bigpetstore/bigpetstore-mapreduce/src/main/java/org/apache/bigtop/bigpetstore/util/StringUtils.java
* add more elements here .
* jar's manually in the hadoop classpath or via DistributedCache.

   *
   *
   * @param target     the test class
   *                   environment variables; the number of names must match the number of
   *                   environment variables
   *
        case STRING:
          value = System.getProperty(name, prop.defaultValue());
          break;
        case INT:
          value = Integer.getInteger(name, prop.intValue());
          break;
        case LONG:
          value = Long.getLong(name, prop.longValue());
          break;
        case BOOLEAN:
          value = Boolean.getBoolean(name);
   *
   * @param target     the test class
   *                   system properties; the number of names must match the number of
   *                   system properties
        case STRING:
          value = System.getProperty(name, prop.defaultValue());
          break;
        case INT:
          value = Integer.getInteger(name, prop.intValue());
          break;
        case LONG:
          value = Long.getLong(name, prop.longValue());
          break;
        case BOOLEAN:
          value = Boolean.getBoolean(name);
 * Specifies a parameter to be passed into a test via a system property.
 * The parameter may be a String, an int, a long, or a boolean. If the type
 * of the parameter is not specified, it defaults to String.
 * A default value (String value, int value, long value) may be specified
 * for the parameter if its type is not boolean; the default value of a
 * boolean parameter is false.
 */





 * Specifies a parameter to be passed into a test via an environment variable.
 * The parameter is a String.
 * By default, the parameter is required. If it is required and a non-null value
 * cannot be found for it, an error may be thrown.
 */

 * This is a modification of a Parameterized JUnit runner (which has been relicensed
 * 1. it lets arrange individual tests into ordered sequence of run stages via adding a
 * a &#064;RunStage(level=X) annotation to the desired testcases (default run stage
 * is 0). Later on run stages are executed according to the order of their levels
 * and testcases within the same run stage have no guaranteed order of execution.
 * 2. it lets give names to the parameterized testcases via making the factory method
 * &#064;Parameters return a Map (mapping names to testcases) instead of a List.
 * <p/>
 * return res;
  /**
   * Annotation for a method which provides parameters to be injected into the
   * test class constructor by <code>Parameterized</code>
   */
  @Retention(RetentionPolicy.RUNTIME)
  @Target(ElementType.METHOD)
  public @interface RunStage {
    int level() default 0;
  }
  ;
  private class TestClassRunnerForParameters extends
      BlockJUnit4ClassRunner {
    private final String fParameterSetNumber;
    private final Map<String, Object[]> fParameterList;
    TestClassRunnerForParameters(Class<?> type,
                                 Map<String, Object[]> parameterList, String i) throws InitializationError {
      super(type);
      fParameterList = parameterList;
      fParameterSetNumber = i;
    public Object createTest() throws Exception {
      return getTestClass().getOnlyConstructor().newInstance(
          computeParams());
    private Object[] computeParams() throws Exception {
      try {
        return fParameterList.get(fParameterSetNumber);
      } catch (ClassCastException e) {
        throw new Exception(String.format(
            "%s.%s() must return a Map from Strings to arrays.",
            getTestClass().getName(), getParametersMethod(
            getTestClass()).getName()));
      }
    @Override
    protected List<FrameworkMethod> getChildren() {
      List<FrameworkMethod> c = super.getChildren();
      Collections.sort(c, new Comparator<FrameworkMethod>() {
        public int compare(FrameworkMethod m1, FrameworkMethod m2) {
          RunStage r1 = m1.getAnnotation(RunStage.class);
          RunStage r2 = m2.getAnnotation(RunStage.class);
          return ((r1 != null) ? r1.level() : 0) -
              ((r2 != null) ? r2.level() : 0);
        }
      });
      return c;

    @Override
    protected String getName() {
      return String.format("[%s]", fParameterSetNumber);
    }

    @Override
    protected String testName(final FrameworkMethod method) {
      return String.format("%s[%s]", method.getName(),
          fParameterSetNumber);
    }

    @Override
    protected void validateConstructor(List<Throwable> errors) {
      validateOnlyOneConstructor(errors);
    }

    @Override
    protected Statement classBlock(RunNotifier notifier) {
      return childrenInvoker(notifier);
    }
  }

  private FrameworkMethod getParametersMethod(TestClass testClass)
      throws Exception {
    List<FrameworkMethod> methods = testClass
        .getAnnotatedMethods(Parameterized.Parameters.class);
    for (FrameworkMethod each : methods) {
      int modifiers = each.getMethod().getModifiers();
      if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))
        return each;
    }

    throw new Exception("No public static parameters method on class "
         testClass.getName());
  }

  private final ArrayList<Runner> runners = new ArrayList<Runner>();

  @Override
  protected List<Runner> getChildren() {
    return runners;
  }

  @SuppressWarnings("unchecked")
  private Map<String, Object[]> getParametersList(TestClass klass) throws Throwable {
    return (Map<String, Object[]>) getParametersMethod(klass).invokeExplosively(null);
  }

  public OrderedParameterized(Class<?> klass) throws Throwable {
    super(klass, Collections.<Runner>emptyList());
    Map<String, Object[]> parametersMap = getParametersList(getTestClass());
    for (Map.Entry<String, Object[]> entry : parametersMap.entrySet())
      runners.add(new TestClassRunnerForParameters(getTestClass().getJavaClass(),
          parametersMap, entry.getKey()));
  }
        = {Bytes.add(PerformanceEvaluation.FAMILY_NAME, Bytes.toBytes("-A")),
        Bytes.add(PerformanceEvaluation.FAMILY_NAME, Bytes.toBytes("-B"))};
    private static final int KEYLEN_DEFAULT = 10;
    private static final String KEYLEN_CONF = "randomkv.key.length";
    private static final int VALLEN_DEFAULT = 10;
    private static final String VALLEN_CONF = "randomkv.val.length";
                       Mapper<NullWritable, NullWritable,
                           ImmutableBytesWritable, KeyValue>.Context context)
        throws java.io.IOException, InterruptedException {
        keyBytes[keyLength - 1] = (byte) (taskId & 0xFF);
          result.getNoVersionMap();
      throws IOException {
        Bytes.toBytes("f1"), Bytes.toBytes("qual"), CompareOp.EQUAL, value);
          " <table> <value>");
    byte[] tableName = Bytes.toBytes(argv[0]);
 * This program scans a table a configurable number of times. Uses
      InterruptedException {
        Bytes.toBytes("f1"), Bytes.toBytes("qual"), CompareOp.EQUAL, value);
          byte[]>>> columnFamilyMap = r.getMap();
        s.toString()  " with filter f1:qual == "  Bytes.toString(value));
          " <table> <value>");
    byte[] tableName = Bytes.toBytes(argv[0]);
	public static final String PRODUCTS_COLLECTION = "small";
	public static final String PRODUCT_QUANTITY = "quantity";
	public static final String PRODUCT_UNIT_PRICE = "unitPrice";
	public static final String PRODUCT_PRICE = "price";
		InputData inputData = new InputData(zipcodeTable, names);
import org.apache.bigtop.bigpetstore.datagenerator.Constants;
import org.apache.bigtop.bigpetstore.datagenerator.ProductGenerator;
import org.apache.bigtop.bigpetstore.datagenerator.datamodels.inputs.ProductCategory;
	List<ProductCategory> productCategories;
	public void generateProducts()
	{
		System.out.println("Generating products");
		ProductGenerator generator = new ProductGenerator(Constants.PRODUCTS_COLLECTION);
		productCategories = generator.generate();
	}

		PurchasingModelGenerator generator = new PurchasingModelGenerator(productCategories, seedFactory);
					profile, productCategories, seedFactory);
		generateProducts();
			Names names)
		double remainingTime = Math.max(0.0, exhaustionTime - transactionTime);
		return pdf.probability(remainingTime);
		if(proposedTime >= lastTransactionTime)
		{
			return 1.0;
		}

		return 0.0;
		MULTINOMIAL,
		MARKOV;
	public static final PurchasingModelType PURCHASING_MODEL_TYPE = PurchasingModelType.MULTINOMIAL;
	public static final double PRODUCT_MULTINOMIAL_HIGH_WEIGHT = 10.0;
	public static final double PRODUCT_MULTINOMIAL_NEUTRAL_WEIGHT = 1.0;
	public static final double PRODUCT_MULTINOMIAL_LOW_WEIGHT = 0.1;
	public static final double PRODUCT_MULTINOMIAL_MIN_PERCENT = 0.01; // 1%
	public static final int PRODUCT_MULTINOMIAL_MIN_COUNT = 2;
	public static final double PRODUCT_MULTINOMIAL_MAX_PERCENT = 0.1; // 10%
import java.util.List;
import org.apache.bigtop.bigpetstore.datagenerator.datamodels.Customer;
import org.apache.bigtop.bigpetstore.datagenerator.datamodels.Store;
import org.apache.bigtop.bigpetstore.datagenerator.datamodels.inputs.ProductCategory;
import org.apache.bigtop.bigpetstore.datagenerator.generators.purchase.PurchasingModel;
				"Usage: java -jar bps-data-generator-v0.2.java outputDir nStores nCustomers nPurchasingModels simulationLength seed\n" 
		try
			seed = Long.parseLong(args[i]);
		catch(Exception e)
			System.err.println("Unable to parse '"  args[i]  "' as a long for the seed.\n");
			printUsage();
			System.exit(1);
	private void writeCustomers(Collection<Customer> customers) throws Exception
	{
		File outputFile = new File(outputDir.toString()  File.separator  "customers.txt");
		System.out.println(outputFile.toString());
		OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));

		for(Customer customer : customers)
		{
			String record = customer.getId()  ",";
			Pair<String, String> name = customer.getName();
			record = name.getFirst()  ","  name.getSecond()  ",";
			record = customer.getLocation().getZipcode()  ",";
			record = customer.getLocation().getCity()  ",";
			record = customer.getLocation().getState()  "\n";

			outputStream.write(record.getBytes());
		}

		outputStream.close();
	}

	private void writeStores(Collection<Store> stores) throws Exception
	{
		File outputFile = new File(outputDir.toString()  File.separator  "stores.txt");
		System.out.println(outputFile.toString());
		OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));

		for(Store store : stores)
		{
			String record = store.getId()  ",";
			record = store.getLocation().getZipcode()  ",";
			record = store.getLocation().getCity()  ",";
			record = store.getLocation().getState()  "\n";

			outputStream.write(record.getBytes());
		}

		outputStream.close();
	}

	private void writeProducts(Collection<ProductCategory> productCategories) throws Exception
	{
		File outputFile = new File(outputDir.toString()  File.separator  "products.txt");
		System.out.println(outputFile.toString());
		OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));

		for(ProductCategory category : productCategories)
		{

			for(Product product : category.getProducts())
			{
				String record = category.getCategoryLabel()  ",";
				record = product.toString()  "\n";

				outputStream.write(record.getBytes());
			}
		}

		outputStream.close();
	}

	private void writePurchasingProfiles(List<ProductCategory> productCategories, List<PurchasingModel> profiles) throws Exception
	{
		File outputFile = new File(outputDir.toString()  File.separator  "purchasing_profiles.txt");
		System.out.println(outputFile.toString());
		OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));

		for(ProductCategory category : productCategories)
		{
			int i = 0;
			for(PurchasingModel model : profiles)
			{
				Object productModel = model.getProfile(category.getCategoryLabel());
				String record = category.getCategoryLabel()  ",";
				record = i  ",";
				record = productModel.toString()  "\n";

				outputStream.write(record.getBytes());

				i = 1;
			}
		}

		outputStream.close();
	}

		writeStores(simulation.getStores());
		writeCustomers(simulation.getCustomers());
		writeProducts(simulation.getProductCategories());
		writePurchasingProfiles(simulation.getProductCategories(), simulation.getPurchasingProfiles());
	List<PurchasingModel> purchasingProfiles;
		purchasingProfiles = new Vector<PurchasingModel>();

	public List<ProductCategory> getProductCategories()
	{
		return this.productCategories;
	}

	public List<PurchasingModel> getPurchasingProfiles()
	{
		return this.purchasingProfiles;
	}
	@Override
	public boolean equals(Object o)
	{
		if(!this.getClass().isInstance(o))
		{
			return false;
		}

		Pair other = (Pair) o;

		return other.getFirst().equals(first) &&
				other.getSecond().equals(second);
	}

	@Override
	public int hashCode()
	{
		return toString().hashCode();
	}

	private static final long serialVersionUID = 8378109656005603192L;


	@Override
	public String toString()
	{
		return "MarkModel("  startWeights  ","  transitionWeights  ")";
	}


	@Override
	public String toString()
	{
		return "DiscretePDF("  probabilities.toString() ")";
	}
 b/bigtop-bigpetstore/bigpetstore-data-generator/src/main/java/org/apache/bigtop/bigpetstore/datagenerator/generators/purchase/MarkovModelProductCategorySampler.java
public class MarkovModelProductCategorySampler implements Sampler<MarkovModel<Product>>


	public MarkovModelProductCategorySampler(ProductCategory productCategory,















public class MarkovPurchasingModel implements PurchasingModel<MarkovModel<Product>>
	@Override
 b/bigtop-bigpetstore/bigpetstore-data-generator/src/main/java/org/apache/bigtop/bigpetstore/datagenerator/generators/purchase/MultinomialPurchasingModel.java
public class MultinomialPurchasingModel implements PurchasingModel<DiscretePDF<Product>>


	public MultinomialPurchasingModel(Map<String, DiscretePDF<Product>> productPDFs)
	public DiscretePDF<Product> getProfile(String category)
	{
		return productPDFs.get(category);
	}

	@Override

public interface PurchasingModel<T> extends Serializable
	public T getProfile(String category);

			MarkovModelProductCategorySampler sampler = new MarkovModelProductCategorySampler(productCategory,
		if(Constants.PURCHASING_MODEL_TYPE.equals(Constants.PurchasingModelType.MARKOV))
			return new MultinomialPurchasingModelSampler(productCategories, seedFactory);
import java.util.Set;
import com.google.common.collect.ImmutableSet;
	public static enum ProductsCollectionSize
	{
		SMALL,
		MEDIUM;
	}
	
	public static final ProductsCollectionSize PRODUCTS_COLLECTION = ProductsCollectionSize.MEDIUM;
	public static final double PRODUCT_MULTINOMIAL_POSITIVE_WEIGHT = 10.0;
	public static final double PRODUCT_MULTINOMIAL_NEGATIVE_WEIGHT = 0.1;
	public static final int PRODUCT_MULTINOMIAL_POSITIVE_COUNT_MIN = 1;
	public static final double PRODUCT_MULTINOMIAL_POSITIVE_FREQUENCY = 0.1; // 10%
	/*
	 *  Until we have a more intelligent way (e.g., based on range) of dealing with prices,
	 *  let's exclude them.
	 */
	public static final Set<String> PRODUCT_MODEL_EXCLUDED_FIELDS = ImmutableSet.of(PRODUCT_CATEGORY,
			PRODUCT_UNIT_PRICE,
			PRODUCT_PRICE);
	
import org.apache.bigtop.bigpetstore.datagenerator.Constants.ProductsCollectionSize;
import org.apache.bigtop.bigpetstore.datagenerator.generators.products.collections.MediumProductCollection;
	ProductsCollectionSize collection;
	public ProductGenerator(ProductsCollectionSize collection)
		List<ProductCategory> categories;
		
		if(collection.equals(ProductsCollectionSize.SMALL))
		{
			SmallProductCollection collection = new SmallProductCollection();
			categories = collection.generateProductCategory();
		} else
		{
			MediumProductCollection collection = new MediumProductCollection();
			categories = collection.generateProductCategory();
		}
				String record = productModel.toString();
 b/bigtop-bigpetstore/bigpetstore-data-generator/src/main/java/org/apache/bigtop/bigpetstore/datagenerator/framework/pdfs/MultinomialPDF.java
public class MultinomialPDF<T> implements ProbabilityDensityFunction<T>
	public MultinomialPDF(Map<T, Double> probabilities)
		String str = "";
		for(Map.Entry<T, Double> entry: probabilities.entrySet())
		{
			str = entry.getValue()  ","  entry.getKey()  "\n";
		}
		return str;
		while(true)
		{
			int idx = rng.nextInt(distributions.size());
			
			double mean = distributions.get(idx).getFirst();
			double std = distributions.get(idx).getSecond();
			
			double value = mean  rng.nextGaussian() * std;
			
			if (value >= this.min && value <= this.max)
			{
				return value;
			}
		}
import org.apache.bigtop.bigpetstore.datagenerator.framework.pdfs.MultinomialPDF;
	public static <T> RouletteWheelSampler<T> create(MultinomialPDF<T> pdf, SeedFactory factory)
import org.apache.bigtop.bigpetstore.datagenerator.framework.pdfs.MultinomialPDF;
public class MultinomialPurchasingModel implements PurchasingModel<MultinomialPDF<Product>>
	private final ImmutableMap<String, MultinomialPDF<Product>> productPDFs;
	public MultinomialPurchasingModel(Map<String, MultinomialPDF<Product>> productPDFs)
	public MultinomialPDF<Product> getProfile(String category)
			MultinomialPDF<Product> pdf = productPDFs.get(category);
import java.util.List;
import org.apache.bigtop.bigpetstore.datagenerator.framework.pdfs.MultinomialPDF;
import org.apache.bigtop.bigpetstore.datagenerator.framework.samplers.UniformSampler;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;
	protected <T> List<T> shuffle(Collection<T> input) throws Exception
		Vector<T> shuffled = new Vector<>(input);
			T tmp = shuffled.get(i);
			shuffled.set(i, shuffled.get(swapIdx));
			shuffled.set(swapIdx, tmp);
		
		return shuffled;
		// Get all values for each field by iterating over all products
		Multimap<String, Object> allFieldValues = HashMultimap.create();
			if(!Constants.PRODUCT_MODEL_EXCLUDED_FIELDS.contains(fieldName))
				for(Product p : productCategory.getProducts())
				{
					Object fieldValue = p.getFieldValue(fieldName);
					allFieldValues.put(fieldName, fieldValue);
				}
		
		Sampler<Double> sampler = new UniformSampler(seedFactory);
		
		// shuffle field values
		for(Map.Entry<String, Collection<Object>> entry : allFieldValues.asMap().entrySet())
			String fieldName = entry.getKey();
			List<Object> shuffled = shuffle(entry.getValue());
			
			for(int i = 0; i < shuffled.size(); i)
				double weight = Constants.PRODUCT_MULTINOMIAL_POSITIVE_WEIGHT;
				if ((i  1) > Constants.PRODUCT_MULTINOMIAL_POSITIVE_COUNT_MIN)
				{
					double r = sampler.sample();
					if (r >= Constants.PRODUCT_MULTINOMIAL_POSITIVE_FREQUENCY)
					{
						weight = Constants.PRODUCT_MULTINOMIAL_NEGATIVE_WEIGHT;
					}
				}
				
				Object fieldValue = shuffled.get(i);
				fieldValueWeights.put(new Pair<String,Object>(fieldName, fieldValue), weight);
		
		return ImmutableMap.copyOf(fieldValueWeights);
				if(!Constants.PRODUCT_MODEL_EXCLUDED_FIELDS.contains(fieldName))
				{
					Object fieldValue = p.getFieldValue(fieldName);
					Pair<String, Object> key = Pair.create(fieldName, fieldValue);
					weight *= fieldValueWeights.get(key);
				}
		Map<String, MultinomialPDF<Product>> pdfs = Maps.newHashMap();
			pdfs.put(productCategory.getCategoryLabel(), new MultinomialPDF<Product>(productWeights));
import org.apache.commons.lang3.tuple.Pair;
	public static final List<Pair<Double, Double>> TRANSACTION_TRIGGER_TIME_GAUSSIANS = ImmutableList.of(Pair.of(5.0, 2.0));
	public static final List<Pair<Double, Double>> PURCHASE_TRIGGER_TIME_GAUSSIANS = ImmutableList.of(Pair.of(10.0, 4.0));
	public static final List<Pair<Double, Double>> PRODUCT_MSM_FIELD_WEIGHT_GAUSSIANS = ImmutableList.of(Pair.of(0.15, 0.1), Pair.of(0.85, 0.1));
	public static final List<Pair<Double, Double>> PRODUCT_MSM_FIELD_SIMILARITY_WEIGHT_GAUSSIANS = ImmutableList.of(Pair.of(0.15, 0.1), Pair.of(0.85, 0.1));
	public static final List<Pair<Double, Double>> PRODUCT_MSM_LOOPBACK_WEIGHT_GAUSSIANS = ImmutableList.of(Pair.of(0.25, 0.1), Pair.of(0.75, 0.1));
import org.apache.commons.lang3.tuple.Pair;
				record = name.getLeft()  " "  name.getRight()  ",";
			record = name.getLeft()  ","  name.getRight()  ",";
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.lang3.tuple.Pair;
		double dist = Math.sin(Math.toRadians(coordinates.getLeft())) *
				Math.sin(Math.toRadians(otherCoords.getLeft())) 
				Math.cos(Math.toRadians(coordinates.getLeft())) *
				Math.cos(Math.toRadians(otherCoords.getLeft())) *
				Math.cos(Math.toRadians(coordinates.getRight() - otherCoords.getRight()));
import org.apache.commons.lang3.tuple.Pair;
			Pair<Double, Double> coords = Pair.of(latitude, longitude);
import org.apache.commons.lang3.tuple.Pair;
			double mean = distributions.get(idx).getLeft();
			double std = distributions.get(idx).getRight();
import org.apache.commons.lang3.tuple.Pair;
			builder.add(Pair.of(entry.getKey(), cumProb));
			if(r < cumProbPair.getValue())
				return cumProbPair.getKey();
import org.apache.commons.lang3.tuple.Pair;
		Pair<String, String> name = Pair.of(firstNameSampler.sample(),
import org.apache.commons.lang3.tuple.Pair;
				fieldValueWeights.put(Pair.of(fieldName, fieldValue), weight);
					Pair<String, Object> key = Pair.of(fieldName, fieldValue);
import org.apache.commons.lang3.tuple.Pair;
		trajectory.add(Pair.of(time, amount));
		return trajectory.get(trajectory.size() - 1).getValue();
		return trajectory.get(trajectory.size() - 1).getKey();
			if(entry.getKey() > time)
		return previous.getValue();
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/Constants.java
package org.apache.bigtop.datagenerators.bigpetstore;


















 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/CustomerGenerator.java
package org.apache.bigtop.datagenerators.bigpetstore;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.InputData;
import org.apache.bigtop.datagenerators.bigpetstore.generators.customer.CustomerSamplerBuilder;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/DataLoader.java
package org.apache.bigtop.datagenerators.bigpetstore;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.InputData;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.Names;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.bigpetstore.datareaders.NameReader;
import org.apache.bigtop.datagenerators.bigpetstore.datareaders.ZipcodeReader;





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/ProductGenerator.java
package org.apache.bigtop.datagenerators.bigpetstore;
import org.apache.bigtop.datagenerators.bigpetstore.Constants.ProductsCollectionSize;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.collections.MediumProductCollection;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.collections.SmallProductCollection;

 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/PurchasingModelGenerator.java
package org.apache.bigtop.datagenerators.bigpetstore;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingModel;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingModelSamplerBuilder;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/StoreGenerator.java
package org.apache.bigtop.datagenerators.bigpetstore;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.InputData;
import org.apache.bigtop.datagenerators.bigpetstore.generators.store.StoreSamplerBuilder;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;

	{

 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/TransactionGenerator.java
package org.apache.bigtop.datagenerators.bigpetstore;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingModel;
import org.apache.bigtop.datagenerators.bigpetstore.generators.transaction.TransactionSamplerBuilder;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;

	public TransactionGenerator(Customer customer, PurchasingModel profile,

 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/cli/Driver.java
package org.apache.bigtop.datagenerators.bigpetstore.cli;
import org.apache.bigtop.datagenerators.bigpetstore.DataLoader;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.InputData;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingModel;


				"\n" 
				"nPurchasingModels - (int) number of purchasing models to generate\n" 


















	}



		driver.run(args);





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/cli/Simulation.java
package org.apache.bigtop.datagenerators.bigpetstore.cli;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.CustomerGenerator;
import org.apache.bigtop.datagenerators.bigpetstore.ProductGenerator;
import org.apache.bigtop.datagenerators.bigpetstore.PurchasingModelGenerator;
import org.apache.bigtop.datagenerators.bigpetstore.StoreGenerator;
import org.apache.bigtop.datagenerators.bigpetstore.TransactionGenerator;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.InputData;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingModel;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.RouletteWheelSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;






















 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/Customer.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;




 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/PetSpecies.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/Product.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels;









 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/Store.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/Transaction.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels;




 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/inputs/InputData.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs;




 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/inputs/Names.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs;


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/inputs/ProductCategory.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;











 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datamodels/inputs/ZipcodeRecord.java
package org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs;








		return dist;


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datareaders/NameReader.java
package org.apache.bigtop.datagenerators.bigpetstore.datareaders;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.Names;









 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/datareaders/ZipcodeReader.java
package org.apache.bigtop.datagenerators.bigpetstore.datareaders;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
































			ZipcodeRecord record = new ZipcodeRecord(zipcode,
					coordinates.get(zipcode).coordinates,

 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/customer/CustomerLocationPDF.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;








 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/customer/CustomerSampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.samplers.samplers.ConditionalSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;



 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/customer/CustomerSamplerBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.customer;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.InputData;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;
import org.apache.bigtop.datagenerators.samplers.samplers.ConditionalSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.RouletteWheelSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
import org.apache.bigtop.datagenerators.samplers.samplers.SequenceSampler;






 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/customer/CustomerStorePDF.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/ProductBuilderIterator.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/ProductCategoryBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.AlwaysTrueRule;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.NotRule;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.OrRule;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.Rule;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/ProductFieldValue.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/ProductFilterIterator.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.Rule;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/ProductIterator.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.cartesian.CartesianProduct;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.cartesian.CartesianProductBase;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.cartesian.CartesianProductField;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.Rule;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/cartesian/CartesianProduct.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.cartesian;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/cartesian/CartesianProductBase.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.cartesian;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/cartesian/CartesianProductField.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.cartesian;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/MediumProductCollection.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.collections;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.ProductCategoryBuilder;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.ProductFieldValue;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.AndRule;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.FieldPredicate;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.NotRule;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules.OrRule;





















 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/collections/SmallProductCollection.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.collections;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.ProductCategoryBuilder;
import org.apache.bigtop.datagenerators.bigpetstore.generators.products.ProductFieldValue;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/rules/AlwaysTrueRule.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/rules/AndRule.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/rules/FieldPredicate.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/rules/NotRule.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/rules/OrRule.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/products/rules/Rule.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.products.rules;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/MarkovModelProductCategorySampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.samplers.markovmodels.MarkovModel;
import org.apache.bigtop.datagenerators.samplers.markovmodels.MarkovModelBuilder;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/MarkovPurchasingModel.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.markovmodels.MarkovModel;
import org.apache.bigtop.datagenerators.samplers.markovmodels.MarkovProcess;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;



 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/MarkovPurchasingModelSampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.samplers.markovmodels.MarkovModel;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;



 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/MultinomialPurchasingModel.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.pdfs.MultinomialPDF;
import org.apache.bigtop.datagenerators.samplers.samplers.RouletteWheelSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/MultinomialPurchasingModelSampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.pdfs.MultinomialPDF;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
import org.apache.bigtop.datagenerators.samplers.samplers.UniformIntSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.UniformSampler;






 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/PurchasingModel.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;

 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/PurchasingModelSamplerBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.markovmodels.MarkovModel;
import org.apache.bigtop.datagenerators.samplers.samplers.BoundedMultiModalGaussianSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;






		Sampler<Double> fieldWeightSampler = new BoundedMultiModalGaussianSampler(Constants.PRODUCT_MSM_FIELD_WEIGHT_GAUSSIANS,
				Constants.PRODUCT_MSM_FIELD_WEIGHT_LOWERBOUND,

				Constants.PRODUCT_MSM_FIELD_SIMILARITY_WEIGHT_LOWERBOUND,





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/purchase/PurchasingProcesses.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.purchase;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.samplers.samplers.ConditionalSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/store/StoreLocationIncomePDF.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;









 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/store/StoreLocationPopulationPDF.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;



 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/store/StoreSampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/store/StoreSamplerBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.store;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Store;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ZipcodeRecord;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.pdfs.JointPDF;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;
import org.apache.bigtop.datagenerators.samplers.samplers.RouletteWheelSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
import org.apache.bigtop.datagenerators.samplers.samplers.SequenceSampler;



		ProbabilityDensityFunction<ZipcodeRecord> locationPopulationPDF =
		ProbabilityDensityFunction<ZipcodeRecord> locationIncomePDF =
		ProbabilityDensityFunction<ZipcodeRecord> locationJointPDF =



 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/CategoryWeightFunction.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.samplers.pdfs.ExponentialPDF;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;
import org.apache.bigtop.datagenerators.samplers.wfs.ConditionalWeightFunction;
import org.apache.bigtop.datagenerators.samplers.wfs.WeightFunction;


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/CustomerInventory.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;






 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/CustomerInventoryBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/CustomerTransactionParameters.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;






 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/CustomerTransactionParametersBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;



 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/CustomerTransactionParametersSampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
			Sampler<PetSpecies> petSpeciesSampler,


			builder.addPet(species);



 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/CustomerTransactionParametersSamplerBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.PetSpecies;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.BoundedMultiModalGaussianSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.RouletteWheelSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
import org.apache.bigtop.datagenerators.samplers.samplers.UniformIntSampler;





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/ProductCategoryInventory.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
{


		double amountUsedVariance = productCategory.getBaseAmountUsedVariance() * parameters.countPetsBySpecies(productCategory.getApplicableSpecies());






 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/ProductCategoryUsageSimulator.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.ExponentialSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.GaussianSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;






		double usageAmount = this.amountUsedAverage * timestep 






 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/ProductCategoryUsageTrajectory.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;









 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/ProposedPurchaseTimeSampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;





 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TransactionPurchasesHiddenMarkovModel.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.Constants;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.ConditionalSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.RouletteWheelSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
import org.apache.bigtop.datagenerators.samplers.wfs.ConditionalWeightFunction;


















 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TransactionPurchasesSamplerBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingModel;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingProcesses;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.ConditionalSampler;
import org.apache.bigtop.datagenerators.samplers.wfs.ConditionalWeightFunction;






 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TransactionSampler.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Transaction;
import org.apache.bigtop.datagenerators.samplers.samplers.ConditionalSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;



	{


 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TransactionSamplerBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Customer;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Product;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.Transaction;
import org.apache.bigtop.datagenerators.bigpetstore.datamodels.inputs.ProductCategory;
import org.apache.bigtop.datagenerators.bigpetstore.generators.purchase.PurchasingModel;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.ConditionalSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
import org.apache.bigtop.datagenerators.samplers.samplers.SequenceSampler;


	public TransactionSamplerBuilder(Collection<ProductCategory> productCategories,
		this.productCategories = productCategories;










 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TransactionTimePDF.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.samplers.pdfs.ConditionalProbabilityDensityFunction;
{
 b/bigtop-data-generators/bigpetstore-data-generator/src/main/java/org/apache/bigtop/datagenerators/bigpetstore/generators/transaction/TransactionTimeSamplerBuilder.java
package org.apache.bigtop.datagenerators.bigpetstore.generators.transaction;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.ExponentialSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;
import org.apache.bigtop.datagenerators.samplers.samplers.StatefulMonteCarloSampler;





		return new StatefulMonteCarloSampler<Double>(proposedTimeSampler,
 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/SeedFactory.java
package org.apache.bigtop.datagenerators.samplers;



 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/markovmodels/MarkovModel.java
package org.apache.bigtop.datagenerators.samplers.markovmodels;

 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/markovmodels/MarkovModelBuilder.java
package org.apache.bigtop.datagenerators.samplers.markovmodels;







 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/markovmodels/MarkovProcess.java
package org.apache.bigtop.datagenerators.samplers.markovmodels;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.samplers.RouletteWheelSampler;
import org.apache.bigtop.datagenerators.samplers.samplers.Sampler;











 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/pdfs/ConditionalProbabilityDensityFunction.java
package org.apache.bigtop.datagenerators.samplers.pdfs;
 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/pdfs/ExponentialPDF.java
package org.apache.bigtop.datagenerators.samplers.pdfs;


 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/pdfs/GaussianPDF.java
package org.apache.bigtop.datagenerators.samplers.pdfs;



 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/pdfs/JointPDF.java
package org.apache.bigtop.datagenerators.samplers.pdfs;






 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/pdfs/MultinomialPDF.java
package org.apache.bigtop.datagenerators.samplers.pdfs;




 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/pdfs/ProbabilityDensityFunction.java
package org.apache.bigtop.datagenerators.samplers.pdfs;
 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/pdfs/UniformPDF.java
package org.apache.bigtop.datagenerators.samplers.pdfs;



 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/BoundedMultiModalGaussianSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;







 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/ConditionalSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/DoubleSequenceSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;








 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/ExponentialSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;


 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/GaussianSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;


 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/MonteCarloSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;




 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/RouletteWheelSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.pdfs.MultinomialPDF;
import org.apache.bigtop.datagenerators.samplers.pdfs.ProbabilityDensityFunction;















 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/Sampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/SequenceSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;








 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/StatefulMonteCarloSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;
import org.apache.bigtop.datagenerators.samplers.pdfs.ConditionalProbabilityDensityFunction;





 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/UniformIntSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;


 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/samplers/UniformSampler.java
package org.apache.bigtop.datagenerators.samplers.samplers;
import org.apache.bigtop.datagenerators.samplers.SeedFactory;



 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/wfs/ConditionalWeightFunction.java
package org.apache.bigtop.datagenerators.samplers.wfs;
 b/bigtop-data-generators/bigtop-samplers/src/main/java/org/apache/bigtop/datagenerators/samplers/wfs/WeightFunction.java
package org.apache.bigtop.datagenerators.samplers.wfs;
	public CustomerGenerator(InputData inputData, List<Store> stores, SeedFactory seedFactory) throws Exception
		InputData inputData = new InputData(zipcodeTable);
	public InputData(List<ZipcodeRecord> zipcodeTable)
	private final Sampler<Pair<String, String>> nameSampler;
	public CustomerSampler(Sampler<Integer> idSampler,
			Sampler<Pair<String, String>> nameSampler,
			Sampler<Store> storeSampler,
		this.nameSampler = nameSampler;
		Pair<String, String> name = nameSampler.sample();
import org.apache.bigtop.datagenerators.namegenerator.NameGenerator;
import org.apache.commons.lang3.tuple.Pair;
	public Sampler<Customer> build() throws Exception
		Sampler<Pair<String, String>> nameSampler = new NameGenerator(seedFactory);
		return new CustomerSampler(idSampler, nameSampler, storeSampler, buildLocationSampler());
 b/bigtop-data-generators/bigtop-name-generator/src/main/java/org/apache/bigtop/datagenerators/namegenerator/NameReader.java
package org.apache.bigtop.datagenerators.namegenerator;
import java.io.BufferedInputStream;
import java.io.File;
	public NameReader() throws Exception
		this.path = getResource(new File("namedb/data/data.dat"));
	}

	private InputStream getResource(File filename) throws Exception
	{
		InputStream stream = getClass().getResourceAsStream("/input_data/"  filename);
		return new BufferedInputStream(stream);
 b/bigtop-data-generators/bigtop-name-generator/src/main/java/org/apache/bigtop/datagenerators/namegenerator/Names.java
package org.apache.bigtop.datagenerators.namegenerator;
 b/bigtop-data-generators/bigtop-location-data/src/main/java/org/apache/bigtop/datagenerators/locations/Location.java
package org.apache.bigtop.datagenerators.locations;
public class Location implements Serializable
	public Location(String zipcode, Pair<Double, Double> coordinates,
	public double distance(Location other)
 b/bigtop-data-generators/bigtop-location-data/src/main/java/org/apache/bigtop/datagenerators/locations/LocationReader.java
package org.apache.bigtop.datagenerators.locations;
import java.io.BufferedInputStream;
import java.io.File;
public class LocationReader
	
	private InputStream getResource(File filename)
		InputStream stream = getClass().getResourceAsStream("/input_data/"  filename);
		return new BufferedInputStream(stream);
	public ImmutableList<Location> readData() throws FileNotFoundException
		
		ImmutableMap<String, Double> incomes = readIncomeData(getResource(LocationConstants.INCOMES_FILE));
		ImmutableMap<String, Long> populations = readPopulationData(getResource(LocationConstants.POPULATION_FILE));
		ImmutableMap<String, ZipcodeLocationRecord> coordinates = readCoordinates(getResource(LocationConstants.COORDINATES_FILE));
		List<Location> table = new Vector<Location>();
			Location record = new Location(zipcode,
import org.apache.bigtop.datagenerators.locations.Location;
import org.apache.bigtop.datagenerators.locations.LocationReader;
		List<Location> locations = new LocationReader().readData();
		InputData inputData = new InputData(locations);
import org.apache.bigtop.datagenerators.locations.Location;
	Location location;
	public Customer(int id, Pair<String, String> name, Store store, Location location)
	public Location getLocation()
import org.apache.bigtop.datagenerators.locations.Location;
	Location location;
	public Store(int id, String name, Location location)
	public Location getLocation()
import org.apache.bigtop.datagenerators.locations.Location;

	List<Location> zipcodeTable;
	public InputData(List<Location> zipcodeTable)
	public List<Location> getZipcodeTable()
import org.apache.bigtop.datagenerators.locations.Location;
public class CustomerLocationPDF implements ProbabilityDensityFunction<Location>
	private final Map<Location, Double> pdf;
	public CustomerLocationPDF(List<Location> zipcodes, Store store, double averageDistance)
	protected ImmutableMap<Location, Double> build(List<Location> zipcodeTable,
		Map<Location, Double> zipcodeWeights = Maps.newHashMap();
		for(Location record : zipcodeTable)
		Map<Location, Double> pdf = Maps.newHashMap();
		for(Location record : zipcodeTable)
	public double probability(Location record)
import org.apache.bigtop.datagenerators.locations.Location;
	private final ConditionalSampler<Location, Store> locationSampler;
			ConditionalSampler<Location, Store> locationSampler)
		Location location = locationSampler.sample(store);
import org.apache.bigtop.datagenerators.locations.Location;
	protected ConditionalSampler<Location, Store> buildLocationSampler()
		final Map<Store, Sampler<Location>> locationSamplers = Maps.newHashMap();
			ProbabilityDensityFunction<Location> locationPDF = new CustomerLocationPDF(inputData.getZipcodeTable(),
			Sampler<Location> locationSampler = RouletteWheelSampler.create(inputData.getZipcodeTable(), locationPDF, seedFactory);
		return new ConditionalSampler<Location, Store>()
					public Location sample(Store store) throws Exception
import org.apache.bigtop.datagenerators.locations.Location;
public class StoreLocationIncomePDF implements ProbabilityDensityFunction<Location>
	public StoreLocationIncomePDF(List<Location> zipcodeTable, double incomeScalingFactor)
		for(Location record : zipcodeTable)
		for(Location record : zipcodeTable)
	private double incomeWeight(Location record)
	public double probability(Location datum)
import org.apache.bigtop.datagenerators.locations.Location;
public class StoreLocationPopulationPDF implements ProbabilityDensityFunction<Location>
	public StoreLocationPopulationPDF(List<Location> zipcodeTable)
		for(Location record : zipcodeTable)
	public double probability(Location record)
import org.apache.bigtop.datagenerators.locations.Location;
	private final Sampler<Location> locationSampler;
	public StoreSampler(Sampler<Integer> idSampler, Sampler<Location> locationSampler)
		Location location = locationSampler.sample();
import org.apache.bigtop.datagenerators.locations.Location;
	private final List<Location> zipcodeTable;
	public StoreSamplerBuilder(List<Location> zipcodeTable, SeedFactory seedFactory)
		ProbabilityDensityFunction<Location> locationPopulationPDF =
		ProbabilityDensityFunction<Location> locationIncomePDF =
		ProbabilityDensityFunction<Location> locationJointPDF =
				new JointPDF<Location>(zipcodeTable, locationPopulationPDF, locationIncomePDF);
		Sampler<Location> locationSampler = RouletteWheelSampler.create(zipcodeTable, locationJointPDF, seedFactory);
import org.apache.bigtop.datagenerators.samplers.wfs.MultinomialWF;
		firstNameSampler = RouletteWheelSampler.create(new MultinomialWF<String>(names.getFirstNames()).normalize(), seedFactory);
		lastNameSampler = RouletteWheelSampler.create(new MultinomialWF<String>(names.getLastNames()).normalize(), seedFactory);
			double weight = 1.0 / (Double.parseDouble(cols[5])  1.0);
public class Location implements Serializable {
  private static final long serialVersionUID = 1769986686070108470L;
  final String zipcode;
  final Pair<Double, Double> coordinates;
  final String city;
  final String state;
  final double medianHouseholdIncome;
  final long population;
  public Location(String zipcode, Pair<Double, Double> coordinates, String city,
          String state, double medianHouseholdIncome, long population) {
    this.city = city;
    this.state = state;
    this.zipcode = zipcode;
    this.coordinates = coordinates;
    this.medianHouseholdIncome = medianHouseholdIncome;
    this.population = population;
  }
  public String getZipcode() {
    return zipcode;
  }
  public Pair<Double, Double> getCoordinates() {
    return coordinates;
  }
  public double getMedianHouseholdIncome() {
    return medianHouseholdIncome;
  }
  public long getPopulation() {
    return population;
  }
  public double distance(Pair<Double, Double> otherCoords) {
    if (Math.abs(coordinates.getLeft() - otherCoords.getLeft()) < 1e-5
            || Math.abs(coordinates.getRight() - otherCoords.getRight()) < 1e-5)
      return 0.0;
    double dist = Math.sin(Math.toRadians(coordinates.getLeft()))
            * Math.sin(Math.toRadians(otherCoords.getLeft()))
             Math.cos(Math.toRadians(coordinates.getLeft()))
                    * Math.cos(Math.toRadians(otherCoords.getLeft()))
                    * Math.cos(Math.toRadians(
                            coordinates.getRight() - otherCoords.getRight()));
    dist = Math.toDegrees(Math.acos(dist)) * 69.09;
    return dist;
  }
  public double distance(Location other) {
    if (other.getZipcode().equals(zipcode))
      return 0.0;
    Pair<Double, Double> otherCoords = other.getCoordinates();
    return distance(otherCoords);
  }

  public String getCity() {
    return city;
  }

  public String getState() {
    return state;
  }
public class LocationConstants {
  public static final File COORDINATES_FILE = new File("zips.csv");
  public static final File INCOMES_FILE = new File(
          "ACS_12_5YR_S1903/ACS_12_5YR_S1903_with_ann.csv");
  public static final File POPULATION_FILE = new File("population_data.csv");
public class LocationReader {
  private static class ZipcodeLocationRecord {
    public final Pair<Double, Double> coordinates;
    public final String state;
    public final String city;
    public ZipcodeLocationRecord(Pair<Double, Double> coordinates, String city,
            String state) {
      this.coordinates = coordinates;
      this.city = city;
      this.state = state;
    }
  }
  private InputStream getResource(File filename) {
    InputStream stream = getClass()
            .getResourceAsStream("/input_data/"  filename);
    return new BufferedInputStream(stream);
  }
  private ImmutableMap<String, Double> readIncomeData(InputStream path)
          throws FileNotFoundException {
    Scanner scanner = new Scanner(path);
    // skip headers
    scanner.nextLine();
    scanner.nextLine();
    Map<String, Double> entries = Maps.newHashMap();
    while (scanner.hasNextLine()) {
      String line = scanner.nextLine().trim();
      String[] cols = line.split(",");
      // zipcodes are in the form "ZCTA5 XXXXX"
      String zipcode = cols[2].split(" ")[1].trim();
      try {
        double medianHouseholdIncome = Integer.parseInt(cols[5].trim());
        entries.put(zipcode, medianHouseholdIncome);
      } catch (NumberFormatException e) {
      }
    }
    scanner.close();
    return ImmutableMap.copyOf(entries);
  }
  private ImmutableMap<String, Long> readPopulationData(InputStream path)
          throws FileNotFoundException {
    Scanner scanner = new Scanner(path);
    // skip header
    scanner.nextLine();
    Map<String, Long> entries = Maps.newHashMap();
    while (scanner.hasNextLine()) {
      String line = scanner.nextLine().trim();
      if (line.length() == 0)
        continue;
      String[] cols = line.split(",");
      String zipcode = cols[0].trim();
      Long population = Long.parseLong(cols[1].trim());
      if (entries.containsKey(zipcode)) {
        entries.put(zipcode, Math.max(entries.get(zipcode), population));
      } else {
        entries.put(zipcode, population);
      }
    }
    scanner.close();
    return ImmutableMap.copyOf(entries);
  }
  private ImmutableMap<String, ZipcodeLocationRecord> readCoordinates(
          InputStream path) throws FileNotFoundException {
    Scanner scanner = new Scanner(path);
    // skip header
    scanner.nextLine();
    Map<String, ZipcodeLocationRecord> entries = Maps.newHashMap();
    while (scanner.hasNextLine()) {
      String line = scanner.nextLine().trim();
      String[] cols = line.split(", ");
      // remove quote marks
      String zipcode = cols[0].substring(1, cols[0].length() - 1);
      String state = cols[1].substring(1, cols[1].length() - 1);
      Double latitude = Double
              .parseDouble(cols[2].substring(1, cols[2].length() - 1));
      Double longitude = Double
              .parseDouble(cols[3].substring(1, cols[3].length() - 1));
      String city = cols[4].substring(1, cols[4].length() - 1);
      Pair<Double, Double> coords = Pair.of(latitude, longitude);
      ZipcodeLocationRecord record = new ZipcodeLocationRecord(coords, city,
              state);
      entries.put(zipcode, record);
    }
    scanner.close();
    return ImmutableMap.copyOf(entries);
  }
  public ImmutableList<Location> readData() throws FileNotFoundException {
    ImmutableMap<String, Double> incomes = readIncomeData(
            getResource(LocationConstants.INCOMES_FILE));
    ImmutableMap<String, Long> populations = readPopulationData(
            getResource(LocationConstants.POPULATION_FILE));
    ImmutableMap<String, ZipcodeLocationRecord> coordinates = readCoordinates(
            getResource(LocationConstants.COORDINATES_FILE));
    Set<String> zipcodeSubset = new HashSet<String>(incomes.keySet());
    zipcodeSubset.retainAll(populations.keySet());
    zipcodeSubset.retainAll(coordinates.keySet());

    List<Location> table = new Vector<Location>();
    for (String zipcode : zipcodeSubset) {
      Location record = new Location(zipcode,
              coordinates.get(zipcode).coordinates,
              coordinates.get(zipcode).city, coordinates.get(zipcode).state,
              incomes.get(zipcode), populations.get(zipcode));
      table.add(record);
    }

    return ImmutableList.copyOf(table);
  }
  protected static final String METASTORE_URL = "odpi.test.hive.metastore.url";
  protected static final String TEST_THRIFT = "odpi.test.hive.thrift.test";
  protected static boolean testActive(String property, String description) {
    String val = System.getProperty(property, "true");
    LOG.debug(description  " is "  val);
    return Boolean.valueOf(val);
  }

		
			LOG.debug("Failed to get process environment: " e1.getMessage());
			LOG.debug("Failed to execute command with exit value: " String.valueOf(resultHandler.getExitValue()));
			LOG.debug("outputStream: " outputStream.toString());
			entry.put("exitValue", String.valueOf(resultHandler.getExitValue()));
			entry.put("outputStream", outputStream.toString()  e.getMessage());
			return entry;
			LOG.debug("Failed to execute command with exit value: " String.valueOf(resultHandler.getExitValue()));
			LOG.debug("outputStream: " outputStream.toString());
			entry.put("exitValue", String.valueOf(resultHandler.getExitValue()));
			entry.put("outputStream", outputStream.toString()  e.getMessage());
			return entry;
  protected static final String TEST_HCATALOG = "odpi.test.hive.hcatalog.test";
  protected static final String HIVE_CONF_DIR = "odpi.test.hive.conf.dir";
  protected static final String HADOOP_CONF_DIR = "odpi.test.hadoop.conf.dir";
import org.apache.hadoop.util.ToolRunner;
    job.addCacheArchive(new URI("hdfs:/user/gates/libfb303-0.9.2.jar"));

  public static void main(String[] args) throws Exception {
    int exitCode = ToolRunner.run(new HCatalogMR(), args);
    System.exit(exitCode);
  }

		return execCommand(commandline, null);
	}

	public static Map<String, String> execCommand(CommandLine commandline,
																								Map<String, String> envVars) {
		if (envVars != null) {
			for (String key : envVars.keySet()) {
				env.put(key, envVars.get(key));
			}
		}
    // TODO All four of these jars need to be in the distributed cache of the job for the job to
    // succeed.  I loaded them into a known location in HDFS to get them in the cache.  There may
    // be a way to load them from a file on the gateway machine.  We could also put in a hdfs dfs
    // -put operation into a gradle step as part of the build so that the jars are picked up from
    // the distribution and put in a known location in HDFS from when they can be picked up in
    // the distributed cache.
