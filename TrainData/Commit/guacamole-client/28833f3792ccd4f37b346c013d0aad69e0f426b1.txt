 * Representation of a Guacamole protocol version. Convenience methods are
 * provided for parsing and comparing versions, as is necessary when
 * determining the version of the Guacamole protocol common to guacd and a
 * client.
public class GuacamoleProtocolVersion {
    public static final GuacamoleProtocolVersion VERSION_1_0_0 = new GuacamoleProtocolVersion(1, 0, 0);
    public static final GuacamoleProtocolVersion VERSION_1_1_0 = new GuacamoleProtocolVersion(1, 1, 0);

    /**
     * The most recent version of the Guacamole protocol at the time this
     * version of GuacamoleProtocolVersion was built.
     */
    public static final GuacamoleProtocolVersion LATEST = VERSION_1_1_0;
    public GuacamoleProtocolVersion(int major, int minor, int patch) {
     * Returns whether this GuacamoleProtocolVersion is at least as recent as
     * (greater than or equal to) the given version.
     *
     *     The version to which this GuacamoleProtocolVersion should be compared.
     *     true if this object is at least as recent as the given version,
     *     false if the given version is newer.
    public boolean atLeast(GuacamoleProtocolVersion otherVersion) {
            return this.major > otherVersion.getMajor();
            return this.minor > otherVersion.getMinor();
    public static GuacamoleProtocolVersion parseVersion(String version) {

        // Validate format of version string
        // Parse version number from version string
        return new GuacamoleProtocolVersion(
            Integer.parseInt(versionMatcher.group(1)),
            Integer.parseInt(versionMatcher.group(2)),
            Integer.parseInt(versionMatcher.group(3))
        );


    @Override
    public int hashCode() {
        int hash = 7;
        hash = 61 * hash  this.major;
        hash = 61 * hash  this.minor;
        hash = 61 * hash  this.patch;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == null || !(obj instanceof GuacamoleProtocolVersion))
            return false;

        // Versions are equal if all major/minor/patch components are identical
        final GuacamoleProtocolVersion otherVersion = (GuacamoleProtocolVersion) obj;
        return this.major == otherVersion.getMajor()
            && this.minor == otherVersion.getMinor()
            && this.patch == otherVersion.getPatch();

    }

    @Override
    public String toString() {
        return "VERSION_"  getMajor()  "_"  getMinor()  "_"  getPatch();
