import net.jradius.client.auth.EAPTLSAuthenticator;
import net.jradius.client.auth.EAPTTLSAuthenticator;
import net.jradius.client.auth.PEAPAuthenticator;
 * @author Nick Couchman
     * Creates a new instance of RadiusConnection, configured with parameters
     * from guacamole.properties.
     *     A new RadiusConnection instance which has already been configured 
     *     with parameters from guacamole.properties.
     * Creates a new instance of RadiusAuthentictor, configured with
     * parameters specified within guacamole.properties.
     *
     * @return
     *     A new RadiusAuthenticator instance which has been configured
     *     with parameters from guacamole.properties, or null if
     *     configuration fails.
     *
     */
    private RadiusAuthenticator setupRadiusAuthenticator() {

        if(radiusClient == null) {
            logger.error("RADIUS client hasn't been set up, yet.");
            logger.debug("We can't run this method until the RADIUS client has been set up.");
            return null;
        }

        String radAuthName;
        String caFile;
        String caPassword;
        String caType;
        String keyFile;
        String keyPassword;
        String keyType;
        Boolean trustAll;
        String innerProtocol;

        // Pull configuration parameters from guacamole.properties
        try {
            radAuthName = confService.getRadiusAuthProtocol();
            caFile = confService.getRadiusCAFile();
            caPassword = confService.getRadiusCAPassword();
            caType = confService.getRadiusCAType();
            keyFile = confService.getRadiusKeyFile();
            keyPassword = confService.getRadiusKeyPassword();
            keyType = confService.getRadiusKeyType();
            trustAll = confService.getRadiusTrustAll();
            innerProtocol = confService.getRadiusEAPTTLSInnerProtocol();
            
        }
        catch (GuacamoleException e) {
            logger.error("Error retrieving configuration.");
            logger.debug("Error getting config parameters from file.");
            return null;
        }

        RadiusAuthenticator radAuth = radiusClient.getAuthProtocol(radAuthName);
        if(radAuth == null)
            return null;

        // If we're using any of the TLS protocols, we need to configure them
        if (radAuth instanceof PEAPAuthenticator || 
            radAuth instanceof EAPTLSAuthenticator || 
            radAuth instanceof EAPTTLSAuthenticator) {

            if (caFile != null && !caFile.isEmpty())
                ((EAPTLSAuthenticator)radAuth).setCaFile(caFile);

            if (caType != null && !caType.isEmpty())
                ((EAPTLSAuthenticator)radAuth).setCaFileType(caType);

            if (caPassword != null && !caPassword.isEmpty())
                ((EAPTLSAuthenticator)radAuth).setCaPassword(caPassword);

            if (keyFile != null && !keyFile.isEmpty())
                ((EAPTLSAuthenticator)radAuth).setKeyFile(keyFile);

            if (keyType != null && !keyType.isEmpty())
                ((EAPTLSAuthenticator)radAuth).setKeyFileType(keyType);

            if (keyPassword != null && !keyPassword.isEmpty())
                ((EAPTLSAuthenticator)radAuth).setKeyPassword(keyPassword);

            ((EAPTLSAuthenticator)radAuth).setTrustAll(trustAll);

        }

        // If we're using EAP-TTLS, we need to define tunneled protocol
        if (radAuth instanceof EAPTTLSAuthenticator) {

            if (innerProtocol == null || innerProtocol.isEmpty())
                return null;

            ((EAPTTLSAuthenticator)radAuth).setInnerProtocol(innerProtocol);

        }

        return radAuth;

    }

    /**
        RadiusAuthenticator radAuth = setupRadiusAuthenticator();

            AccessRequest radAcc = new AccessRequest(radiusClient);

            if (radAuth instanceof EAPTTLSAuthenticator)
                ((EAPTTLSAuthenticator)radAuth).setTunneledAttributes(radAttrs);
            else
                radAcc.addAttributes(radAttrs);

        // Set up the RadiusAuthenticator
        RadiusAuthenticator radAuth = setupRadiusAuthenticator();

        // Add attributes to the connection and send the packet
            AccessRequest radAcc = new AccessRequest(radiusClient);

            if (radAuth instanceof EAPTTLSAuthenticator)
                ((EAPTTLSAuthenticator)radAuth).setTunneledAttributes(radAttrs);
            else
                radAcc.addAttributes(radAttrs);

