     * The default maximum number of characters of Guacamole instruction data
     * to store if no explicit limit is provided.
    private static final int DEFAULT_INSTRUCTION_QUEUE_LIMIT = 131072;
     * desktop until the given instruction queue limit is reached. If an
     * upstream error is encountered, it is thrown as a
     * is encountered, until insufficient space remains in the instruction
     * queue, or until the connection appears to have been successful.
     * @param instructionQueueLimit
     *     The maximum number of characters of Guacamole instruction data to
     *     store within the instruction queue while searching for errors. Once
     *     this limit is exceeded, the connection is assumed to be successful.
     *
    public FailoverGuacamoleSocket(GuacamoleSocket socket,
            final int instructionQueueLimit)
            if (totalQueueSize >= instructionQueueLimit)
     * Creates a new FailoverGuacamoleSocket which reads Guacamole instructions
     * from the given socket, searching for errors from the upstream remote
     * desktop until a maximum of 128KB of instruction data has been queued. If
     * an upstream error is encountered, it is thrown as a
     * GuacamoleUpstreamException. This constructor will block until an error
     * is encountered, until insufficient space remains in the instruction
     * queue, or until the connection appears to have been successful.
     * Once the FailoverGuacamoleSocket has been created, all reads, writes,
     * etc. will be delegated to the provided socket.
     *
     * @param socket
     *     The GuacamoleSocket of the Guacamole connection this
     *     FailoverGuacamoleSocket should handle.
     *
     * @throws GuacamoleException
     *     If an error occurs while reading data from the provided socket.
     *
     * @throws GuacamoleUpstreamException
     *     If the connection to guacd succeeded, but an error occurred while
     *     connecting to the remote desktop.
     */
    public FailoverGuacamoleSocket(GuacamoleSocket socket)
            throws GuacamoleException, GuacamoleUpstreamException {
        this(socket, DEFAULT_INSTRUCTION_QUEUE_LIMIT);
    }

    /**
