import org.apache.guacamole.net.auth.ActivityRecord;
            @QueryParam("order") List<APISortPredicate> sortPredicates)
        for (APISortPredicate predicate : sortPredicates)
    /**
     * Retrieves the login history for all users, restricted by optional filter
     * parameters.
     *
     * @param requiredContents
     *     The set of strings that each must occur somewhere within the
     *     returned user records, whether within the associated username or any
     *     associated date. If non-empty, any user record not matching each of
     *     the strings within the collection will be excluded from the results.
     *
     * @param sortPredicates
     *     A list of predicates to apply while sorting the resulting user
     *     records, describing the properties involved and the sort order for
     *     those properties.
     *
     * @return
     *     A list of user records, describing the start and end times of user
     *     sessions.
     *
     * @throws GuacamoleException
     *     If an error occurs while retrieving the user history.
     */
    @GET
    @Path("users")
    public List<APIActivityRecord> getUserHistory(
            @QueryParam("contains") List<String> requiredContents,
            @QueryParam("order") List<APISortPredicate> sortPredicates)
            throws GuacamoleException {

        // Retrieve overall user history
        ActivityRecordSet<ActivityRecord> history = userContext.getUserHistory();

        // Restrict to records which contain the specified strings
        for (String required : requiredContents) {
            if (!required.isEmpty())
                history = history.contains(required);
        }

        // Sort according to specified ordering
        for (APISortPredicate predicate : sortPredicates)
            history = history.sort(predicate.getProperty(), predicate.isDescending());

        // Limit to maximum result size
        history = history.limit(MAXIMUM_HISTORY_SIZE);

        // Convert record set to collection of API user records
        List<APIActivityRecord> apiRecords = new ArrayList<APIActivityRecord>();
        for (ActivityRecord record : history.asCollection())
            apiRecords.add(new APIActivityRecord(record));

        // Return the converted history
        return apiRecords;

    }

