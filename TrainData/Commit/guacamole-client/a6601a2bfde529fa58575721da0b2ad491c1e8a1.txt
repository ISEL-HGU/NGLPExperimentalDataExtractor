     * Pattern which matches logical groupings of words within a
     * string. This pattern is intended to match logical groupings
    private static final Pattern STRING_NAME_GROUPING = Pattern.compile(
     * the given string. The provided string will be automatically transformed
     * from "CamelCase", "headlessCamelCase", "lowercase_with_underscores",
     * and "mixes_ofBoth_Styles" to consistent "UPPERCASE_WITH_UNDERSCORES".
     * Each returned attribute will be prefixed with the string value provided
     * in the prefix.  The value provided in prefix will be prepended to the
     * attribute name, but will itself not be transformed.
     *     The string to be used to generate the token name.
     *     given string.
    public static String canonicalize(final String name, final String prefix) {
        // simply converting the string to uppercase and adding the
        Matcher groupMatcher = STRING_NAME_GROUPING.matcher(name);
     * Generate the name of a parameter from the given string, and with a blank
     * prefix such that the token name will simply be the transformed version
     * of the string.
     *     The string to use to generate the token name.
     *     given string.
    public static String canonicalize(final String name) {
        return canonicalize(name, "");
