import org.apache.guacamole.auth.radius.form.GuacamoleRadiusChallenge;
import org.apache.guacamole.form.PasswordField;
    
    /**
     * The name of the password field where the user will enter a response to
     * the RADIUS challenge.
     */
    private static final String CHALLENGE_RESPONSE_PARAM = "radiusChallenge";
     * Returns an object containing the challenge message and the expected
     * credentials from a RADIUS challenge, or null if either state or reply
     * attributes are missing from the challenge.
     *     A GuacamoleRadiusChallenge object that contains the challenge message
     *     sent by the RADIUS server and the expected credentials that should
     *     be requested of the user in order to continue authentication.  One
     *     of the expected credentials *must* be the RADIUS state.  If either
     *     state or the reply are missing from the challenge this method will
     *     return null.
    private GuacamoleRadiusChallenge getRadiusChallenge(RadiusPacket challengePacket) {
        String replyMsg = replyAttr.getValue().toString();
        Field radiusResponseField = new PasswordField(CHALLENGE_RESPONSE_PARAM);
        // Return the GuacamoleRadiusChallenge object that has the state
        // and the expected response.
        return new GuacamoleRadiusChallenge(replyMsg,
                new CredentialsInfo(Arrays.asList(radiusResponseField,
                        radiusStateField)));
        String challengeResponse = request.getParameter(CHALLENGE_RESPONSE_PARAM);
            GuacamoleRadiusChallenge challenge = getRadiusChallenge(radPack);
            if (challenge == null)
            throw new GuacamoleInsufficientCredentialsException(
                    challenge.getChallengeText(),
                    challenge.getExpectedCredentials());
