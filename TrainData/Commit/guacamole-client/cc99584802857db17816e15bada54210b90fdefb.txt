
import org.apache.guacamole.properties.BooleanGuacamoleProperty;
     * A property that determines whether environment variables are evaluated
     * to override properties specified in guacamole.properties.
     */
    private static final BooleanGuacamoleProperty ENVIRONMENT_PROPERTY_OVERRIDE =
        new BooleanGuacamoleProperty() {
            @Override
            public String getName() {
                return "enable-environment-overrides";
            }
        };

    /**
     * Flag indicating whether environment variables can override properties.
     */
    private final boolean environmentPropertyOverride;

    /**
        // Should environment variables override configuration properties?
        environmentPropertyOverride = propertyOverrideEnabled(properties);
    /**
     * Checks for the presence of the {@link #ENVIRONMENT_PROPERTY_OVERRIDE}
     * property in the given properties collection.
     *
     * @param properties
     *     The properties collection to check.
     *
     * @return
     *     true if the property is present in the given properties collection
     *     and its parsed value is true
     *
     * @throws GuacamoleException If the value specified for the property
     *                            cannot be successfully parsed as a Boolean
     *
     */
    private static boolean propertyOverrideEnabled(Properties properties)
            throws GuacamoleException {

        final Boolean enableOverrides = ENVIRONMENT_PROPERTY_OVERRIDE.parseValue(
                properties.getProperty(ENVIRONMENT_PROPERTY_OVERRIDE.getName()));

        return enableOverrides != null && enableOverrides;
    }

     * The value may come from either the OS environment (if property override
     * is enabled) or the Properties collection that was loaded from
     * guacamole.properties. When checking the environment for the named
     * property, the name is first transformed by converting all hyphens to
     * underscores and converting the string to upper case letter, in accordance
     * with common convention for environment strings.
     *     The corresponding value for the property. If property override
     *     is enabled and the value is found in the OS environment, the value
     *     from the environment is returned. Otherwise, the value from
     *     guacamole.properties, if any, is returned.
        // Check for corresponding environment variable if overrides enabled
        if (environmentPropertyOverride) {
            // Transform the name according to common convention
            final String envName = name.replace('-', '_').toUpperCase();
            final String envValue = System.getenv(envName);

            if (envValue != null) {
                return envValue;
            }
