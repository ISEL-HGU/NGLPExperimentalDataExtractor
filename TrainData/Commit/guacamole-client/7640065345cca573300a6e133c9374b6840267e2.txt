import org.apache.guacamole.protocol.FilteredGuacamoleWriter;
import org.apache.guacamole.protocol.GuacamoleFilter;
     * The opcode of the instruction used to indicate a connection stability
     * test ping request or response. Note that this instruction is
     * encapsulated within an internal tunnel instruction (with the opcode
     * being the empty string), thus this will actually be the value of the
     * first element of the received instruction.
     */
    private static final String PING_OPCODE = "ping";

    /**
            /**
             * The outbound half of the WebSocket connection. This value will
             * always be non-null if tunnel is non-null.
             */
            private WsOutbound outbound = null;

            /**
             * Sends a Guacamole instruction along the outbound WebSocket
             * connection to the connected Guacamole client. If an instruction
             * is already in the process of being sent by another thread, this
             * function will block until in-progress instructions are complete.
             *
             * @param instruction
             *     The instruction to send.
             *
             * @throws IOException
             *     If an I/O error occurs preventing the given instruction from
             *     being sent.
             */
            private void sendInstruction(CharSequence instruction)
                    throws IOException {

                // NOTE: Synchronization on the non-final remote field here is
                // intentional. The outbound websocket connection is only
                // sensitive to simultaneous attempts to send messages with
                // respect to itself. If the connection changes, then
                // synchronization need only be performed in context of the new
                // connection
                synchronized (outbound) {
                    outbound.writeTextMessage(CharBuffer.wrap(instruction));
                }

            }

            /**
             * Sends a Guacamole instruction along the outbound WebSocket
             * connection to the connected Guacamole client. If an instruction
             * is already in the process of being sent by another thread, this
             * function will block until in-progress instructions are complete.
             *
             * @param instruction
             *     The instruction to send.
             *
             * @throws IOException
             *     If an I/O error occurs preventing the given instruction from being
             *     sent.
             */
            private void sendInstruction(GuacamoleInstruction instruction)
                    throws IOException {
                sendInstruction(instruction.toString());
            }

                // Filter received instructions, handling tunnel-internal
                // instructions without passing through to guacd
                GuacamoleWriter writer = new FilteredGuacamoleWriter(tunnel.acquireWriter(), new GuacamoleFilter() {

                    @Override
                    public GuacamoleInstruction filter(GuacamoleInstruction instruction)
                            throws GuacamoleException {

                        // Filter out all tunnel-internal instructions
                        if (instruction.getOpcode().equals(GuacamoleTunnel.INTERNAL_DATA_OPCODE)) {

                            // Respond to ping requests
                            List<String> args = instruction.getArgs();
                            if (args.size() >= 2 && args.get(0).equals(PING_OPCODE)) {

                                try {
                                    sendInstruction(new GuacamoleInstruction(
                                        GuacamoleTunnel.INTERNAL_DATA_OPCODE,
                                        PING_OPCODE, args.get(1)
                                    ));
                                }
                                catch (IOException e) {
                                    logger.debug("Unable to send \"ping\" response for WebSocket tunnel.", e);
                                }

                            }

                            return null;

                        }

                        // Pass through all non-internal instructions untouched
                        return instruction;

                    }

                });
                // Store outbound connection for future use via sendInstruction()
                this.outbound = outbound;

                            sendInstruction(new GuacamoleInstruction(
                            ));
                                        sendInstruction(CharBuffer.wrap(buffer));
