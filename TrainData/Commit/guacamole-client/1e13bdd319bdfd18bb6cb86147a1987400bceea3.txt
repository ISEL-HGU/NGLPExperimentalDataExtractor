import java.util.regex.Matcher;
import java.util.regex.Pattern;

     * A regular expression that matches the VERSION_X_Y_Z pattern, where
     * X is the major version component, Y is the minor version component,
     * and Z is the patch version component.  This expression puts each of
     * the version components in their own group so that they can be easily
     * used later.
     */
    private static final Pattern VERSION_PATTERN =
            Pattern.compile("^VERSION_([0-9])_([0-9])_([0-9])$");
    
    /**
    private boolean atLeast(GuacamoleProtocolVersion otherVersion) {
        // If major is not the same, return inequality
            return this.major > major;
        // Major is the same, but minor is not, return minor inequality
            return this.minor > minor;
        // Major and minor are equal, so return patch inequality
     * Compare this version with the major, minor, and patch components
     * provided to the method, and determine if this version is compatible
     * with the provided version, returning a boolean true if it is compatible,
     * otherwise false.  This version is compatible with the version specified
     * by the provided components if the major, minor, and patch components
     * are equivalent or less than those provided.
     * 
     * @param major
     *     The major version component to compare for compatibility.
     * 
     * @param minor
     *     The minor version component to compare for compatibility.
     * 
     * @param patch
     *     The patch version component to compare for compatibility.
     * 
     * @return 
     *     True if this version is compatibility with the version components
     *     provided, otherwise false.
     */
    private boolean isCompatible(int major, int minor, int patch) {
        
        if (this.major != major)
            return this.major < major;
        
        if (this.minor != minor)
            return this.minor < minor;
        
        return this.patch <= patch;
        
    }
    
    /**
        // If nothing is passed in, return null
        // Check the string against the pattern matcher
        Matcher versionMatcher = VERSION_PATTERN.matcher(version);
        
        // If there is no RegEx match, return null
        if (!versionMatcher.matches())
            return null;
        
            // Try the valueOf function
            
        
        // If nothing matches, find the closest compatible version.
            int myMajor = Integer.parseInt(versionMatcher.group(1));
            int myMinor = Integer.parseInt(versionMatcher.group(2));
            int myPatch = Integer.parseInt(versionMatcher.group(3));
            
            GuacamoleProtocolVersion myVersion = VERSION_1_0_0;
            
            // Loop through possible versions, grabbing the latest compatible
            for (GuacamoleProtocolVersion v : values()) {
                if (v.isCompatible(myMajor, myMinor, myPatch))
                    myVersion = v;
            }
            
            return myVersion;

