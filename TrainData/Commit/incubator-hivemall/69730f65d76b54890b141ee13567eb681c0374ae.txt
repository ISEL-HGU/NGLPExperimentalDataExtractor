import hivemall.utils.collections.maps.BoundedSortedMap;
import javax.annotation.Nonnegative;

public final class UDAFToOrderedMap extends UDAFToMap {
        final TypeInfo[] typeInfo = info.getParameters();
                size = Math.abs(size);
            return new DescendingMapEvaluator(size);
            return new AscendingMapEvaluator(size);
    public static final class AscendingMapEvaluator extends UDAFToMapEvaluator {
        private final int size;
        AscendingMapEvaluator(@Nonnegative int size) {
            super();
            this.size = size;
            if (size == 0) {
                ((MapAggregationBuffer) agg).container = new TreeMap<Object, Object>();
            } else {
                ((MapAggregationBuffer) agg).container = new BoundedSortedMap<Object, Object>(size);
    public static final class DescendingMapEvaluator extends UDAFToMapEvaluator {

        private final int size;

        DescendingMapEvaluator(int size) {
            super();
            this.size = size;
        }
            if (size == 0) {
                ((MapAggregationBuffer) agg).container = new TreeMap<Object, Object>(
                    Collections.reverseOrder());
            } else {
                ((MapAggregationBuffer) agg).container = new BoundedSortedMap<Object, Object>(size,
                    true);
            }
