                throw new IllegalArgumentException(
                    "feature index must be less than "  Integer.MAX_VALUE  ", but was "  l);
    public static boolean isBinaryOI(@Nonnull final ObjectInspector oi) {
        String typeName = oi.getTypeName();
        return BINARY_TYPE_NAME.equals(typeName);
    }

            throw new UDFArgumentException(
                "argument must be an array: "  TypeInfoUtils.getTypeInfoFromObjectInspector(oi));
            throw new UDFArgumentException(
                "argument must be an array: "  TypeInfoUtils.getTypeInfoFromObjectInspector(oi));
        PrimitiveObjectInspector elemOI =
                HiveUtils.asDoubleCompatibleOI(listOI.getListElementObjectInspector());
            throw new UDFArgumentException(
                "Dimension mismatched. Expected: "  out.length  ", Actual: "  length);
            throw new UDFArgumentException(
                "Dimension mismatched. Expected: "  out.length  ", Actual: "  length);
                throw new UDFArgumentTypeException(0,
                    "Unxpected type '"  argOI.getTypeName()  "' is passed.");
                throw new UDFArgumentTypeException(0,
                    "Unxpected type '"  argOI.getTypeName()  "' is passed.");
                throw new UDFArgumentTypeException(0,
                    "Unxpected type '"  argOI.getTypeName()  "' is passed.");
    public static PrimitiveObjectInspector asDoubleCompatibleOI(
            @Nonnull final ObjectInspector argOI) throws UDFArgumentTypeException {
        LazyStringObjectInspector oi =
                LazyPrimitiveObjectInspectorFactory.getLazyStringObjectInspector(false, escapeChar);
        LazyInteger lazy =
                new LazyInteger(LazyPrimitiveObjectInspectorFactory.LAZY_INT_OBJECT_INSPECTOR);
        LazyLong lazy =
                new LazyLong(LazyPrimitiveObjectInspectorFactory.LAZY_LONG_OBJECT_INSPECTOR);
