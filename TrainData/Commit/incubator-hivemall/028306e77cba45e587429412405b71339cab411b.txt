import hivemall.annotations.VisibleForTesting;
import hivemall.utils.lang.StringUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Nonnull;

// @formatter:off
        value = "_FUNC_(array<features::string> features, map<string, array<number>> quantiles_map)"
                 " - returns a binned feature vector as an array<features::string>\n"
                 "_FUNC_(number weight, array<number> quantiles) - returns bin ID as int",
                extended = "WITH extracted as (\n"  
                        "  select \n"  
                        "    extract_feature(feature) as index,\n"  
                        "    extract_weight(feature) as value\n"  
                        "  from\n"  
                        "    input l\n"  
                        "    LATERAL VIEW explode(features) r as feature\n"  
                        "),\n"  
                        "mapping as (\n"  
                        "  select\n"  
                        "    index, \n"  
                        "    build_bins(value, 5, true) as quantiles -- 5 bins with auto bin shrinking\n"  
                        "  from\n"  
                        "    extracted\n"  
                        "  group by\n"  
                        "    index\n"  
                        "),\n"  
                        "bins as (\n"  
                        "   select \n"  
                        "    to_map(index, quantiles) as quantiles \n"  
                        "   from\n"  
                        "    mapping\n"  
                        ")\n"  
                        "select\n"  
                        "  l.features as original,\n"  
                        "  feature_binning(l.features, r.quantiles) as features\n"  
                        "from\n"  
                        "  input l\n"  
                        "  cross join bins r\n\n" 
                        "> [\"name#Jacob\",\"gender#Male\",\"age:20.0\"] [\"name#Jacob\",\"gender#Male\",\"age:2\"]\n" 
                        "> [\"name#Isabella\",\"gender#Female\",\"age:20.0\"]    [\"name#Isabella\",\"gender#Female\",\"age:2\"]")
// @formatter:on
    public ObjectInspector initialize(ObjectInspector[] argOIs) throws UDFArgumentException {
        if (argOIs.length != 2) {
            throw new UDFArgumentLengthException("Specify two arguments :"  argOIs.length);
        if (HiveUtils.isListOI(argOIs[0]) && HiveUtils.isMapOI(argOIs[1])) {
            // feature_binning(array<features::string> features, map<string, array<number>> quantiles_map)
                ((ListObjectInspector) argOIs[0]).getListElementObjectInspector())) {
                    "Only array<string> type argument can be accepted but "
                             argOIs[0].getTypeName()  " was passed as `features`");
            featuresOI = HiveUtils.asListOI(argOIs[0]);
            quantilesMapOI = HiveUtils.asMapOI(argOIs[1]);
                    "Only map<string, array<number>> type argument can be accepted but "
                             argOIs[1].getTypeName()  " was passed as `quantiles_map`");
        } else if (HiveUtils.isPrimitiveOI(argOIs[0]) && HiveUtils.isListOI(argOIs[1])) {
            // feature_binning(number weight, array<number> quantiles)
            weightOI = HiveUtils.asDoubleCompatibleOI(argOIs[0]);
            quantilesOI = HiveUtils.asListOI(argOIs[1]);
                    "Only array<number> type argument can be accepted but "
                             argOIs[1].getTypeName()  " was passed as `quantiles`");
                         "or <number, array<number>> type arguments can be accepted but <"
                         argOIs[0].getTypeName()  ", "  argOIs[1].getTypeName()
                         "> was passed.");
    private transient Map<String, double[]> quantilesMap;
    private transient double[] quantilesArray;

    public Object evaluate(DeferredObject[] args) throws HiveException {
        final Object arg0 = args[0].get();
        if (arg0 == null) {
            return null;
        }
        final Object arg1 = args[1].get();
        if (arg1 == null) {
            throw new UDFArgumentException(
                "The second argument (i.e., quantiles) MUST be non-null value");
        }

                final Map<?, ?> map = quantilesMapOI.getMap(arg1);
                quantilesMap = new HashMap<String, double[]>(map.size() * 2);
                for (Map.Entry<?, ?> e : map.entrySet()) {
                    String k = keyOI.getPrimitiveJavaObject(e.getKey());
                    double[] v = HiveUtils.asDoubleArray(e.getValue(), quantilesOI, quantileOI);
                    quantilesMap.put(k, v);
            final List<?> features = featuresOI.getList(arg0);
            for (Object f : features) {
                final int pos = entry.indexOf(':');
                if (pos < 0) { // categorical
                } else { // quantitative
                    final String k = entry.substring(0, pos);
                    String v = entry.substring(pos  1);
                    final double[] bins = quantilesMap.get(k);
                    if (bins != null) { // binning
                        v = String.valueOf(findBin(bins, Double.parseDouble(v)));
                    result.add(new Text(k  ':'  v));
            if (quantilesArray == null) {
                quantilesArray = HiveUtils.asDoubleArray(arg1, quantilesOI, quantileOI);
            return new IntWritable(
                findBin(quantilesArray, PrimitiveObjectInspectorUtils.getDouble(arg0, weightOI)));
    @VisibleForTesting
    static int findBin(@Nonnull final double[] quantiles, final double value) throws HiveException {
        if (quantiles.length < 3) {
                         quantiles.length  ".");
        final int pos = Arrays.binarySearch(quantiles, value);
        return (pos < 0) ? ~pos - 1 : (pos == 0) ? 0 : pos - 1;
        return "feature_binning("  StringUtils.join(children, ',')  ')';
