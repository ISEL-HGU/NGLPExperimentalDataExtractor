import javax.annotation.CheckForNull;
import javax.annotation.Nullable;

import org.apache.hadoop.hive.ql.metadata.HiveException;
    @Nullable
    public FloatWritable evaluate(@Nullable final Double value, @CheckForNull final Double min,
            @CheckForNull final Double max) throws HiveException {
        return evaluate(double2Float(value), double2Float(min), double2Float(max));
    }

    @Nullable
    public FloatWritable evaluate(@Nullable final Float value, @CheckForNull final Float min,
            @CheckForNull final Float max) throws HiveException {
        if (value == null) {
            return null;
        }

        if (min == null)
            throw new HiveException("min should not be null");
        if (max == null)
            throw new HiveException("max should not be null");

    @Nullable
    public Text evaluate(@Nullable final String s, @CheckForNull final Double min,
            @CheckForNull final Double max) throws HiveException {
        return evaluate(s, double2Float(min), double2Float(max));
    @Nullable
    public Text evaluate(@Nullable final String s, @CheckForNull final Float min,
            @CheckForNull final Float max) throws HiveException {
        if (s == null) {
            return null;

        if (min == null)
            throw new HiveException("min should not be null");
        if (max == null)
            throw new HiveException("max should not be null");

        final String[] fv = s.split(":");
        if (fv.length != 2) {
            throw new HiveException(String.format("Invalid feature value "  "representation: %s",
                s));
        }
        float v;
        try {
            v = Float.parseFloat(fv[1]);
        } catch (NumberFormatException e) {
            throw new HiveException(String.format("Invalid feature value "
                     "representation: %s, %s can't parse to float.", s, fv[1]));
        }

        float scaled_v = min_max_normalization(v, min.floatValue(), max.floatValue());
        String ret = fv[0]  ':'  scaled_v;
    private static float min_max_normalization(final float value, final float min, final float max)
            throws HiveException {
        if (min > max) {
            throw new HiveException("min value `"  min  "` SHOULD be less than max value `"  max
                     '`');
    @Nullable
    private static Float double2Float(@Nullable final Double value) {
        if (value == null) {
            return null;
        } else {
            return Float.valueOf(value.floatValue());
