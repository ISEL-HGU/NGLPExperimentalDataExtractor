public class TypeConverterProcessor extends AbstractCamelAnnotationProcessor {
    protected void doProcess(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) throws Exception {
        TypeElement converterAnnotationType = this.processingEnv.getElementUtils().getTypeElement("org.apache.camel.Converter");
        Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(converterAnnotationType);
        Map<String, Element> converterClasses = new TreeMap<>();
        for (Element element : elements) {
            if (element instanceof TypeElement) {
                TypeElement classElement = (TypeElement) element;
                final String javaTypeName = canonicalClassName(classElement.getQualifiedName().toString());
                converterClasses.put(javaTypeName, element);
        if (!converterClasses.isEmpty()
                && !converterClasses.containsKey("org.apache.camel.converter.IOConverter")) {
            Filer filer = processingEnv.getFiler();
            FileObject resource = filer.createResource(StandardLocation.CLASS_OUTPUT,
                    "", "META-INF/services/org/apache/camel/TypeConverter",
                    converterClasses.values().toArray(new Element[0]));
            try (Writer w = resource.openWriter()) {
                w.append("# Generated by camel annotation processor\n");
                for (String s : converterClasses.keySet()) {
                    w.append(s).append("\n");
                }
            }
        }
