import java.io.FileNotFoundException;
import java.util.concurrent.atomic.AtomicBoolean;
        String existingText = null;
        if (springBootEnabled) {
            // is this a new component
            File file = new File(outSpringBootFolder, "spring-configuration-metadata.json");
            if (file.exists()) {
                try {
                    InputStream is = new FileInputStream(file);
                    existingText = IOHelper.loadText(is);
                    IOHelper.close(is);
                } catch (FileNotFoundException e) {
                    // ignore
                } catch (IOException e) {
                    throw new MojoExecutionException("Error loading "  outSpringBootFolder  "/spring-configuration-metadata.json file");
                }
            }
        }
        final String springBootExistingText = existingText;
        final AtomicBoolean springBootChanged = new AtomicBoolean(existingText == null);


                if (springBootExistingText != null && !springBootExistingText.contains(group.getName())) {
                    springBootChanged.set(true);
                }
                            if (springBootEnabled && springBootChanged.get()) {
        if (springBootChanged.get()) {
            writeSpringBootFile(propertyData, groupData);
        }

            String existingText = null;
            if (file.exists()) {
                try {
                    InputStream is = new FileInputStream(file);
                    existingText = IOHelper.loadText(is);
                    IOHelper.close(is);
                } catch (Exception e) {
                    // ignore
            }
            final String autowireExisting = existingText;

            // only write the file if its changed
            boolean matches = autowireExisting != null && autowireData.stream().allMatch(d -> autowireExisting.contains(d.getKey()  "="  d.getValue()));
            if (!matches) {
                try {
                    FileOutputStream fos = new FileOutputStream(file, false);
                    fos.write("# Generated by camel build tools\n".getBytes());
                    for (AutowireData data : autowireData) {
                        fos.write(data.getKey().getBytes());
                        fos.write('=');
                        fos.write(data.getValue().getBytes());
                        fos.write('\n');
                    }
                    IOHelper.close(fos);
                    getLog().info("Created file: "  file  " (autowire by classpath: "  autowireData.size()  ")");
                } catch (Throwable e) {
                    throw new MojoFailureException("Cannot write to file "  file  " due "  e.getMessage(), e);
                }
