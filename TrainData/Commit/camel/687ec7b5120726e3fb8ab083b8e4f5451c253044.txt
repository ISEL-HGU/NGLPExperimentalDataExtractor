import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import io.grpc.CallCredentials;
    public static Object constructGrpcAsyncStub(String packageName, String serviceName, Channel channel, final CallCredentials creds, final CamelContext context) {
        return constructGrpcStubClass(packageName, serviceName, GrpcConstants.GRPC_SERVICE_ASYNC_STUB_METHOD, channel, creds, context);
    public static Object constructGrpcBlockingStub(String packageName, String serviceName, Channel channel, final CallCredentials creds, final CamelContext context) {
        return constructGrpcStubClass(packageName, serviceName, GrpcConstants.GRPC_SERVICE_SYNC_STUB_METHOD, channel, creds, context);
    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CallCredentials creds, final CamelContext context) {
        Class[] paramChannel = {Channel.class};
        Object grpcStub = null;
            Method grpcMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel);
            if (grpcMethod == null) {
            grpcStub = ObjectHelper.invokeMethod(grpcMethod, grpcServiceClass, channel);
            
            if (creds != null) {
                return addClientCallCredentials(grpcStub, creds);
            }
        return grpcStub;
    }
    
    @SuppressWarnings("rawtypes")
    public static Object addClientCallCredentials(Object grpcStub, final CallCredentials creds) {
        Class[] paramCallCreds = {CallCredentials.class};
        Object grpcStubWithCreds = null;
               
        Method callCredsMethod = ReflectionHelper.findMethod(grpcStub.getClass(), GrpcConstants.GRPC_SERVICE_STUB_CALL_CREDS_METHOD, paramCallCreds);
        grpcStubWithCreds = ObjectHelper.invokeMethod(callCredsMethod, grpcStub, creds);
        
        return grpcStubWithCreds;
