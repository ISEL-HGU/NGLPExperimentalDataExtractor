import com.github.kristofa.brave.Brave;
import com.github.kristofa.brave.ClientSpanThreadBinder;
import com.github.kristofa.brave.ServerSpan;
import com.github.kristofa.brave.ServerSpanThreadBinder;
import com.github.kristofa.brave.SpanCollector;
import com.github.kristofa.brave.scribe.ScribeSpanCollector;
import com.twitter.zipkin.gen.Span;
                spanCollector = new ScribeSpanCollector(hostName, port);
                        spanCollector = new ScribeSpanCollector(host, num);
        if (spanReporter == null && spanCollector == null) {
        if (spanCollector == null) {
            ObjectHelper.notNull(spanReporter, "Reporter<zipkin2.Span>", this);
        }
            brave = newBrave(serviceName);
    private Brave newBrave(String serviceName) {
        Brave.Builder builder = new Brave.Builder(serviceName)
            .traceSampler(com.github.kristofa.brave.Sampler.create(rate));
        if (spanReporter != null) {
            builder = builder.spanReporter(spanReporter);
        } else if (spanCollector != null) {
            builder.spanCollector(spanCollector);
        }
        return builder.build();
    }

                LOG.debug("Creating Brave assigned to serviceName: {}", serviceName  " as fallback");
                brave = newBrave(serviceName);
