            if (url2 != null) {
                LOG.debug("Found TypeConverterLoader in bundle {}", bundle.getSymbolicName());
                Set<Class<?>> classes = new LinkedHashSet<>();
                Set<String> packages = getConverterPackages(bundle.getEntry(META_INF_TYPE_CONVERTER_LOADER));

                if (LOG.isTraceEnabled()) {
                    LOG.trace("Found {} {} packages: {}", packages.size(), META_INF_TYPE_CONVERTER_LOADER, packages);
                }
                for (String pkg : packages) {

                    if (StringHelper.isClassName(pkg)) {
                        // its a FQN class name so load it directly
                        LOG.trace("Loading {} class", pkg);
                        try {
                            Class<?> clazz = bundle.loadClass(pkg);
                            BundleTypeConverterLoader bundleTypeConverterLoader =
                                new BundleTypeConverterLoader(bundle, url3 != null);
                            bundleTypeConverterLoader.setTypeConverterLoader((TypeConverterLoader)clazz.newInstance());
                            resolvers.add(bundleTypeConverterLoader);
                            // the class could be found and loaded so continue to next
                            continue;
                        } catch (Throwable t) {
                            // Ignore
                            LOG.trace("Failed to load "  pkg  " class due "  t.getMessage()  ". This exception will be ignored.", t);
                        }
                    }
                }
                    
            } else if (url1 != null || url3 != null) {
        private TypeConverterLoader loader = new Loader();
        
        public void setTypeConverterLoader(TypeConverterLoader typeConverterloader) {
            this.loader = typeConverterloader;
        }
