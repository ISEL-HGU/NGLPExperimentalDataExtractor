         * This key/value mapping is used for building the query parameters. It
         * is expected to be of the generic type java.util.Map where the keys
         * are the named parameters of a given JPA query and the values are
         * their corresponding effective values you want to select for. When
         * it's used for producer, Simple expression can be used as a parameter
         * value. It allows you to retrieve parameter values from the message
         * body, header and etc.
         * 
         * The option is a: <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedJpaEndpointConsumerBuilder parameters(
                Map<String, Object> parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * This key/value mapping is used for building the query parameters. It
         * is expected to be of the generic type java.util.Map where the keys
         * are the named parameters of a given JPA query and the values are
         * their corresponding effective values you want to select for. When
         * it's used for producer, Simple expression can be used as a parameter
         * value. It allows you to retrieve parameter values from the message
         * body, header and etc.
         * 
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedJpaEndpointConsumerBuilder parameters(String parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * Whether to use Spring's SharedEntityManager for the
         * consumer/producer. Note in most cases joinTransaction should be set
         * to false as this is not an EXTENDED EntityManager.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Group: advanced
         */
        default AdvancedJpaEndpointConsumerBuilder sharedEntityManager(
                boolean sharedEntityManager) {
            setProperty("sharedEntityManager", sharedEntityManager);
            return this;
        }
        /**
         * Whether to use Spring's SharedEntityManager for the
         * consumer/producer. Note in most cases joinTransaction should be set
         * to false as this is not an EXTENDED EntityManager.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Group: advanced
         */
        default AdvancedJpaEndpointConsumerBuilder sharedEntityManager(
                String sharedEntityManager) {
            setProperty("sharedEntityManager", sharedEntityManager);
            return this;
        }
        /**
         * If set to true, then Camel will use the EntityManager from the header
         * JpaConstants.ENTITY_MANAGER instead of the configured entity manager
         * on the component/endpoint. This allows end users to control which
         * entity manager will be in use.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Group: producer (advanced)
         */
        default AdvancedJpaEndpointProducerBuilder usePassedInEntityManager(
                boolean usePassedInEntityManager) {
            setProperty("usePassedInEntityManager", usePassedInEntityManager);
            return this;
        }
        /**
         * If set to true, then Camel will use the EntityManager from the header
         * JpaConstants.ENTITY_MANAGER instead of the configured entity manager
         * on the component/endpoint. This allows end users to control which
         * entity manager will be in use.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Group: producer (advanced)
         */
        default AdvancedJpaEndpointProducerBuilder usePassedInEntityManager(
                String usePassedInEntityManager) {
            setProperty("usePassedInEntityManager", usePassedInEntityManager);
            return this;
        }
        /**
         * Whether to use Spring's SharedEntityManager for the
         * consumer/producer. Note in most cases joinTransaction should be set
         * to false as this is not an EXTENDED EntityManager.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Group: advanced
         */
        default AdvancedJpaEndpointProducerBuilder sharedEntityManager(
                boolean sharedEntityManager) {
            setProperty("sharedEntityManager", sharedEntityManager);
            return this;
        }
        /**
         * Whether to use Spring's SharedEntityManager for the
         * consumer/producer. Note in most cases joinTransaction should be set
         * to false as this is not an EXTENDED EntityManager.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Group: advanced
         */
        default AdvancedJpaEndpointProducerBuilder sharedEntityManager(
                String sharedEntityManager) {
            setProperty("sharedEntityManager", sharedEntityManager);
            return this;
        }
        /**
         * Whether to use Spring's SharedEntityManager for the
         * consumer/producer. Note in most cases joinTransaction should be set
         * to false as this is not an EXTENDED EntityManager.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Group: advanced
         */
        default AdvancedJpaEndpointBuilder sharedEntityManager(
                boolean sharedEntityManager) {
            setProperty("sharedEntityManager", sharedEntityManager);
            return this;
        }
        /**
         * Whether to use Spring's SharedEntityManager for the
         * consumer/producer. Note in most cases joinTransaction should be set
         * to false as this is not an EXTENDED EntityManager.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Group: advanced
         */
        default AdvancedJpaEndpointBuilder sharedEntityManager(
                String sharedEntityManager) {
            setProperty("sharedEntityManager", sharedEntityManager);
            return this;
        }
        /**
