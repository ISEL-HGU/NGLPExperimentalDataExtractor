import java.util.Locale;
 *     <li>ignore case - Whether to ignore case for property keys<li>
        private boolean ignoreCase = false;
        public Builder withAllowPrivateSetter(boolean allowPrivateSetter) {
            this.allowPrivateSetter = allowPrivateSetter;
            return this;
        }

        /**
         * Whether to ignore case in the property names (keys).
         */
        public Builder withIgnoreCase(boolean ignoreCase) {
            this.ignoreCase = ignoreCase;
        public Builder withOptionPrefix(String optionPrefix) {
            this.optionPrefix = optionPrefix;
            return bindProperties(camelContext, target, properties, optionPrefix, ignoreCase, nesting, deepNesting,
                    fluentBuilder, allowPrivateSetter, reference, placeholder);
            Class<?> type = getGetterType(target, key, false);
                    Method method = findBestSetterMethod(target.getClass(), key, true, true, false);
     * Binds the properties to the target object, and removes the property that was bound from properties.
     *
     * @param camelContext  the camel context
     * @param target        the target object
     * @param properties    the properties where the bound properties will be removed from
     * @param ignoreCase    whether to ignore case for property keys
     * @return              true if one or more properties was bound
     */
    public static boolean bindProperties(CamelContext camelContext, Object target, Map<String, Object> properties, boolean ignoreCase) {
        return bindProperties(camelContext, target, properties, null, ignoreCase, true, true, true, true, true, true);
    }

    /**
        return bindProperties(camelContext, target, properties, optionPrefix, false);
     * Note that the prefix is removed from the key before the property is bound.
     * @param camelContext  the camel context
     * @param target        the target object
     * @param properties    the properties where the bound properties will be removed from
     * @param optionPrefix  the prefix used to filter properties
     * @param ignoreCase    whether to ignore case for property keys
     * @return              true if one or more properties was bound
    public static boolean bindProperties(CamelContext camelContext, Object target, Map<String, Object> properties, String optionPrefix, boolean ignoreCase) {
        return bindProperties(camelContext, target, properties, optionPrefix, ignoreCase, true, true, true, true, true, true);
     * @param ignoreCase          whether to ignore case for property keys
                                         String optionPrefix, boolean ignoreCase,
        String uOptionPrefix = "";
        if (ignoreCase && isNotEmpty(optionPrefix)) {
            uOptionPrefix = optionPrefix.toUpperCase(Locale.US);
        }

                boolean match = key.startsWith(optionPrefix) || ignoreCase && key.toUpperCase(Locale.US).startsWith(uOptionPrefix);
                if (!match) {
            if (bindProperty(camelContext, target, key, value, ignoreCase, nesting, deepNesting, fluentBuilder, allowPrivateSetter, reference, placeholder)) {
        return bindProperty(camelContext, target, name, value, false);
    }

    /**
     * Binds the property to the target object.
     *
     * @param camelContext  the camel context
     * @param target        the target object
     * @param name          name of property
     * @param value         value of property
     * @param ignoreCase    whether to ignore case for property keys
     * @return              true if property was bound, false otherwise
     */
    public static boolean bindProperty(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
                return setProperty(camelContext, target, name, value, false, ignoreCase, true, true, true, true, true, true);
                                        boolean ignoreCase, boolean nesting, boolean deepNesting, boolean fluentBuilder,
                                        boolean allowPrivateSetter, boolean reference, boolean placeholder) {
                return setProperty(camelContext, target, name, value, false, ignoreCase, nesting, deepNesting, fluentBuilder, allowPrivateSetter, reference, placeholder);
        bindMandatoryProperty(camelContext, target, name, value, false);
    }

    /**
     * Binds the mandatory property to the target object (will fail if not set/bound).
     *
     * @param camelContext  the camel context
     * @param target        the target object
     * @param name          name of property
     * @param value         value of property
     * @param ignoreCase    whether to ignore case for property keys
     */
    public static void bindMandatoryProperty(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
                boolean bound = setProperty(camelContext, target, name, value, true, ignoreCase, true, true, true, true, true, true);
                                       boolean ignoreCase, boolean nesting, boolean deepNesting, boolean fluentBuilder,
                                       boolean allowPrivateSetter, boolean reference, boolean placeholder) throws Exception {
                    Object prop = getOrElseProperty(newTarget, part, null, ignoreCase);
                        Method method = findBestSetterMethod(newClass, part, fluentBuilder, allowPrivateSetter, ignoreCase);
                Method method = findBestSetterMethod(target.getClass(), name, fluentBuilder, allowPrivateSetter, ignoreCase);
        boolean hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, value, refName, fluentBuilder, allowPrivateSetter, ignoreCase);
    private static Object getOrElseProperty(Object target, String property, Object defaultValue, boolean ignoreCase) {
        Object answer = IntrospectionSupport.getOrElseProperty(target, key, defaultValue, ignoreCase);
    private static Method findBestSetterMethod(Class clazz, String name,
                                               boolean fluentBuilder, boolean allowPrivateSetter, boolean ignoreCase) {
        Set<Method> candidates = findSetterMethods(clazz, name, false, allowPrivateSetter, ignoreCase);
            candidates = findSetterMethods(clazz, name, fluentBuilder, allowPrivateSetter, ignoreCase);
    private static Class getGetterType(Object target, String name, boolean ignoreCase) {
            if (ignoreCase) {
                Method getter = IntrospectionSupport.getPropertyGetter(target.getClass(), name, true);
                if (getter != null) {
                    return getter.getReturnType();
                }
            } else {
                Method getter = IntrospectionSupport.getPropertyGetter(target.getClass(), name);
                if (getter != null) {
                    return getter.getReturnType();
                }
