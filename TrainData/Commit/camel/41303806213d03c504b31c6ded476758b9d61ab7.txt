    private static final Pattern METHOD_PATTERN = Pattern.compile("\\s*([^<\\s])?\\s*(<[^>]>)?(<(?<genericTypeParameterName>\\S)\\sextends\\s"
             "(?<genericTypeParameterUpperBound>\\S)>\\s\\k<genericTypeParameterName>)?\\s(\\S)\\s*\\(\\s*(?<signature>[\\S\\s,]*)\\)\\s*;?\\s*");
            // handle generic methods with single bounded type parameters
            String genericTypeParameterName = null;
            String genericTypeParameterUpperBound = null;
            try {
                genericTypeParameterName = methodMatcher.group("genericTypeParameterName");
                genericTypeParameterUpperBound = methodMatcher.group("genericTypeParameterUpperBound");
            } catch (IllegalArgumentException e) {
                // ignore
            }
            final Class<?> resultType = genericTypeParameterName != null ? forName(genericTypeParameterUpperBound) : forName(methodMatcher.group(1));
            final String name = methodMatcher.group(6);
            final String argSignature = methodMatcher.group(7);
                String genericParameterName = argsMatcher.group(1);
                if (genericTypeParameterName != null && genericTypeParameterName.equals(genericParameterName)) {
                    genericParameterName = genericTypeParameterUpperBound;
                }
                final Class<?> type = forName(genericParameterName);
                String genericParameterUpperbound = argsMatcher.group(2);
                String typeArgs = genericParameterUpperbound != null
                    ? genericParameterUpperbound.substring(1, genericParameterUpperbound.length() - 1).replaceAll(" ", "") : null;
                if (typeArgs != null && typeArgs.equals(genericTypeParameterName)) {
                    typeArgs = genericTypeParameterUpperBound;
                }
