        } else {
            failFast = prop.remove("camel.main.autoConfigurationFailFast");
            if (failFast == null) {
                failFast = prop.remove("camel.main.auto-configuration-fail-fast");
            }
            if (failFast != null) {
                PropertyBindingSupport.bindMandatoryProperty(camelContext, mainConfigurationProperties, "autoConfigurationFailFast", failFast, true);
            }
        Map<String, Object> contextProperties = new LinkedHashMap<>();
                contextProperties.put(optionKey(option), value);
        if (!contextProperties.isEmpty()) {
            LOG.info("Auto configuring CamelContext from loaded properties: {}", contextProperties.size());
            setPropertiesOnTarget(camelContext, camelContext, contextProperties, mainConfigurationProperties.isAutoConfigurationFailFast(), true);
        // log which options was not set
        if (!contextProperties.isEmpty()) {
            contextProperties.forEach((k, v) -> {
                LOG.warn("Property not auto configured: camel.context.{}={} on object: {}", k, v, camelContext);
            });
        }
        if (!hystrixProperties.isEmpty()) {
            ModelCamelContext model = camelContext.adapt(ModelCamelContext.class);
            HystrixConfigurationDefinition hystrix = model.getHystrixConfiguration(null);
            hystrixProperties.forEach((k, v) -> {
                LOG.warn("Property not auto configured: camel.hystrix.{}={} on object: {}", k, v, hystrix);
            });
        }
        if (!restProperties.isEmpty()) {
            ModelCamelContext model = camelContext.adapt(ModelCamelContext.class);
            RestConfiguration rest = model.getRestConfiguration();
            restProperties.forEach((k, v) -> {
                LOG.warn("Property not auto configured: camel.rest.{}={} on object: {}", k, v, rest);
            });
        }
