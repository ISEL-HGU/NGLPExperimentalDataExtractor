import java.util.Arrays;

import org.apache.camel.AsyncProducer;
import org.apache.camel.processor.Pipeline;
import org.apache.camel.util.AsyncProcessorConverterHelper;
import org.apache.camel.util.AsyncProcessorHelper;
    private final AsyncProducer producer;
    public InterceptSendToEndpointProcessor(InterceptSendToEndpoint endpoint, Endpoint delegate, AsyncProducer producer, boolean skip) throws Exception {
            AsyncProcessor detour = AsyncProcessorConverterHelper.convert(endpoint.getDetour());
            AsyncProcessor ascb = new AsyncProcessor() {
                @Override
                public boolean process(Exchange exchange, AsyncCallback callback) {
                    return callback(exchange, callback, true);
                }
                @Override
                public void process(Exchange exchange) throws Exception {
                    AsyncProcessorHelper.process(this, exchange);
                }
            };
            return new Pipeline(exchange.getContext(), Arrays.asList(detour, ascb)).process(exchange, callback);
        return callback(exchange, callback, true);
    }

    private boolean callback(Exchange exchange, AsyncCallback callback, boolean doneSync) {
            callback.done(doneSync);
            return doneSync;
            boolean s = producer.process(exchange, ds -> {
                callback.done(doneSync && ds);
            });
            return doneSync && s;
            callback.done(doneSync);
            return doneSync;
