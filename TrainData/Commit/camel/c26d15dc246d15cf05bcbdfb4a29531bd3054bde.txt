/*
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *

            ((ServiceDiscoveryAware)loadBalancer).setServiceDiscovery(serviceDiscovery);
            ((ServiceFilterAware)loadBalancer).setServiceFilter(serviceFilter);
            ((ServiceChooserAware)loadBalancer).setServiceChooser(serviceChooser);
        // The component is used to configure the default scheme to use (eg
        // camel component name).
        // The component configured on EIP takes precedence vs configured on
        // configuration.
        // The uri configured on EIP takes precedence vs configured on
        // configuration.
        return new DefaultServiceCallProcessor(camelContext, camelContext.resolvePropertyPlaceholders(definition.getName()), endpointScheme, endpointUri, definition.getPattern(),
                                               loadBalancer, retrieveExpression(camelContext, endpointScheme));
            config = lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_CALL_CONFIG_ID, ServiceCallConfigurationDefinition.class);
                answer = retrieve(ServiceDiscovery.class, camelContext, config::getServiceDiscovery, config::getServiceDiscoveryRef);
        return Suppliers
            .firstNotNull(() -> (definition.getServiceDiscoveryConfiguration() != null) ? definition.getServiceDiscoveryConfiguration().newInstance(camelContext) : null,
                () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_DISCOVERY_ID, ServiceDiscovery.class))
            .orElseGet(
                // Default, that's s little ugly but a load balancer may
                // live without
                // (i.e. the Ribbon one) so let's delegate the null check
                // to the actual
                () -> null);
                answer = retrieve(ServiceFilter.class, camelContext, config::getServiceFilter, config::getServiceFilterRef);
        return Suppliers.firstNotNull(() -> (definition.getServiceFilterConfiguration() != null) ? definition.getServiceFilterConfiguration().newInstance(camelContext) : null,
            // Local configuration
            () -> retrieve(ServiceFilter.class, camelContext, definition::getServiceFilter, definition::getServiceFilterRef),
            // Linked configuration
            () -> retrieveServiceFilter(camelContext, this::retrieveConfig),
            // Default configuration
            () -> retrieveServiceFilter(camelContext, this::retrieveDefaultConfig),
            // Check if there is a single instance in
            // the registry
            () -> findByType(camelContext, ServiceFilter.class),
            // From registry
            () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_FILTER_ID, ServiceFilter.class))
            .orElseGet(
            // Default
            () -> new HealthyServiceFilter());
            answer = retrieve(ServiceChooser.class, camelContext, config::getServiceChooser, config::getServiceChooserRef);
            // Local configuration
            () -> retrieve(ServiceChooser.class, camelContext, definition::getServiceChooser, definition::getServiceChooserRef),
            // Linked configuration
            () -> retrieveServiceChooser(camelContext, this::retrieveConfig),
            // Default configuration
            () -> retrieveServiceChooser(camelContext, this::retrieveDefaultConfig),
            // Check if there is a single instance in
            // the registry
            () -> findByType(camelContext, ServiceChooser.class),
            // From registry
            () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_CHOOSER_ID, ServiceChooser.class))
            .orElseGet(
            // Default
            () -> new RoundRobinServiceChooser());
                answer = retrieve(ServiceLoadBalancer.class, camelContext, config::getLoadBalancer, config::getLoadBalancerRef);
        return Suppliers.firstNotNull(() -> (definition.getLoadBalancerConfiguration() != null) ? definition.getLoadBalancerConfiguration().newInstance(camelContext) : null,
            // Local configuration
            () -> retrieve(ServiceLoadBalancer.class, camelContext, definition::getLoadBalancer, definition::getLoadBalancerRef),
            // Linked configuration
            () -> retrieveLoadBalancer(camelContext, this::retrieveConfig),
            // Default configuration
            () -> retrieveLoadBalancer(camelContext, this::retrieveDefaultConfig),
            // Check if there is a single instance in
            // the registry
            () -> findByType(camelContext, ServiceLoadBalancer.class),
            // From registry
            () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_LOAD_BALANCER_ID, ServiceLoadBalancer.class))
            .orElseGet(
            // Default
            () -> new DefaultServiceLoadBalancer());
                answer = retrieve(Expression.class, camelContext, config::getExpression, config::getExpressionRef);
        Optional<Expression> expression = Suppliers
            .firstNotNull(() -> (definition.getExpressionConfiguration() != null) ? definition.getExpressionConfiguration().newInstance(camelContext) : null,
                () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_CALL_EXPRESSION_ID, Expression.class));
                // If a factory is found in the registry do not re-configure it
                // as
                        factory = (ServiceExpressionFactory)camelContext.getInjector().newInstance(type);
                        throw new IllegalArgumentException("Resolving Expression: "  lookupName  " detected type conflict: Not a ServiceExpressionFactory implementation. Found: "
                                                            type.getName());
