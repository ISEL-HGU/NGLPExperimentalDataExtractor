import org.apache.camel.CamelContext;
        this(null);
    }

    ServiceNowMetaDataExtension(CamelContext context) {
        super(context);

    public Optional<MetaData> meta(Map<String, Object> parameters) {
        final String metaType = (String)parameters.getOrDefault("metaType", "definition");
        // Retrieve the table definition as json-scheme
        if (ObjectHelper.equalIgnoreCase(objectType, ServiceNowConstants.RESOURCE_TABLE) && ObjectHelper.equalIgnoreCase(metaType, "definition")) {
            try {
                return tableDefinition(context);
            } catch (Exception e) {
                throw new IllegalStateException(e);
            }
        // retrieve the list of tables excluding those used for import sets
        if (ObjectHelper.equalIgnoreCase(objectType, ServiceNowConstants.RESOURCE_TABLE) && ObjectHelper.equalIgnoreCase(metaType, "list")) {
            final MetaContext context = new MetaContext(parameters);

            // validate meta parameters
            ObjectHelper.notNull(context.getObjectType(), "objectType");

            try {
                return tableList(context);
            } catch (Exception e) {
                throw new IllegalStateException(e);
            }
        }

        // retrieve the list of import set tables
        if (ObjectHelper.equalIgnoreCase(objectType, ServiceNowConstants.RESOURCE_IMPORT) && ObjectHelper.equalIgnoreCase(metaType, "list")) {
            try {
                return importSetList(context);
            } catch (Exception e) {
                throw new IllegalStateException(e);
            }
    private Optional<MetaData> tableDefinition(MetaContext context) throws Exception {
        final List<String> names = getObjectHierarchy(context);
        final ObjectNode root = context.getConfiguration().getOrCreateMapper().createObjectNode();
        final String baseUrn = (String)context.getParameters().getOrDefault("baseUrn", "org:apache:camel:component:servicenow");
        // Schema
        root.put("$schema", "http://json-schema.org/schema#");
        root.put("id", String.format("urn:jsonschema:%s:%s)", baseUrn, context.getObjectName()));
        root.put("type", "object");
        root.put("additionalProperties", false);
        // Schema sections
        root.putObject("properties");
        root.putArray("required");
        loadProperties(context);
        for (String name : names) {
            context.getStack().push(name);
            LOGGER.debug("Load dictionary <{}>", context.getStack());
            loadDictionary(context, name, root);
            context.getStack().pop();

        final String dateFormat = properties.getOrDefault("glide.sys.date_format", "yyyy-MM-dd");
        final String timeFormat = properties.getOrDefault("glide.sys.time_format", "HH:mm:ss");

        return Optional.of(
            MetaDataBuilder.on(getCamelContext())
                .withAttribute(MetaData.CONTENT_TYPE, "application/schemajson")
                .withAttribute(MetaData.JAVA_TYPE, JsonNode.class)
                .withAttribute("date.format", dateFormat)
                .withAttribute("time.format", timeFormat)
                .withAttribute("date-time.format", dateFormat  " "  timeFormat)
                .withPayload(root)
                .build()
        );
    private Optional<MetaData> importSetList(MetaContext context) throws Exception {
        Optional<JsonNode> response = context.getClient().reset()
            .types(MediaType.APPLICATION_JSON_TYPE)
            .path("now")
            .path(context.getConfiguration().getApiVersion())
            .path("table")
            .path("sys_db_object")
            .query("sysparm_exclude_reference_link", "true")
            .query("sysparm_fields", "name%2Csys_id")
            .query("sysparm_query", "name=sys_import_set_row")
            .trasform(HttpMethod.GET, this::findResultNode);

        if (response.isPresent()) {
            final JsonNode node = response.get();
            final JsonNode sysId = node.findValue("sys_id");

            if (sysId == null) {
                throw new IllegalStateException("Unable to determine sys_id of sys_import_set_row");
            }

            response = context.getClient().reset()
                .query("sysparm_fields", "name%2Csys_name")
                .queryF("sysparm_query", "super_class=%s", sysId.textValue())
                final ObjectNode root = context.getConfiguration().getOrCreateMapper().createObjectNode();
                processResult(response.get(), n -> {
                    final JsonNode name = n.findValue("name");
                    final JsonNode label = n.findValue("sys_name");
                    if (name != null && label != null) {
                        root.put(name.textValue(), label.textValue());
                    }
                });

                return Optional.of(
                    MetaDataBuilder.on(getCamelContext())
                        .withAttribute(MetaData.CONTENT_TYPE, "application/json")
                        .withAttribute(MetaData.JAVA_TYPE, JsonNode.class)
                        .withPayload(root)
                        .build()
                );
            }
        }

        return Optional.empty();
    }

    private Optional<MetaData> tableList(MetaContext context) throws Exception {
        Optional<JsonNode> response = context.getClient().reset()
            .types(MediaType.APPLICATION_JSON_TYPE)
            .path("now")
            .path(context.getConfiguration().getApiVersion())
            .path("table")
            .path("sys_db_object")
            .query("sysparm_exclude_reference_link", "true")
            .query("sysparm_fields", "name%2Csys_id")
            .query("sysparm_query", "name=sys_import_set_row")
            .trasform(HttpMethod.GET, this::findResultNode);

        if (response.isPresent()) {
            final JsonNode node = response.get();
            final JsonNode sysId = node.findValue("sys_id");

            if (sysId == null) {
            } else {
                response = context.getClient().reset()
                    .types(MediaType.APPLICATION_JSON_TYPE)
                    .path("now")
                    .path(context.getConfiguration().getApiVersion())
                    .path("table")
                    .path("sys_db_object")
                    .query("sysparm_exclude_reference_link", "true")
                    .query("sysparm_fields", "name%2Csys_name")
                    .queryF("sysparm_query", "super_class!=%s", sysId.textValue())
                    .trasform(HttpMethod.GET, this::findResultNode);

            if (response.isPresent()) {
                final ObjectNode root = context.getConfiguration().getOrCreateMapper().createObjectNode();

                processResult(response.get(), n -> {
                    final JsonNode name = n.findValue("name");
                    final JsonNode label = n.findValue("sys_name");

                    if (name != null && label != null) {
                        root.put(name.textValue(), label.textValue());
                    }
                });

                return Optional.of(
                    MetaDataBuilder.on(getCamelContext())
                        .withAttribute(MetaData.CONTENT_TYPE, "application/json")
                        .withAttribute(MetaData.JAVA_TYPE, JsonNode.class)
                        .withAttribute("Meta-Context", ServiceNowConstants.RESOURCE_IMPORT)
                        .withPayload(root)
                        .build()
                );
            }
    private void loadProperties(MetaContext context) throws Exception {
        String offset = "0";
        while (true) {
            Response response = context.getClient().reset()
                .types(MediaType.APPLICATION_JSON_TYPE)
                .path("now")
                .path(context.getConfiguration().getApiVersion())
                .path("table")
                .path("sys_properties")
                .query("sysparm_exclude_reference_link", "true")
                .query("sysparm_fields", "name%2Cvalue")
                .query("sysparm_offset", offset)
                .query("sysparm_query", "name=glide.sys.date_format^ORname=glide.sys.time_format")
                .invoke(HttpMethod.GET);
            findResultNode(response).ifPresent(node -> processResult(node, n -> {
                if (n.hasNonNull("name") && n.hasNonNull("value")) {
                    properties.putIfAbsent(
                        n.findValue("name").asText(),
                        n.findValue("value").asText()
                    );
            }));

            Optional<String> next = ServiceNowHelper.findOffset(response, ServiceNowConstants.LINK_NEXT);
            if (next.isPresent()) {
                offset = next.get();
            } else {
                break;
            this.configuration = new ServiceNowConfiguration();
                throw new IllegalStateException(e);
            this.instanceName = (String)parameters.get("instanceName");
