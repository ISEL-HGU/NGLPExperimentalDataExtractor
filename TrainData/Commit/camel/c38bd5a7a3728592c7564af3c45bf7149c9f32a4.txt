        expects(new AssertionTask() {
            @Override
            public void assertOnIndex(int index) {
                assertMessagesSorted(expression, true, index);
            }

                assertMessagesSorted(createExpression(getCamelContext()), true, index);
        expects(new AssertionTask() {
            @Override
            public void assertOnIndex(int index) {
                assertMessagesSorted(expression, false, index);
            }

        final AssertionClause clause = new AssertionClauseTask(this) {
            @Override
            public void assertOnIndex(int index) {
                assertMessagesSorted(createExpression(getCamelContext()), false, index);
            }

        List<Exchange> list = getReceivedExchanges();
        for (int i = 0; i < list.size(); i) {
            assertMessagesSorted(expression, ascending, i);
        }
    }

    protected void assertMessagesSorted(Expression expression, boolean ascending, int index) {

        int prev = index - 1;
        if (prev > 0) {
            List<Exchange> list = getReceivedExchanges();
            Exchange e1 = list.get(prev);
            Exchange e2 = list.get(index);
                fail("Messages not "  type  ". Messages"  prev  " and "  index  " are equal with value: "
                         expression.evaluate(e1, Object.class)  " for expression: "  expression  ". Exchanges: "  e1  " and "  e2);
                    fail("Messages not "  type  ". Message "  prev  " has value: "  expression.evaluate(e1, Object.class)
                             " and message "  index  " has value: "  expression.evaluate(e2, Object.class)  " for expression: "
                             expression  ". Exchanges: "  e1  " and "  e2);

