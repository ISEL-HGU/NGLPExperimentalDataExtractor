import org.apache.camel.http.common.HttpHelper;
import org.apache.camel.http.common.HttpOperationFailedException;
        clientExchange.setResponseListener(on((ClientExchange response) -> {
                // if there was a http error code then check if we should throw an exception
                final int code = clientExchange.getResponse().getResponseCode();
                LOG.debug("Http responseCode: {}", code);

                final boolean ok = HttpHelper.isStatusCodeOk(code, "200-299");
                if (!ok && throwExceptionOnFailure) {
                    // operation failed so populate exception to throw
                    final String uri = endpoint.getHttpURI().toString();
                    final String statusText = clientExchange.getResponse().getStatus();
                    HeaderMap headerMap = clientExchange.getResponse().getResponseHeaders();
                    Map<String, String> headers = new HashMap<>();
                    for (HttpString headerName : headerMap.getHeaderNames()) {
                        headers.put(headerName.toString(), headerMap.get(headerName).toString());
                    }
                    final Exception cause = new HttpOperationFailedException(uri, code, statusText, null, headers, result.getBody(String.class));

                    hasFailedWith(cause);

                    if (result != null) {
                        if (ExchangeHelper.isOutCapable(exchange)) {
                            exchange.setOut(result);
                        } else {
                            exchange.setIn(result);
                        }
                    }

                    // true failure exception may get overwritten with connection close failure, so re-set cause
                    exchange.setException(cause);
                } else {
                    // we end Camel exchange here
                    finish(result);
                }
