import static org.apache.camel.support.ObjectHelper.invokeMethod;
                    bindToRegistry(field, bind.name(), bean, beanName);

        BindToRegistry bind = method.getAnnotation(BindToRegistry.class);
        if (bind != null && getPostProcessorHelper().matchContext(bind.context())) {
            bindToRegistry(method, bind.name(), bean, beanName);
        }
                invokeMethod(method, bean, value);
                invokeMethod(method, bean, value);
        if (parameterTypes.length != 1) {
            LOG.warn("Ignoring badly annotated method for injection due to incorrect number of parameters: {}", method);
        } else {
            Object value = getPostProcessorHelper().getInjectionBeanValue(parameterTypes[0], name);
            invokeMethod(method, bean, value);
        }
    }

    private void bindToRegistry(Field field, String name, Object bean, String beanName) {
        if (isEmpty(name)) {
            name = field.getName();
        }
        Object value = ReflectionHelper.getField(field, bean);
        if (value != null) {
            camelContext.getRegistry().bind(name, value);
        }
    }

    private void bindToRegistry(Method method, String name, Object bean, String beanName) {
        if (isEmpty(name)) {
            name = method.getName();
        }
        Class<?> returnType = method.getReturnType();
        if (returnType == null || returnType == Void.TYPE) {
            throw new IllegalArgumentException("@BindToRegistry on class: "  method.getDeclaringClass()
                 " method: "  method.getName()  " with void return type is not allowed");
        }
        // TODO: Add support for some bean parameter bindings, like CamelContext,Registry and auto-lookup of by type in registry
        if (method.getParameterCount() != 0) {
            throw new IllegalArgumentException("@BindToRegistry on class: "  method.getDeclaringClass()
                 " method: "  method.getName()  " with method parameters is not allowed");
        }
        Object value = invokeMethod(method, bean);
        if (value != null) {
            camelContext.getRegistry().bind(name, value);
