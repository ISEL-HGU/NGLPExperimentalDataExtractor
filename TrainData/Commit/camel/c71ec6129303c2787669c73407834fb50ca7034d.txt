/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.camel.CamelContext;
import org.apache.camel.CamelContextAware;
import org.apache.camel.api.management.ManagedOperation;
import org.apache.camel.api.management.ManagedResource;
import org.apache.camel.spi.ExecutorServiceManager;
import org.apache.camel.spi.IdempotentRepository;
import org.apache.camel.support.ServiceSupport;
import org.apache.camel.util.LRUCache;
import org.apache.camel.util.ObjectHelper;
import org.apache.camel.util.StringHelper;

import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


    private static final int DEFAULT_MAXIMUM_CACHE_SIZE = 1000;

    private final Logger log = LoggerFactory.getLogger(this.getClass());
    private final Map<String, Object> cache;
        this(topic, bootstrapServers, DEFAULT_MAXIMUM_CACHE_SIZE);
    }

    public KafkaIdempotentRepository(String topic, String bootstrapServers, int maxCacheSize) {
        this.cache = Collections.synchronizedMap(new LRUCache<>(maxCacheSize));
        this(topic, consumerConfig, producerConfig, DEFAULT_MAXIMUM_CACHE_SIZE);
    }

    public KafkaIdempotentRepository(String topic, Properties consumerConfig, Properties producerConfig, int maxCacheSize) {
        this.cache = Collections.synchronizedMap(new LRUCache<>(maxCacheSize));
        log.info("Context: {}", camelContext);
        log.debug("Creating consumer with {}[{}]", ConsumerConfig.GROUP_ID_CONFIG, groupId);
        log.info("Warming up cache");
                log.info("Cache OK");
                log.warn("Timeout waiting for cache warm-up from topic {}. Proceeding anyway. "
                         "Duplicate records may not be detected.", topic);
                log.info("Expired waiting on topicPoller to shut down");
            log.info("Interrupted waiting on latch: {}", e.getMessage());
            log.debug("Broadcasting action:{} for key:{}", action, key);
        } catch (ExecutionException | InterruptedException e) {
        log.debug("Checking cache for key:{}", key);
        private static final int POLL_DURATION_MS = 10;
        private final Logger log = LoggerFactory.getLogger(this.getClass());
            log.debug("Subscribing consumer to {}", topic);
            log.debug("Seeking to beginning");
                log.trace("Polling");
                    log.trace("0 messages fetched on poll");
                        log.debug("Cache warmed up");
                        log.error("Unexpected action value:\"{}\" received on [topic:{}, partition:{}, offset:{}]. Shutting down.",
                        log.debug("Adding to cache messageId:{}", messageId);
                        log.debug("Removing from cache messageId:{}", messageId);
                        log.error("No idea how to {} a record. Shutting down.", action);
            log.debug("TopicPoller finished - triggering shutdown latch");
        CountDownLatch getShutdownLatch() {
        void setRunning(boolean running) {
        boolean getRunning() {
