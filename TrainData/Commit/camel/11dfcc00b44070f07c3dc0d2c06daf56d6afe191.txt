import java.util.stream.Collectors;
                    updated |= updateTitles(file, model.getTitle()  " Component");
                    updated |= updateTitles(file, model.getTitle()  " DataFormat");
                    updated |= updateTitles(file, model.getTitle()  " Language");
    private boolean updateTitles(File file, String title) throws MojoExecutionException {
        boolean updated = false;
            List<String> newLines = new ArrayList<>();
            String[] lines = text.split("\n");
            for (int i = 0; i < lines.length; i) {
                String line = lines[i];
                if (i == 0) {
                    // first line is the title to make the text less noisy we use level 2
                    String newLine = "## "  title;
                    newLines.add(newLine);
                    updated = !line.equals(newLine);
                    continue;
                // use single line headers with # as level instead of the cumbersome adoc weird style
                if (line.startsWith("^^^") || line.startsWith("~~~") || line.startsWith("") ) {
                    String level = line.startsWith("") ? "####" : "###";

                    // transform legacy heading into new style
                    int idx = newLines.size() - 1;
                    String prev = newLines.get(idx);

                    newLines.set(idx, level  " "  prev);

                    // okay if 2nd-prev line is a [[title]] we need to remove that too
                    // so we have nice clean sub titles
                    idx = newLines.size() - 2;
                    if (idx >= 0) {
                        prev = newLines.get(idx);
                        if (prev.startsWith("[[")) {
                            // remove
                            newLines.remove(idx);
                        }
                    }

                    updated = true;
                } else {
                    // okay normal text so just add it
                    newLines.add(line);
                }
            }


            if (updated) {
                // build the new updated text
                String newText = newLines.stream().collect(Collectors.joining("\n"));
        return updated;
