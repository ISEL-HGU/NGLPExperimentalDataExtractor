import reactor.core.publisher.EmitterProcessor;
    private final EmitterProcessor<Exchange> publisher;
        // TODO: A emitter processor with buffer-size 0 would be perfect
        // The effect of having a prefetch of 1 element is that the chain buffers at least 2 elements instead of only one
        // (one in the FluxSink and one in the EmitterProcessor) when using the "latest" or "oldest" strategy.
        // This affects slightly the behavior of the backpressure strategy "latest" (but it doesn't change the semantics).
        this.publisher = EmitterProcessor.create(1);
        return publisher;
                // signal item emitted for non-dropped items only
                flux = flux.onBackpressureDrop(this::onBackPressure).handle(this::onItemEmitted);
                // Since there is no callback for dropped elements on backpressure "latest", item emission is signaled before dropping
                // No exception is reported back to the exchanges
                flux = flux.handle(this::onItemEmitted).onBackpressureLatest();
                flux = flux.onBackpressureBuffer(QueueSupplier.SMALL_BUFFER_SIZE, this::onBackPressure).handle(this::onItemEmitted);
            flux.subscribe(this.publisher);
