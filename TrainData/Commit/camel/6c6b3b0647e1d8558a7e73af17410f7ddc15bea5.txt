import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholderExt;
import org.apache.aries.blueprint.ext.PropertyPlaceholderExt;
    private final Set<PropertyPlaceholderWrapper> placeholders = new LinkedHashSet<PropertyPlaceholderWrapper>();
    private Method oldMethod;
                if (clazz != null && (AbstractPropertyPlaceholder.class.isAssignableFrom(clazz)
                        || AbstractPropertyPlaceholderExt.class.isAssignableFrom(clazz))) {
        // new API
        if (component instanceof AbstractPropertyPlaceholderExt) {
            AbstractPropertyPlaceholderExt placeholder = (AbstractPropertyPlaceholderExt) component;
            placeholders.add(new AbstractPropertyPlaceholderExtWrapper(placeholder));
                    method = AbstractPropertyPlaceholderExt.class.getDeclaredMethod("retrieveValue", String.class);

        // old, deprecated API
        if (component instanceof AbstractPropertyPlaceholder) {
            AbstractPropertyPlaceholder placeholder = (AbstractPropertyPlaceholder) component;
            placeholders.add(new AbstractPropertyPlaceholderWrapper(placeholder));

            log.debug("Adding Blueprint PropertyPlaceholder: {}", id);

            if (oldMethod == null) {
                try {
                    oldMethod = AbstractPropertyPlaceholder.class.getDeclaredMethod("retrieveValue", String.class);
                    oldMethod.setAccessible(true);
                } catch (NoSuchMethodException e) {
                    throw new IllegalStateException("Cannot add blueprint property placeholder: "  id
                             " as the method retrieveValue is not accessible", e);
                }
            }
        }
            for (PropertyPlaceholderWrapper placeholder : placeholders) {
                    if (placeholder instanceof PropertyPlaceholderExt) {
                        Map map = ((PropertyPlaceholderExt) placeholder).getDefaultProperties();
                        isDefault = map != null && map.containsKey(key);
                    } else if (placeholder instanceof PropertyPlaceholder) {
                    String candidate = placeholder.retrieveValue(key);
    private interface PropertyPlaceholderWrapper {

        /**
         * Retrieves the String value (or {@code null}) from underlying placeholder
         * @param key
         * @return
         */
        String retrieveValue(String key);
    }

    private class AbstractPropertyPlaceholderExtWrapper implements PropertyPlaceholderWrapper {

        private AbstractPropertyPlaceholderExt delegate;

        public AbstractPropertyPlaceholderExtWrapper(AbstractPropertyPlaceholderExt delegate) {
            this.delegate = delegate;
        }

        @Override
        public String retrieveValue(String key) {
            Object v = ObjectHelper.invokeMethod(method, delegate, key);
            return v == null ? null : v.toString();
        }
    }

    private class AbstractPropertyPlaceholderWrapper implements PropertyPlaceholderWrapper {

        private AbstractPropertyPlaceholder delegate;

        public AbstractPropertyPlaceholderWrapper(AbstractPropertyPlaceholder delegate) {
            this.delegate = delegate;
        }

        @Override
        public String retrieveValue(String key) {
            Object v = ObjectHelper.invokeMethod(oldMethod, delegate, key);
            return v == null ? null : v.toString();
        }
    }

