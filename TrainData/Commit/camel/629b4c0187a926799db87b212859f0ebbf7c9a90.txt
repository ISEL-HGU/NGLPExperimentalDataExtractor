                    if (traced != null) {
                        if (node instanceof OnCompletionDefinition || node instanceof OnExceptionDefinition) {
                            // skip any of these as its just a marker definition
                            trace = false;
                        } else if (ProcessorDefinitionHelper.isFirstChildOfType(OnCompletionDefinition.class, node)) {
                            // special for on completion tracing
                            traceOnCompletion(traced, exchange);
                        } else if (ProcessorDefinitionHelper.isFirstChildOfType(OnExceptionDefinition.class, node)) {
                            // special for on exception
                            traceOnException(traced, exchange);
                        } else if (ProcessorDefinitionHelper.isFirstChildOfType(CatchDefinition.class, node)) {
                            // special for do catch
                            traceDoCatch(traced, exchange);
                        } else if (ProcessorDefinitionHelper.isFirstChildOfType(FinallyDefinition.class, node)) {
                            // special for do finally
                            traceDoFinally(traced, exchange);
                        } else if (ProcessorDefinitionHelper.isFirstChildOfType(AggregateDefinition.class, node)) {
                            // special for aggregate
                            traceAggregate(traced, exchange);
                        } else {
                            // regular so just add it
                            traced.addTraced(new DefaultRouteNode(node, super.getProcessor()));
                        }
                if (traced != null) {
                    traceIntercept((InterceptDefinition) node.getParent(), traced, exchange);
                }
