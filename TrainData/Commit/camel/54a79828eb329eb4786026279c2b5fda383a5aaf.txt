import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import org.apache.camel.component.aws.ddb.DdbComponent;
import org.apache.camel.component.aws.ddb.DdbOperations;
     * The AWS DDB default configuration
     */
    private DdbConfigurationNestedConfiguration configuration;
    /**
     * Amazon AWS Access Key
     */
    private String accessKey;
    /**
     * Amazon AWS Secret Key
     */
    private String secretKey;
    /**
     * The region in which DDB client needs to work
     */
    private String region;
    /**
    public DdbConfigurationNestedConfiguration getConfiguration() {
        return configuration;
    }

    public void setConfiguration(
            DdbConfigurationNestedConfiguration configuration) {
        this.configuration = configuration;
    }

    public String getAccessKey() {
        return accessKey;
    }

    public void setAccessKey(String accessKey) {
        this.accessKey = accessKey;
    }

    public String getSecretKey() {
        return secretKey;
    }

    public void setSecretKey(String secretKey) {
        this.secretKey = secretKey;
    }

    public String getRegion() {
        return region;
    }

    public void setRegion(String region) {
        this.region = region;
    }


    public static class DdbConfigurationNestedConfiguration {
        public static final Class CAMEL_NESTED_CLASS = org.apache.camel.component.aws.ddb.DdbConfiguration.class;
        /**
         * The endpoint with which the AWS-DDB client wants to work with.
         */
        private String amazonDdbEndpoint;
        /**
         * Amazon AWS Access Key
         */
        private String accessKey;
        /**
         * Amazon AWS Secret Key
         */
        private String secretKey;
        /**
         * To use the AmazonDynamoDB as the client
         */
        private AmazonDynamoDB amazonDDBClient;
        /**
         * The name of the table currently worked with.
         */
        private String tableName;
        /**
         * What operation to perform
         */
        private DdbOperations operation = DdbOperations.PutItem;
        /**
         * Determines whether or not strong consistency should be enforced when
         * data is read.
         */
        private Boolean consistentRead = false;
        /**
         * The provisioned throughput to reserve for reading resources from your
         * table
         */
        private Long readCapacity;
        /**
         * The provisioned throughput to reserved for writing resources to your
         * table
         */
        private Long writeCapacity;
        /**
         * Attribute name when creating table
         */
        private String keyAttributeName;
        /**
         * Attribute type when creating table
         */
        private String keyAttributeType;
        private String proxyHost;
        private Integer proxyPort;
        private String region;

        public String getAmazonDdbEndpoint() {
            return amazonDdbEndpoint;
        }

        public void setAmazonDdbEndpoint(String amazonDdbEndpoint) {
            this.amazonDdbEndpoint = amazonDdbEndpoint;
        }

        public String getAccessKey() {
            return accessKey;
        }

        public void setAccessKey(String accessKey) {
            this.accessKey = accessKey;
        }

        public String getSecretKey() {
            return secretKey;
        }

        public void setSecretKey(String secretKey) {
            this.secretKey = secretKey;
        }

        public AmazonDynamoDB getAmazonDDBClient() {
            return amazonDDBClient;
        }

        public void setAmazonDDBClient(AmazonDynamoDB amazonDDBClient) {
            this.amazonDDBClient = amazonDDBClient;
        }

        public String getTableName() {
            return tableName;
        }

        public void setTableName(String tableName) {
            this.tableName = tableName;
        }

        public DdbOperations getOperation() {
            return operation;
        }

        public void setOperation(DdbOperations operation) {
            this.operation = operation;
        }

        public Boolean getConsistentRead() {
            return consistentRead;
        }

        public void setConsistentRead(Boolean consistentRead) {
            this.consistentRead = consistentRead;
        }

        public Long getReadCapacity() {
            return readCapacity;
        }

        public void setReadCapacity(Long readCapacity) {
            this.readCapacity = readCapacity;
        }

        public Long getWriteCapacity() {
            return writeCapacity;
        }

        public void setWriteCapacity(Long writeCapacity) {
            this.writeCapacity = writeCapacity;
        }

        public String getKeyAttributeName() {
            return keyAttributeName;
        }

        public void setKeyAttributeName(String keyAttributeName) {
            this.keyAttributeName = keyAttributeName;
        }

        public String getKeyAttributeType() {
            return keyAttributeType;
        }

        public void setKeyAttributeType(String keyAttributeType) {
            this.keyAttributeType = keyAttributeType;
        }

        public String getProxyHost() {
            return proxyHost;
        }

        public void setProxyHost(String proxyHost) {
            this.proxyHost = proxyHost;
        }

        public Integer getProxyPort() {
            return proxyPort;
        }

        public void setProxyPort(Integer proxyPort) {
            this.proxyPort = proxyPort;
        }

        public String getRegion() {
            return region;
        }

        public void setRegion(String region) {
            this.region = region;
        }
    }
