import org.apache.camel.api.management.ManagedAttribute;
import org.apache.camel.api.management.ManagedResource;
import org.apache.http.pool.ConnPoolControl;
import org.apache.http.pool.PoolStats;
@ManagedResource(description = "Managed HttpEndpoint")
    @ManagedAttribute(description = "Maximum number of allowed persistent connections")
    public int getClientConnectionsPoolStatsMax() {
        ConnPoolControl pool = null;
        if (clientConnectionManager instanceof ConnPoolControl) {
            pool = (ConnPoolControl) clientConnectionManager;
        }
        if (pool != null) {
            PoolStats stats = pool.getTotalStats();
            if (stats != null) {
                return stats.getMax();
            }
        }
        return -1;
    }

    @ManagedAttribute(description = "Number of available idle persistent connections")
    public int getClientConnectionsPoolStatsAvailable() {
        ConnPoolControl pool = null;
        if (clientConnectionManager instanceof ConnPoolControl) {
            pool = (ConnPoolControl) clientConnectionManager;
        }
        if (pool != null) {
            PoolStats stats = pool.getTotalStats();
            if (stats != null) {
                return stats.getAvailable();
            }
        }
        return -1;
    }

    @ManagedAttribute(description = "Number of persistent connections tracked by the connection manager currently being used to execute requests")
    public int getClientConnectionsPoolStatsLeased() {
        ConnPoolControl pool = null;
        if (clientConnectionManager instanceof ConnPoolControl) {
            pool = (ConnPoolControl) clientConnectionManager;
        }
        if (pool != null) {
            PoolStats stats = pool.getTotalStats();
            if (stats != null) {
                return stats.getLeased();
            }
        }
        return -1;
    }

    @ManagedAttribute(description = "Number of connection requests being blocked awaiting a free connection."
         " This can happen only if there are more worker threads contending for fewer connections.")
    public int getClientConnectionsPoolStatsPending() {
        ConnPoolControl pool = null;
        if (clientConnectionManager instanceof ConnPoolControl) {
            pool = (ConnPoolControl) clientConnectionManager;
        }
        if (pool != null) {
            PoolStats stats = pool.getTotalStats();
            if (stats != null) {
                return stats.getPending();
            }
        }
        return -1;
    }

