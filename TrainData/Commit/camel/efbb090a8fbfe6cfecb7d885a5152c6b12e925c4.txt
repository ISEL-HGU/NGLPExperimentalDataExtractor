
    private static final Float FLOAT_NAN = Float.NaN;
    private static final Double DOUBLE_NAN = Double.NaN;


            return (Boolean) value;
            return Boolean.valueOf((String) value);
            return (Integer) value > 0 ? Boolean.TRUE : Boolean.FALSE;
            return !((Collection<?>) value).isEmpty();
            return !((Map<?, ?>) value).isEmpty();
                return (Boolean) value;

            // and these is common as well
        try {
            URL res = loadResourceAsURL(name);
            return res != null ? res.openStream() : null;
        } catch (IOException e) {
            return null;
        }



            url = loader.getResource(resolvedName);
            if (url != null) {
                return url;
            }



            url = tccl.getResource(resolvedName);
            if (url != null) {
                return url;
            }

            // #3 The TCCL may be able to see camel-core, but not META-INF resources

            try {

                Class<?> clazz = tccl.loadClass("org.apache.camel.impl.DefaultCamelContext");
                url = clazz.getClassLoader().getResource(resolvedName);
                if (url != null) {
                    return url;
                }

            } catch (ClassNotFoundException e) {
                // ignore
            }

        // #4 Last, for the unlikely case that stuff can be loaded from camel-util

        if (url != null) {
            return url;
        }

        url = ObjectHelper.class.getResource(resolvedName);


            try {
                res = loader.getResources(uri);
                if (res != null) {
                    return res;
                }
            } catch (IOException e) {
                // ignore
            }



            try {
                res = tccl.getResources(uri);
                if (res != null) {
                    return res;
                }
            } catch (IOException e1) {
                // ignore
            }

            // #3 The TCCL may be able to see camel-core, but not META-INF resources

            try {

                Class<?> clazz = tccl.loadClass("org.apache.camel.impl.DefaultCamelContext");
                res = clazz.getClassLoader().getResources(uri);
                if (res != null) {
                    return res;
                }

            } catch (ClassNotFoundException | IOException e) {
                // ignore
            }

        // #4 Last, for the unlikely case that stuff can be loaded from camel-util

            res = ObjectHelper.class.getClassLoader().getResources(uri);
        } catch (IOException e) {
            // ignore
        }

     *
     *
            return (T) cast(Boolean.class, value);
                return (T) cast(newType, value);
            throw new IllegalArgumentException("Failed to convert: "
            return (Boolean) value;
            if ("true".equalsIgnoreCase((String) value)) {
            } else if ("false".equalsIgnoreCase((String) value)) {
            if (value instanceof Node && ((Node) value).hasAttributes()) {

     *
            && (FLOAT_NAN.equals(value) || DOUBLE_NAN.equals(value));
