import java.lang.reflect.Modifier;
import org.apache.camel.util.ObjectHelper;
     * When autowiring has detected multiple implementations (2 or more) of a given interface, which
     * cannot be mapped, should they be logged so you can see and add manual mapping if needed.
     */
    @Parameter(property = "camel.logUnmapped", defaultValue = "false")
    protected boolean logUnmapped;

    /**
                            // filter classes (must not be interfaces, must not be abstract, must be top level) and also a valid autowire class
                            classes = classes.stream().filter(
                                    c -> !c.isInterface() && !Modifier.isAbstract(c.getModifiers()) && c.getEnclosingClass() == null && isValidAutowireClass(c))
                                    .collect(Collectors.toSet());
                            Class best = chooseBestKnownType(componentName, name, clazz, classes, mappingProperties);
                            if (best != null) {
    protected Class chooseBestKnownType(String componentName, String optionName, Class type, Set<Class<?>> candidates, Properties knownTypes) {
            if (logUnmapped) {
                getLog().debug("Cannot chose best type: "  type.getName()  " among "  candidates.size()  " implementations: "  candidates);
                getLog().info("Cannot autowire option camel.component."  componentName  "."  optionName
                         " as the interface: "  type.getName()  " has "  candidates.size()  " implementations in the classpath:");
                for (Class c : candidates) {
                    getLog().info("    Class: "  c.getName());
                }
            }
        if (ObjectHelper.isNotEmpty(exclude)) {
                pattern = pattern.trim();
        if (ObjectHelper.isNotEmpty(include)) {
                pattern = pattern.trim();
