import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.camel.Component;
import org.apache.camel.spi.DataFormat;
import org.apache.camel.spi.Language;
import org.apache.camel.support.EndpointHelper;
import org.apache.camel.support.IntrospectionSupport;
import org.apache.camel.util.ObjectHelper;
    protected boolean autoConfigurationEnabled = true;
    public boolean isAutoConfigurationEnabled() {
        return autoConfigurationEnabled;
    }

    /**
     * Whether auto configuration of components/dataformats/languages is enabled or not.
     * When enabled the configuration parameters are loaded from the properties component
     * and configured as defaults (similar to spring-boot auto-configuration). You can prefix
     * the parameters in the properties file with:
     * - camel.component.name.option1=value1
     * - camel.component.name.option2=value2
     * - camel.dataformat.name.option1=value1
     * - camel.dataformat.name.option2=value2
     * - camel.language.name.option1=value1
     * - camel.language.name.option2=value2
     * Where name is the name of the component, dataformat or language such as seda,direct,jaxb.
     * <p/>
     * This option is default enabled.
     */
    public void setAutoConfigurationEnabled(boolean autoConfigurationEnabled) {
        this.autoConfigurationEnabled = autoConfigurationEnabled;
    }

        // conventional configuration via properties to allow configuring options on
        // component, dataformat, and languages (like spring-boot auto-configuration)
        if (autoConfigurationEnabled) {
            autoConfigurationFromProperties(camelContext);
        }

    protected void autoConfigurationFromProperties(CamelContext camelContext) throws Exception {
        // load properties
        Properties prop = camelContext.getPropertiesComponent().loadProperties();

        Map<Object, Map<String, Object>> properties = new LinkedHashMap<>();

        for (String key : prop.stringPropertyNames()) {
            int dot = key.indexOf(".", 16);
            if (key.startsWith("camel.component.") && dot > 0) {
                // grab component name
                String name = key.substring(16, dot);
                Component component = camelContext.getComponent(name);
                // grab the value
                String value = prop.getProperty(key);
                String option = key.substring(dot  1);
                Map<String, Object> values = properties.getOrDefault(component, new LinkedHashMap<>());
                values.put(option, value);
                properties.put(component, values);
            }
            dot = key.indexOf(".", 17);
            if (key.startsWith("camel.dataformat.") && dot > 0) {
                // grab component name
                String name = key.substring(17, dot);
                DataFormat dataformat = camelContext.resolveDataFormat(name);
                // grab the value
                String value = prop.getProperty(key);
                String option = key.substring(dot  1);
                Map<String, Object> values = properties.getOrDefault(dataformat, new LinkedHashMap<>());
                values.put(option, value);
                properties.put(dataformat, values);
            }
            dot = key.indexOf(".", 15);
            if (key.startsWith("camel.language.") && dot > 0) {
                // grab component name
                String name = key.substring(15, dot);
                Language language = camelContext.resolveLanguage(name);
                // grab the value
                String value = prop.getProperty(key);
                String option = key.substring(dot  1);
                Map<String, Object> values = properties.getOrDefault(language, new LinkedHashMap<>());
                values.put(option, value);
                properties.put(language, values);
            }
        }

        if (!properties.isEmpty()) {
            long total = properties.values().stream().mapToLong(Map::size).sum();
            LOG.info("Auto configuring {} components/dataformat/languages from loaded properties: {}", properties.size(), total);
        }

        for (Object obj : properties.keySet()) {
            Map<String, Object> values = properties.get(obj);
            setCamelProperties(camelContext, obj, values, true);
        }
    }

    private static boolean setCamelProperties(CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet) throws Exception {
        ObjectHelper.notNull(context, "context");
        ObjectHelper.notNull(target, "target");
        ObjectHelper.notNull(properties, "properties");
        boolean rc = false;
        Iterator it = properties.entrySet().iterator();

        while(it.hasNext()) {
            Map.Entry<String, Object> entry = (Map.Entry)it.next();
            String name = entry.getKey();
            Object value = entry.getValue();
            String stringValue = value != null ? value.toString() : null;
            boolean hit = false;
            if (EndpointHelper.isReferenceParameter(stringValue)) {
                hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, (Object)null, stringValue, true);
            } else if (value != null) {
                try {
                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, value);
                } catch (IllegalArgumentException var12) {
                    hit = IntrospectionSupport.setProperty(context, context.getTypeConverter(), target, name, (Object)null, stringValue, true);
                }
            }

            if (hit) {
                it.remove();
                rc = true;
            } else if (failIfNotSet) {
                throw new IllegalArgumentException("Cannot configure option ["  name  "] with value ["  stringValue  "] as the bean class ["  ObjectHelper.classCanonicalName(target)  "] has no suitable setter method, or not possible to lookup a bean with the id ["  stringValue  "] in Camel registry");
            }
        }

        return rc;
    }

