import java.util.regex.Matcher;

    private static final List<String> JAVA_LANG_TYPES = Arrays.asList("Boolean", "Byte", "Character", "Class", "Double", "Float", "Integer", "Long", "Object", "Short", "String");

                String defaultValueLiteral = null;
                    defaultValueLiteral = sourceProp.getAnnotation(UriParam.class).getLiteralValue("defaultValue");
                    defaultValueLiteral = sourceProp.getAnnotation(UriPath.class).getLiteralValue("defaultValue");

                defaultValueLiteral = makeFQ(nestedType, defaultValueLiteral);

                    if ("integer".equals(optionType) || "boolean".equals(optionType) || "java.lang.String".equals(optionType)) {
                        prop.getField().setLiteralInitializer(defaultValueLiteral);
    private String makeFQ(JavaClassSource source, String literal) {
        if (literal == null) {
            return null;
        }

        if (Pattern.matches("[A-Z][A-Z0-9_]*", literal)) {
            return source.getQualifiedName()  "."  literal;
        }

        Map<String, String> fq = new HashMap<>();
        List<String> classes = extractClasses(literal);
        for (String cl : classes) {

            boolean found = false;
            for (Import im : source.getImports()) {
                if (cl.equals(im.getSimpleName())) {
                    fq.put(cl, im.getQualifiedName());
                    found = true;
                    break;
                }
            }

            if (!found) {
                // if it's not a java.lang object, then it's in the same package
                if (!JAVA_LANG_TYPES.contains(cl)) {
                    fq.put(cl, source.getPackage()  "."  cl);
                }
            }
        }

        if (fq.size() > 0) {
            String res = literal;
            for (Map.Entry<String, String> fqn : fq.entrySet()) {
                res = res.replace(fqn.getKey(), fqn.getValue());
            }
            return res;
        }
        return literal;
    }

    private List<String> extractClasses(String literal) {
        if (literal.startsWith("\"") && literal.endsWith("\"")) {
            return Collections.emptyList();
        }
        List<String> classes = new LinkedList<>();
        Pattern regex = Pattern.compile("[^A-Za-z0-9_.]*([A-Z][A-Za-z0-9]*)[.][A-Za-z0-9_.-]");
        Matcher m = regex.matcher(literal);
        while (m.find()) {
            classes.add(m.group(1));
        }
        return classes;
    }

