import java.util.ArrayList;
import java.util.stream.Stream;
import io.swagger.models.auth.ApiKeyAuthDefinition;
import io.swagger.models.auth.In;
import io.swagger.models.auth.SecuritySchemeDefinition;
import io.swagger.models.parameters.QueryParameter;
    @UriPath(description = "Path to the Swagger specification file. The scheme, host base path are taken from this"
         " specification, but these can be overridden with properties on the component or endpoint level. If not"
         " given the component tries to load `swagger.json` resource from the classpath. Note that the `host` defined on the"
         " component and endpoint of this Component should contain the scheme, hostname and optionally the"
         " port in the URI syntax (i.e. `http://api.example.com:8080`). Overrides component configuration."
         " The Swagger specification can be loaded from different sources by prefixing with file: classpath: http: https:."
         " Support for https is limited to using the JDK installed UrlHandler, and as such it can be cumbersome to setup"
         " TLS/SSL certificates for https (such as setting a number of javax.net.ssl JVM system properties)."
         " How to do that consult the JDK documentation for UrlHandler.",
        final String queryParameters = determineQueryParameters(swagger, operation).map(this::queryParameter)
            .collect(Collectors.joining("&"));
        // pass properties that might be applied if the delegate component is
        // created, i.e. if it's not
    static Stream<Parameter> determineQueryParameters(final Swagger swagger, final Operation operation) {
        final List<Map<String, List<String>>> securityRequirements = operation.getSecurity();
        final List<QueryParameter> apiKeyQueryParameters = new ArrayList<>();
        if (securityRequirements != null) {
            final Map<String, SecuritySchemeDefinition> securityDefinitions = swagger.getSecurityDefinitions();

            for (final Map<String, List<String>> securityRequirement : securityRequirements) {
                for (final String securityRequirementName : securityRequirement.keySet()) {
                    final SecuritySchemeDefinition securitySchemeDefinition = securityDefinitions
                        .get(securityRequirementName);
                    if (securitySchemeDefinition instanceof ApiKeyAuthDefinition) {
                        final ApiKeyAuthDefinition apiKeyDefinition = (ApiKeyAuthDefinition) securitySchemeDefinition;

                        if (apiKeyDefinition.getIn() == In.QUERY) {
                            apiKeyQueryParameters.add(new QueryParameter().name(apiKeyDefinition.getName())
                                .required(true).type("string").description(apiKeyDefinition.getDescription()));
                        }
                    }
                }
            }
        }

        return Stream.concat(apiKeyQueryParameters.stream(),
            operation.getParameters().stream().filter(p -> "query".equals(p.getIn())));
    }

