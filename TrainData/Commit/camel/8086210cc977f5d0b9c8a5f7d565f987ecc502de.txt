import java.util.Properties;
import org.apache.camel.maven.packaging.model.OtherModel;
 * Generate or updates the component/dataformat/language/other readme.md and .adoc files in the project root directory.
        executeOther();
    private void executeOther() throws MojoExecutionException, MojoFailureException {
        // find the other names
        List<String> otherNames = findOtherNames();

        final Set<File> jsonFiles = new TreeSet<File>();
        PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelOthersModelFilter());

        // only if there is other we should update the documentation files
        if (!otherNames.isEmpty()) {
            getLog().debug("Found "  otherNames.size()  " others");
            for (String otherName : otherNames) {
                String json = loadOtherJson(jsonFiles, otherName);
                if (json != null) {
                    File file = new File(docDir, otherName  ".adoc");

                    OtherModel model = generateOtherModel(otherName, json);

                    boolean exists = file.exists();
                    boolean updated;

                    updated = updateTitles(file, model.getTitle());
                    updated |= updateAvailableFrom(file, model.getFirstVersion());

                    if (updated) {
                        getLog().info("Updated doc file: "  file);
                    } else if (exists) {
                        getLog().debug("No changes to doc file: "  file);
                    } else {
                        getLog().warn("No other doc file: "  file);
                        if (isFailFast()) {
                            throw new MojoExecutionException("Failed build due failFast=true");
                        }
                    }
                }
            }
        }
    }

    private String loadOtherJson(Set<File> jsonFiles, String otherName) {
        try {
            for (File file : jsonFiles) {
                if (file.getName().equals(otherName  ".json")) {
                    String json = loadText(new FileInputStream(file));
                    boolean isOther = json.contains("\"kind\": \"other\"");
                    if (isOther) {
                        return json;
                    }
                }
            }
        } catch (IOException e) {
            // ignore
        }
        return null;
    }

    private OtherModel generateOtherModel(String otherName, String json) {
        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("other", json, false);

        OtherModel other = new OtherModel();
        other.setTitle(JSonSchemaHelper.getSafeValue("title", rows));
        other.setName(JSonSchemaHelper.getSafeValue("name", rows));
        other.setDescription(JSonSchemaHelper.getSafeValue("description", rows));
        other.setFirstVersion(JSonSchemaHelper.getSafeValue("firstVersion", rows));
        other.setLabel(JSonSchemaHelper.getSafeValue("label", rows));
        other.setDeprecated(JSonSchemaHelper.getSafeValue("deprecated", rows));
        other.setGroupId(JSonSchemaHelper.getSafeValue("groupId", rows));
        other.setArtifactId(JSonSchemaHelper.getSafeValue("artifactId", rows));
        other.setVersion(JSonSchemaHelper.getSafeValue("version", rows));

        return other;
    }

    private List<String> findOtherNames() {
        List<String> otherNames = new ArrayList<String>();
        for (Resource r : project.getBuild().getResources()) {
            File f = new File(r.getDirectory());
            if (!f.exists()) {
                f = new File(project.getBasedir(), r.getDirectory());
            }
            f = new File(f, "META-INF/services/org/apache/camel/other.properties");

            if (f.exists() && f.isFile()) {
                try {
                    Properties prop = new Properties();
                    prop.load(new FileInputStream(f));

                    String name = prop.getProperty("name");
                    otherNames.add(name);
                } catch (Exception e) {
                    // ignore
                }
            }
        }
        return otherNames;
    }

