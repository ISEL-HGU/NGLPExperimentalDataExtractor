import java.util.concurrent.RejectedExecutionException;
import org.apache.camel.CamelContextAware;
import org.apache.camel.support.ServiceSupport;
public class XsltAggregationStrategy extends ServiceSupport implements AggregationStrategy, CamelContextAware {
    private CamelContext camelContext;
    public CamelContext getCamelContext() {
        return camelContext;
    }

    @Override
    public void setCamelContext(CamelContext camelContext) {
        this.camelContext = camelContext;
    }

    @Override
        if (!isRunAllowed()) {
            throw new RejectedExecutionException();
        }
        try {
    @Deprecated
        this.camelContext = context;
    @Override
    protected void doStart() throws Exception {
        ObjectHelper.notNull(camelContext, "CamelContext", this);

        // set the default property name if not set
        this.propertyName = ObjectHelper.isNotEmpty(propertyName) ? propertyName : DEFAULT_PROPERTY_NAME;

        // initialize the XsltBuilder
        this.xslt = camelContext.getInjector().newInstance(XsltBuilder.class);

        if (transformerFactoryClass != null) {
            Class<?> factoryClass = camelContext.getClassResolver().resolveMandatoryClass(transformerFactoryClass,
                XsltAggregationStrategy.class.getClassLoader());
            TransformerFactory factory = (TransformerFactory) camelContext.getInjector().newInstance(factoryClass);
            xslt.getConverter().setTransformerFactory(factory);
        }

        if (uriResolver == null) {
            uriResolver = new XsltUriResolver(camelContext, xslFile);
        }

        xslt.setUriResolver(uriResolver);
        xslt.setFailOnNullBody(true);
        xslt.transformerCacheSize(0);
        xslt.setAllowStAX(true);

        configureOutput(xslt, output.name());
        loadResource(xslFile);
    }

    @Override
    protected void doStop() throws Exception {
        // noop
    }
