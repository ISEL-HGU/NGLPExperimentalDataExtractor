import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
                BlockingQueue<Integer> ping = new ArrayBlockingQueue<Integer>(1);
                                switch (res) {
                                    case -1:
                                        ping.put(res);
                                        return;
                                    case 0:
                                        // await next chunk
                                        source.getReadSetter().set(this);
                                        source.resumeReads();
                                        return;
                                    default:
                                        buffer.flip();
                                        out.write(buffer.array(), buffer.arrayOffset()  buffer.position(), buffer.arrayOffset()  buffer.limit());
                                        buffer.clear();
                            } catch (IOException | InterruptedException e) {
                try {
                    // wait for the listener to complete
                    ping.take();
                } catch (InterruptedException e) {
                    LOG.error("Exception reading from channel {}", e);
                }
                return out.toByteArray();
