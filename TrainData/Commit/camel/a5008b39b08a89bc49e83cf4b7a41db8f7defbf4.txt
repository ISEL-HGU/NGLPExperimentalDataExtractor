    @Override
    protected void doStart() throws Exception {
        super.doStart();
        endpoint.addProducer(this);
    }

    @Override
    protected void doStop() throws Exception {
        endpoint.removeProducer(this);
        super.doStop();
    }

        DirectConsumer consumer = endpoint.getConsumer();
        if (consumer == null) {
            consumer.getProcessor().process(exchange);
        try {
            DirectConsumer consumer = endpoint.getConsumer();
            if (consumer == null) {
                if (endpoint.isFailIfNoConsumers()) {
                    exchange.setException(new DirectConsumerNotAvailableException("No consumers available on endpoint: "  endpoint, exchange));
                } else {
                    LOG.debug("message ignored, no consumers available on endpoint: {}", endpoint);
                }
                callback.done(true);
                return true;
                return consumer.getAsyncProcessor().process(exchange, callback);
        } catch (Exception e) {
            exchange.setException(e);
