import java.io.OutputStream;
import java.util.stream.Collectors;
import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.logging.Log;
import org.sonatype.plexus.build.incremental.BuildContext;
     * build context to check changed files and mark them for refresh
     * (used for m2e compatibility)
     *
     * @component
     * @readonly
     */
    private BuildContext buildContext;

    /**
        prepareModel(getLog(), project, projectHelper, outDir, buildDir, buildContext);
    }

    public static void prepareModel(Log log, MavenProject project, MavenProjectHelper projectHelper, File modelOutDir,
                                    File buildDir, BuildContext buildContext) throws MojoExecutionException {

        File camelMetaDir = new File(modelOutDir, "META-INF/services/org/apache/camel/");
        camelMetaDir.mkdirs();
        List<String> models = new ArrayList<String>();
        // sort the names
        for (File file : jsonFiles) {
            String name = file.getName();
            if (name.endsWith(".json")) {
                // strip out .json from the name
                String modelName = name.substring(0, name.length() - 5);
                models.add(modelName);
        }
        Collections.sort(models);
        File outFile = new File(camelMetaDir, "model.properties");

        // check if the existing file has the same content, and if so then leave it as is so we do not write any changes
        // which can cause a re-compile of all the source code
        if (outFile.exists()) {
            try {
                List<String> existing = FileUtils.readLines(outFile);
                // skip comment lines
                existing = existing.stream().filter(l -> !l.startsWith("#")).collect(Collectors.toList());

                // are the content the same?
                if (models.containsAll(existing)) {
                    log.debug("No model changes detected");
                    return;
                }
            } catch (IOException e) {
                // ignore
            }
        }

        try {
            OutputStream os = buildContext.newFileOutputStream(outFile);
            FileOutputStream fos = new FileOutputStream(outFile, false);
            fos.write("#Generated by camel-package-maven-plugin\n".getBytes());
            os.close();
            log.info("Generated "  outFile  " containing "  models.size()  " Camel models");
            throw new MojoExecutionException("Failed to write properties to "  outFile  ". Reason: "  e, e);
