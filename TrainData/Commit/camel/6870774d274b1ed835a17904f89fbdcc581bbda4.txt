import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;
import org.osgi.framework.ServiceEvent;
import org.osgi.framework.ServiceListener;
public class OsgiServiceRegistry extends LifecycleStrategySupport implements Registry, Service, ServiceListener {
    private static final Logger LOG = LoggerFactory.getLogger(OsgiServiceRegistry.class);
    private final Map<ServiceReference<?>, AtomicLong> serviceReferenceUsageMap = new ConcurrentHashMap<>();
        bundleContext.addServiceListener(this);
                incrementServiceUsage(sr);
            incrementServiceUsage(sr);
                        incrementServiceUsage(sr);
        this.serviceReferenceUsageMap.forEach(this::drainServiceUsage);
        this.serviceReferenceUsageMap.clear();
    }

    void drainServiceUsage(ServiceReference<?> serviceReference, AtomicLong serviceUsageCount) {
        if (serviceUsageCount != null && serviceReference != null) {
            while(serviceUsageCount.decrementAndGet() >= 0) {
                this.bundleContext.ungetService(serviceReference);
            }
    }
    
    void incrementServiceUsage(ServiceReference<?> sr) {
        AtomicLong serviceUsageCount = this.serviceReferenceUsageMap.get(sr);
        if (serviceUsageCount != null) {
            serviceUsageCount.incrementAndGet();
        } else {
            this.serviceReferenceUsageMap.merge(sr, new AtomicLong(1), 
                (existingServiceUsageCount, newServiceUsageCount)->{
                        existingServiceUsageCount.getAndAdd(newServiceUsageCount.get());
                    return existingServiceUsageCount;
                });
        }
    }

    @Override
    public void serviceChanged(ServiceEvent event) {
        if (event.getType() == ServiceEvent.UNREGISTERING) {
            ServiceReference<?> serviceReference = event.getServiceReference();
            AtomicLong serviceUsageCount = this.serviceReferenceUsageMap.remove(serviceReference);
            drainServiceUsage(serviceReference, serviceUsageCount);
        }
