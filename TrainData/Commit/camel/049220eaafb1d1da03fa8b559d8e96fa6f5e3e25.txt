import java.util.function.Function;
import java.util.stream.Collector;
import java.util.stream.Stream;
import static java.util.stream.Collectors.counting;
import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.toSet;
            // how many different artifacts
            int count = components.stream()
                .map(ComponentModel::getArtifactId)
                .collect(toSet()).size();

            String changed = templateComponents(components, count);
            // how many different artifacts
            int count = others.stream()
                .map(OtherModel::getArtifactId)
                .collect(toSet()).size();

            String changed = templateOthers(others, count);
            // how many different artifacts
            int count = models.stream()
                .map(DataFormatModel::getArtifactId)
                .collect(toSet()).size();

            String changed = templateDataFormats(dataFormats, count);
            // how many different artifacts
            int count = languages.stream()
                .map(LanguageModel::getArtifactId)
                .collect(toSet()).size();

            String changed = templateLanguages(languages, count);
    private String templateComponents(List<ComponentModel> models, int artifacts) throws MojoExecutionException {
            map.put("numberOfArtifacts", artifacts);
    private String templateOthers(List<OtherModel> models, int artifacts) throws MojoExecutionException {
            map.put("numberOfArtifacts", artifacts);
    private String templateDataFormats(List<DataFormatModel> models, int artifacts) throws MojoExecutionException {
            map.put("numberOfArtifacts", artifacts);
    private String templateLanguages(List<LanguageModel> models, int artifacts) throws MojoExecutionException {
            map.put("numberOfArtifacts", artifacts);
