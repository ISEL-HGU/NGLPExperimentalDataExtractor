import org.jbpm.bpmn2.handler.WorkItemHandlerRuntimeException;
 * The handler can be configured to always wrap exceptions coming from Camel in a {@link WorkItemHandlerRuntimeException}. This is the default behaviour, but
 * can also be explicitly configured by setting the <code>HandleExceptions</code> workitem parameter to <code>true</code>/ When
 * the <code>HandleExceptions</code> workitem parameter is set to <code>false</code>, any exceptions coming from the Camel route will simply be
 * re-thrown. This makes the Camel route's exception handling logic responsible for correctly handling any exceptions.
 * <p/>





        /*
         * By default we handle exceptions via the AbstractLogOrThrow superclass.
         * However, the user can specify not to handle exceptions. This makes the Camel
         * route responsible for implementing the handler logic and passing the {@link
         * RuntimeExceotion) to be handled by the process.
         */
        Object isHandleExceptionParamValue = workItem.getParameter(JBPMConstants.HANDLE_EXCEPTION_WI_PARAM);
        boolean isHandleException;
        if (isHandleExceptionParamValue == null) {
            isHandleException = true;
        } else if (isHandleExceptionParamValue instanceof String) {
            isHandleException = Boolean.parseBoolean((String)isHandleExceptionParamValue);
        } else if (isHandleExceptionParamValue instanceof Boolean) {
            isHandleException = ((Boolean)isHandleExceptionParamValue).booleanValue();
        } else {
            throw new IllegalArgumentException("Unsupported type '"  isHandleExceptionParamValue.getClass().getCanonicalName()  "' for workitem parameter '"
                 JBPMConstants.HANDLE_EXCEPTION_WI_PARAM  "'.");
        }

            /*
             * Handle the exception if 'HandleException' is enabled (which is the default).
             * If it's not enabled, simply throw the exception. Note that in that case, the
             * exception needs to be a RuntimeException.
             */
            if (isHandleException) {
                handleException(e);
            } else {
                throw (RuntimeException)e;
            }
