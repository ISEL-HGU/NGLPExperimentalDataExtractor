import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.UUID;
import com.amazonaws.services.sqs.model.SendMessageBatchRequest;
import com.amazonaws.services.sqs.model.SendMessageBatchRequestEntry;
import com.amazonaws.services.sqs.model.SendMessageBatchResult;
        SqsOperations operation = determineOperation(exchange);
        if (ObjectHelper.isEmpty(operation)) {
           processSingleMessage(exchange);
        } else {
            switch (operation) {
            case sendBatchMessage:
            	sendBatchMessage(getClient(), exchange);
                break;
            default:
                throw new IllegalArgumentException("Unsupported operation");
            }
        }
    }
    
    public void processSingleMessage(final Exchange exchange) {
    
    private void sendBatchMessage(AmazonSQS amazonSQS, Exchange exchange) {
        SendMessageBatchRequest request = new SendMessageBatchRequest(getQueueUrl());
        Collection<SendMessageBatchRequestEntry> entries = new ArrayList<SendMessageBatchRequestEntry>();
        if (exchange.getIn().getBody() instanceof Collection) {
        	Collection c = exchange.getIn().getBody(Collection.class);
        	for (Iterator iterator = c.iterator(); iterator.hasNext();) {
				String object = (String) iterator.next();
				SendMessageBatchRequestEntry entry = new SendMessageBatchRequestEntry();
				entry.setId(UUID.randomUUID().toString());
				entry.setMessageAttributes(translateAttributes(exchange.getIn().getHeaders(), exchange));
				entry.setMessageBody(object);
				addDelay(entry, exchange);
				configureFifoAttributes(entry, exchange);
				entries.add(entry);
			}
            request.setEntries(entries);
            SendMessageBatchResult result = amazonSQS.sendMessageBatch(request);
            Message message = getMessageForResponse(exchange);
            message.setBody(result);
        } else {
        	request = exchange.getIn().getBody(SendMessageBatchRequest.class);
            SendMessageBatchResult result = amazonSQS.sendMessageBatch(request);
            Message message = getMessageForResponse(exchange);
            message.setBody(result);
        }
    }
    
    private void configureFifoAttributes(SendMessageBatchRequestEntry request, Exchange exchange) {
        if (getEndpoint().getConfiguration().isFifoQueue()) {
            // use strategies
            MessageGroupIdStrategy messageGroupIdStrategy = getEndpoint().getConfiguration().getMessageGroupIdStrategy();
            String messageGroupId = messageGroupIdStrategy.getMessageGroupId(exchange);
            request.setMessageGroupId(messageGroupId);

            MessageDeduplicationIdStrategy messageDeduplicationIdStrategy = getEndpoint().getConfiguration().getMessageDeduplicationIdStrategy();
            String messageDeduplicationId = messageDeduplicationIdStrategy.getMessageDeduplicationId(exchange);
            request.setMessageDeduplicationId(messageDeduplicationId);

        }
    }
    
    private void addDelay(SendMessageBatchRequestEntry request, Exchange exchange) {
        Integer headerValue = exchange.getIn().getHeader(SqsConstants.DELAY_HEADER, Integer.class);
        Integer delayValue;
        if (headerValue == null) {
            log.trace("Using the config delay");
            delayValue = getEndpoint().getConfiguration().getDelaySeconds();
        } else {
            log.trace("Using the header delay");
            delayValue = headerValue;
        }
        log.trace("found delay: {}", delayValue);
        request.setDelaySeconds(delayValue == null ? Integer.valueOf(0) : delayValue);
    }
    
    protected SqsConfiguration getConfiguration() {
        return getEndpoint().getConfiguration();
    }
    
    private SqsOperations determineOperation(Exchange exchange) {
        SqsOperations operation = exchange.getIn().getHeader(SqsConstants.SQS_OPERATION, SqsOperations.class);
        if (operation == null) {
            operation = getConfiguration().getOperation();
        }
        return operation;
    }
