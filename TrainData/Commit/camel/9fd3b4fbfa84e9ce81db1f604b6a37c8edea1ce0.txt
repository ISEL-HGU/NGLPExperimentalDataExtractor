     * Explicit authentication method to be used one of USERNAME_PASSWORD
     * REFRESH_TOKEN or JWT. Salesforce component can auto-determine the
     * authentication method to use from the properties set set this property to
     * eliminate any ambiguity.
     * All authentication configuration in one nested bean all properties set
     * there can be set directly on the component as well
     * URL of the Salesforce instance by default set to
     * https://login.salesforce.com
     * OAuth Consumer Key of the connected app configured in the Salesforce
     * instance setup. Typically a connected app needs to be configured but one
     * can be provided by installing a package.
     * OAuth Consumer Secret of the connected app configured in the Salesforce
     * instance setup.
     * KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain
     * only one entry with private key and certificate. Salesforce does not
     * verify the certificate chain so this can easily be a selfsigned
     * certificate. Make sure that you upload the certificate to the
     * corresponding connected app.
     * Refresh token already obtained in the refresh token OAuth flow. One needs
     * to setup a web application and configure a callback URL to receive the
     * refresh token or configure using the builtin callback at
     * https://login.salesforce.com/services/oauth2/success or
     * https://test.salesforce.com/services/oauth2/success and then retrive the
     * refresh_token from the URL at the end of the flow. Note that in
     * development organizations Salesforce allows hosting the callback web
     * application at localhost.
     * Username used in OAuth flow to gain access to access token. It's easy to
     * get started with password OAuth flow but in general one should avoid it
     * as it is deemed less secure than other flows.
     * Password used in OAuth flow to gain access to access token. It's easy to
     * get started with password OAuth flow but in general one should avoid it
     * as it is deemed less secure than other flows. Make sure that you append
     * security token to the end of the password if using one.
     * If set to true prevents the component from authenticating to Salesforce
     * with the start of the component. You would generaly set this to the
     * (default) false and authenticate early and be immediately aware of any
     * authentication issues.
     * Global endpoint configuration - use to set values that are common to all
     * endpoints
     * Used to set any properties that can be configured on the underlying HTTP
     * client. Have a look at properties of SalesforceHttpClient and the Jetty
     * HttpClient for all available options.
     * SSL parameters to use see SSLContextParameters class for all available
     * options.
     * Hostname of the HTTP proxy server to use.
     * Port number of the HTTP proxy server to use.
     * Username to use to authenticate against the HTTP proxy server.
     * Password to use to authenticate against the HTTP proxy server.
     * If set to true the configures the HTTP proxy to use as a SOCKS4 proxy.
     * If set to false disables the use of TLS when accessing the HTTP proxy.
    private Boolean isHttpProxySecure = true;
     * A list of addresses for which HTTP proxy server should be used.
     * A list of addresses for which HTTP proxy server should not be used.
     * Used in authentication against the HTTP proxy server needs to match the
     * URI of the proxy server in order for the httpProxyUsername and
     * httpProxyPassword to be used for authentication.
     * Realm of the proxy server used in preemptive Basic/Digest authentication
     * methods against the HTTP proxy server.
     * If set to true Digest authentication will be used when authenticating to
     * the HTTP proxyotherwise Basic authorization method will be used
     * In what packages are the generated DTO classes. Typically the classes
     * would be generated using camel-salesforce-maven-plugin. Set it if using
     * the generated DTOs to gain the benefit of using short SObject names in
     * parameters/header values.
