 *     <li>reference new class - Values can refer to creating new beans by their class name by prefixing with #class, eg #class:com.foo.MyClassType</li>
        private boolean nestingDeep = true;
        /**
         * Whether nesting is in use
         */
        /**
         * Whether deep nesting is in use, where Camel will attempt to walk as deep as possible by creating new objects in the OGNL graph if
         * a property has a setter and the object can be created from a default no-arg constructor.
         */
        public Builder withNestingDeep(boolean nestingDeep) {
            this.nestingDeep = nestingDeep;
            return this;
        }

        /**
         * Whether reference parameter (syntax starts with #) is in use
         */
        /**
         * Whether to use Camels property placeholder to resolve placeholders on keys and values
         */
        /**
         * Whether fluent builder is allowed as a valid getter/setter
         */
        /**
         * Binds the properties to the target object, and removes the property that was bound from properties.
         *
         * @param camelContext  the camel context
         * @param target        the target object
         * @param properties    the properties where the bound properties will be removed from
         * @return              true if one or more properties was bound
         */
            return bindProperties(camelContext, target, properties, nesting, nestingDeep, fluentBuilder, reference, placeholder);
        return bindProperties(camelContext, target, properties, true, true, true, true, true);
     * @param nestingDeep   whether deep nesting is in use, where Camel will attempt to walk as deep as possible by creating new objects in the OGNL graph if
     *                      a property has a setter and the object can be created from a default no-arg constructor.
                                         boolean nesting, boolean nestingDeep, boolean fluentBuilder, boolean reference, boolean placeholder) {
            if (bindProperty(camelContext, target, entry.getKey(), entry.getValue(), nesting, nestingDeep, fluentBuilder, reference, placeholder)) {
                return setProperty(camelContext, target, name, value, true, true, true, true, true);
                                boolean nesting, boolean nestingDeep, boolean fluentBuilder, boolean reference, boolean placeholder) {
                return setProperty(camelContext, target, name, value, nesting, nestingDeep, fluentBuilder, reference, placeholder);
                boolean bound = setProperty(camelContext, target, name, value, true, true, true, true, true);
                                       boolean nesting, boolean nestingDeep, boolean fluentBuilder, boolean reference, boolean placeholder) throws Exception {
                        if (!nestingDeep) {
                            // okay we cannot go further down
                            break;
                        }
