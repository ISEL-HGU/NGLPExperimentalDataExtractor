import org.apache.camel.processor.errorhandler.ExceptionPolicy;
import org.apache.camel.processor.errorhandler.ExceptionPolicy.RedeliveryOption;
import org.apache.camel.util.ObjectHelper;
    public static ExceptionPolicy createExceptionPolicy(OnExceptionDefinition def, RouteContext routeContext) {
        return new ExceptionPolicy(
                def.getId(),
                CamelContextHelper.getRouteId(def),
                def.getUseOriginalMessagePolicy() != null && def.getUseOriginalMessagePolicy(),
                ObjectHelper.isNotEmpty(def.getOutputs()),
                def.getHandledPolicy(),
                def.getContinuedPolicy(),
                def.getRetryWhilePolicy(),
                def.getOnRedelivery(),
                def.getOnExceptionOccurred(),
                def.getRedeliveryPolicyRef(),
                getRedeliveryPolicy(def.getRedeliveryPolicyType()),
                def.getExceptions());
    }

    private static Map<RedeliveryOption, String> getRedeliveryPolicy(RedeliveryPolicyDefinition definition) {
        if (definition == null) {
            return null;
        }
        Map<RedeliveryOption, String> policy = new HashMap<>();
        setoption(policy, RedeliveryOption.maximumRedeliveries, definition.getMaximumRedeliveries());
        setoption(policy, RedeliveryOption.redeliveryDelay, definition.getRedeliveryDelay());
        setoption(policy, RedeliveryOption.asyncDelayedRedelivery, definition.getAsyncDelayedRedelivery());
        setoption(policy, RedeliveryOption.backOffMultiplier, definition.getBackOffMultiplier());
        setoption(policy, RedeliveryOption.useExponentialBackOff, definition.getUseExponentialBackOff());
        setoption(policy, RedeliveryOption.collisionAvoidanceFactor, definition.getCollisionAvoidanceFactor());
        setoption(policy, RedeliveryOption.useCollisionAvoidance, definition.getUseCollisionAvoidance());
        setoption(policy, RedeliveryOption.maximumRedeliveryDelay, definition.getMaximumRedeliveryDelay());
        setoption(policy, RedeliveryOption.retriesExhaustedLogLevel, definition.getRetriesExhaustedLogLevel());
        setoption(policy, RedeliveryOption.retryAttemptedLogLevel, definition.getRetryAttemptedLogLevel());
        setoption(policy, RedeliveryOption.retryAttemptedLogInterval, definition.getRetryAttemptedLogInterval());
        setoption(policy, RedeliveryOption.logRetryAttempted, definition.getLogRetryAttempted());
        setoption(policy, RedeliveryOption.logStackTrace, definition.getLogStackTrace());
        setoption(policy, RedeliveryOption.logRetryStackTrace, definition.getLogRetryStackTrace());
        setoption(policy, RedeliveryOption.logHandled, definition.getLogHandled());
        setoption(policy, RedeliveryOption.logNewException, definition.getLogNewException());
        setoption(policy, RedeliveryOption.logContinued, definition.getLogContinued());
        setoption(policy, RedeliveryOption.logExhausted, definition.getLogExhausted());
        setoption(policy, RedeliveryOption.logExhaustedMessageHistory, definition.getLogExhaustedMessageHistory());
        setoption(policy, RedeliveryOption.logExhaustedMessageBody, definition.getLogExhaustedMessageBody());
        setoption(policy, RedeliveryOption.disableRedelivery, definition.getDisableRedelivery());
        setoption(policy, RedeliveryOption.delayPattern, definition.getDelayPattern());
        setoption(policy, RedeliveryOption.allowRedeliveryWhileStopping, definition.getAllowRedeliveryWhileStopping());
        setoption(policy, RedeliveryOption.exchangeFormatterRef, definition.getExchangeFormatterRef());
        return policy;
    }

    private static void setoption(Map<RedeliveryOption, String> policy, RedeliveryOption option, Object value) {
        if (value != null) {
            policy.put(option, value.toString());
        }
    }

