                    updated = updateLink(file, componentName  "-component");
                    updated |= updateTitles(file, docTitle);
                    updated = updateLink(file, dataFormatName  "-dataformat");
                    updated |= updateTitles(file, docTitle);
                    updated = updateLink(file, languageName  "-language");
                    updated |= updateTitles(file, docTitle);
                    updated = updateLink(file, eipName  "-eip");
                    updated |= updateTitles(file, docTitle);
    private boolean updateLink(File file, String link) throws MojoExecutionException {
                    // first line is the link
                    String newLine = "[["  link  "]]";
                    newLines.add(newLine);
                    updated = !line.equals(newLine);
                    if (updated) {
                        // its some old text so keep it
                        newLines.add(line);
                    }
                } else {
                    newLines.add(line);
                }
            }

            if (updated) {
                // build the new updated text
                String newText = newLines.stream().collect(Collectors.joining("\n"));
                writeText(file, newText);
            }
        } catch (Exception e) {
            throw new MojoExecutionException("Error reading file "  file  " Reason: "  e, e);
        }

        return updated;
    }

    private boolean updateTitles(File file, String title) throws MojoExecutionException {
        if (!file.exists()) {
            return false;
        }

        boolean updated = false;

        try {
            List<String> newLines = new ArrayList<>();

            String text = loadText(new FileInputStream(file));
            String[] lines = text.split("\n");
            // line 0 is the link
            for (int i = 1; i < lines.length; i) {
                String line = lines[i];

                if (i == 1) {
            boolean title = lines[1].startsWith("##") || lines[1].startsWith("==");
            boolean empty = lines[2].trim().isEmpty();
            boolean availableFrom = lines[3].trim().contains("Available as of") || lines[3].trim().contains("Available in");
            boolean empty2 = lines[4].trim().isEmpty();
                if (!newLine.equals(lines[3])) {
                    newLines.set(3, newLine);
                    newLines.add(4, "");
                newLines.add(3, newLine);
                newLines.add(4, "");
