import org.apache.camel.component.salesforce.api.dto.composite.SObjectComposite;
import org.apache.camel.component.salesforce.api.dto.composite.SObjectCompositeResponse;
        void handleResponse(Exchange exchange, Optional<T> body, Map<String, String> headers,
            SalesforceException exception, AsyncCallback callback);
            case COMPOSITE:
                return processInternal(SObjectComposite.class, exchange, compositeClient::submitComposite,
                    this::processCompositeResponse, callback);
    void processCompositeResponse(final Exchange exchange, final Optional<SObjectCompositeResponse> responseBody,
        final Map<String, String> headers, final SalesforceException exception, final AsyncCallback callback) {
        try {
            if (!responseBody.isPresent()) {
                exchange.setException(exception);
            } else {
                final Message in = exchange.getIn();
                final Message out = exchange.getOut();

                final SObjectCompositeResponse response = responseBody.get();

                out.copyFromWithNewBody(in, response);
                out.getHeaders().putAll(headers);
            }
        } finally {
            // notify callback that exchange is done
            callback.done(false);
        }
    }

        clientOperation.submit(body, determineHeaders(exchange), (response, responseHeaders,
            exception) -> responseHandler.handleResponse(exchange, response, responseHeaders, exception, callback));
    static boolean processException(final Exchange exchange, final AsyncCallback callback, final Exception e) {
        exchange.setException(e);
        callback.done(true);

        return true;
    }

