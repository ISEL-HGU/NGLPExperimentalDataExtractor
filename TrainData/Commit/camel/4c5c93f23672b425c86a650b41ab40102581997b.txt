import java.util.Collections;
import java.util.function.Function;
import org.apache.camel.util.UnsafeUriCharactersEncoder;
    /**
     * Remaining parameters specified in the Endpoint URI.
     */
    Map<String, Object> parameters = Collections.emptyMap();

    public RestSwaggerEndpoint(final String uri, final String remaining, final RestSwaggerComponent component,
        final Map<String, Object> parameters) {
        this.parameters = parameters;
                final Operation operation = operationEntry.getValue();
                final Map<String, Parameter> pathParameters = operation.getParameters().stream()
                    .filter(p -> "path".equals(p.getIn()))
                    .collect(Collectors.toMap(Parameter::getName, Function.identity()));
                final String uriTemplate = resolveUri(pathEntry.getKey(), pathParameters);
    public boolean isLenientProperties() {
        return true;
    }

    @Override
            .map(this::queryParameter).collect(Collectors.joining("&"));
    String literalPathParameterValue(final Parameter parameter) {
        final String name = parameter.getName();

        final String valueStr = String.valueOf(parameters.get(name));
        final String encoded = UnsafeUriCharactersEncoder.encode(valueStr);

        return encoded;
    }

    String literalQueryParameterValue(final Parameter parameter) {
        final String name = parameter.getName();

        final String valueStr = String.valueOf(parameters.get(name));
        final String encoded = UnsafeUriCharactersEncoder.encode(valueStr);

        return name  "="  encoded;
    }

    String queryParameter(final Parameter parameter) {
        final String name = parameter.getName();
        if (ObjectHelper.isEmpty(name)) {
            return "";
        }

        if (parameters.containsKey(name)) {
            return literalQueryParameterValue(parameter);
        }

        return queryParameterExpression(parameter);
    }

    String resolveUri(final String uriTemplate, final Map<String, Parameter> pathParameters) {
        if (pathParameters.isEmpty()) {
            return uriTemplate;
        }

        int start = uriTemplate.indexOf('{');

        if (start == -1) {
            return uriTemplate;
        }

        int pos = 0;
        final StringBuilder resolved = new StringBuilder(uriTemplate.length() * 2);
        while (start != -1) {
            resolved.append(uriTemplate.substring(pos, start));

            final int end = uriTemplate.indexOf('}', start);

            final String name = uriTemplate.substring(start  1, end);

            if (parameters.containsKey(name)) {
                final Parameter parameter = pathParameters.get(name);
                final Object value = literalPathParameterValue(parameter);
                resolved.append(value);
            } else {
                resolved.append('{').append(name).append('}');
            }

            pos = end;
            start = uriTemplate.indexOf('{', pos);
        }

        return resolved.toString();
    }

