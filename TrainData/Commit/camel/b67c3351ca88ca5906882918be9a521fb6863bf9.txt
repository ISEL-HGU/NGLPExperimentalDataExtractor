     * A number of milliseconds since the UNIX Epoch. The default is 60 days.
     * A LinkedIn access token expires when this amount of time elapses after the token is in use.
                && (lazyAuth == other.lazyAuth)
                && (accessToken == null ? other.accessToken == null : accessToken.equals(other.accessToken));
            .append(redirectUri).append(scopes).append(httpParams).append(lazyAuth).append(accessToken).toHashCode();
            //if access token is null, authentication credentials have to be validated
        if(ObjectHelper.isEmpty(accessToken)) {
            StringHelper.notEmpty(userName, "userName");
            if (ObjectHelper.isEmpty(userPassword) && secureStorage == null) {
                throw new IllegalArgumentException("Property userPassword or secureStorage is required");
            }
            StringHelper.notEmpty(clientId, "clientId");
            StringHelper.notEmpty(clientSecret, "clientSecret");
        } else {
            //if accessToken is net, other parameters hav to be empty
            if (!ObjectHelper.isEmpty(userName)) {
                throw new IllegalArgumentException("Property accessToken can not be defined if property userName is set");
            }
            if (!ObjectHelper.isEmpty(userPassword)) {
                throw new IllegalArgumentException("Property accessToken can not be defined if property userPassword is set");
            }
            if (!ObjectHelper.isEmpty(clientId)) {
                throw new IllegalArgumentException("Property accessToken can not be defined if property clientId is set");
            }
            if (!ObjectHelper.isEmpty(clientSecret)) {
                throw new IllegalArgumentException("Property accessToken can not be defined if property clientSecret is set");
            }

        //redirectUri has to be valid for both cases
