            DecryptedDataAndPPublicKeyEncryptedData encDataAndPbe = getDecryptedData(exchange, in);
            encData = encDataAndPbe.getDecryptedData();
            PGPPublicKeyEncryptedData pbe = encDataAndPbe.getPbe();
            if (pbe.isIntegrityProtected()) {
                if (!pbe.verify()) {
                    throw new PGPException("Message failed integrity check");
                }
            }
    private DecryptedDataAndPPublicKeyEncryptedData getDecryptedData(Exchange exchange, InputStream encryptedStream) throws Exception, PGPException {
        return new DecryptedDataAndPPublicKeyEncryptedData(encData, pbe);
    
    private static class DecryptedDataAndPPublicKeyEncryptedData {

        private final InputStream decryptedData;

        private final PGPPublicKeyEncryptedData pbe;

        DecryptedDataAndPPublicKeyEncryptedData(InputStream decryptedData, PGPPublicKeyEncryptedData pbe) {
            this.decryptedData = decryptedData;
            this.pbe = pbe;
        }

        public InputStream getDecryptedData() {
            return decryptedData;
        }

        public PGPPublicKeyEncryptedData getPbe() {
            return pbe;
        }

    }
