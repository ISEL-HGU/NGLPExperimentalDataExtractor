import java.io.IOException;
import java.io.InputStream;

import org.apache.camel.Exchange;
import org.apache.camel.ExchangePattern;
import org.apache.camel.component.ResourceEndpoint;
import org.apache.camel.util.IOHelper;
import org.everit.json.schema.ObjectSchema;
import org.everit.json.schema.Schema;
import org.everit.json.schema.ValidationException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class JsonSchemaValidatorEndpoint extends ResourceEndpoint {
    private static final Logger LOG = LoggerFactory.getLogger(JsonSchemaValidatorEndpoint.class);
    
    private Schema schema;
    
        super(endpointUri, component, resourceUri);
    @Override
    public void clearContentCache() {
        this.schema = null;
        super.clearContentCache();
    public ExchangePattern getExchangePattern() {
        return ExchangePattern.InOut;
    }
    
    @Override
    protected void onExchange(Exchange exchange) throws Exception {
        Object jsonPayload = null;
        InputStream is = null;
        // Get a local copy of the current schema to improve concurrency.
        Schema localSchema = this.schema;
        if (localSchema == null) {
            localSchema = getOrCreateSchema();
        try {
            is = getContentToValidate(exchange, InputStream.class);
            if (shouldUseHeader()) {
                if (is == null && isFailOnNullHeader()) {
                    throw new NoJsonHeaderValidationException(exchange, headerName);
                }
            } else {
                if (is == null && isFailOnNullBody()) {
                    throw new NoJsonBodyValidationException(exchange);
                }
            }
            if (is != null) {
                if (schema instanceof ObjectSchema) {
                    jsonPayload = new JSONObject(new JSONTokener(is));
                } else { 
                    jsonPayload = new JSONArray(new JSONTokener(is));
                }
                // throws a ValidationException if this object is invalid
                schema.validate(jsonPayload); 
                LOG.debug("JSON is valid");
            }
        } catch (ValidationException e) {
            this.errorHandler.handleErrors(exchange, schema, e);
        } catch (JSONException e) {
            this.errorHandler.handleErrors(exchange, schema, e);
        } finally {
            IOHelper.close(is);
        }
    private <T> T getContentToValidate(Exchange exchange, Class<T> clazz) {
        if (shouldUseHeader()) {
            return exchange.getIn().getHeader(headerName, clazz);
        } else {
            return exchange.getIn().getBody(clazz);
        }
    private boolean shouldUseHeader() {
        return headerName != null;
    }
    
     * Synchronized method to create a schema if is does not already exist.
     * 
     * @return The currently loaded schema
     * @throws IOException
    private Schema getOrCreateSchema() throws Exception {
        synchronized (this) {
            if (this.schema == null) {
                this.schema = this.schemaLoader.createSchema(getCamelContext(), this.getResourceAsInputStream());
            }
        }
        return this.schema;
    @Override
    protected String createEndpointUri() {
        return "json-validator:"  getResourceUri();
    }
