import java.net.URISyntaxException;
import java.util.stream.Collectors;
public abstract class DefaultConnectorComponent extends DefaultComponent implements ConnectorComponent {
    private static final Pattern NAME_PATTERN = Pattern.compile("\"name\"\\s?:\\s?\"([\\w|.])\".*");
    private static final Pattern BASE_SCHEME_PATTERN = Pattern.compile("\"baseScheme\"\\s?:\\s?\"([\\w|.])\".*");
    private String connectorJSon;
    private String connectorName;
            defaultOptions.forEach((k, v) -> addConnectorOption(options, k, v));
            addConnectorOption(options, key, value);
                extra.forEach((k, v) -> addConnectorOption(options, k, v));
        String delegateUri = createEndpointUri(scheme, options);
    @Override
    public String createEndpointUri(String scheme, Map<String, String> options) throws URISyntaxException {
        log.trace("Creating endpoint uri with scheme: {}", scheme);
        return catalog.asEndpointUri(scheme, options, false);
    public void addConnectorOption(Map<String, String> options, String name, String value) {
        log.trace("Adding option: {}={}", name, value);
        options.put(name, value);
    }

    @Override
    public CamelCatalog getCamelCatalog() {
        return catalog;
    }

    @Override
    public String getCamelConnectorJSon() {
        if (connectorJSon == null) {
            connectorJSon = lines.stream().collect(Collectors.joining("\n"));
        }
        return connectorJSon;
    }

    @Override
    public String getConnectorName() {
        if (connectorName == null) {
            connectorName = extractName(lines);
        }
        return connectorName;
    }

    @Override
    public String getComponentName() {
        return componentName;
    }

    // --------------------------------------------------------------

    @Override
    private List<String> findCamelConnectorJSonSchema() throws Exception {
        log.debug("Finding camel-connector.json in classpath for connector: {}", componentName);
        Enumeration<URL> urls = getClass().getClassLoader().getResources("camel-connector.json");
        while (urls.hasMoreElements()) {
            URL url = urls.nextElement();
            InputStream is = url.openStream();
            if (is != null) {
                List<String> lines = loadFile(is);
                IOHelper.close(is);

                String javaType = extractJavaType(lines);
                log.debug("Found camel-connector.json in classpath with javaType: {}", javaType);

                if (className.equals(javaType)) {
                    return lines;
                }
            }
        }
        return null;
    }
    private String extractName(List<String> json) {
        for (String line : json) {
            line = line.trim();
            Matcher matcher = NAME_PATTERN.matcher(line);
            if (matcher.matches()) {
                return matcher.group(1);
            }
        }
        return null;
    }

            Matcher matcher = BASE_SCHEME_PATTERN.matcher(line);
