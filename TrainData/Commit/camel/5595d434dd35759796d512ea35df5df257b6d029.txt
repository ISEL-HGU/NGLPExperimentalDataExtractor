    EQ, EQ_IGNORE, GT, GTE, LT, LTE, NOT_EQ, NOT_EQ_IGNORE,
    CONTAINS, NOT_CONTAINS, CONTAINS_IGNORECASE, NOT_CONTAINS_IGNORECASE,
    REGEX, NOT_REGEX, IN, NOT_IN, IS, NOT_IS, RANGE, NOT_RANGE, STARTS_WITH, ENDS_WITH;
        } else if ("!=~".equals(text)) {
            return NOT_EQ_IGNORE;
        } else if ("!contains".equals(text) || "not contains".equals(text)) {
        } else if ("!~~".equals(text)) {
            return NOT_CONTAINS_IGNORECASE;
        } else if ("!regex".equals(text) || "not regex".equals(text)) {
        } else if ("!in".equals(text) || "not in".equals(text)) {
        } else if ("!is".equals(text) || "not is".equals(text)) {
        } else if ("!range".equals(text) || "not range".equals(text)) {
        } else if ("startsWith".equals(text) || "starts with".equals(text)) {
        } else if ("endsWith".equals(text) || "ends with".equals(text)) {
        } else if (operator == NOT_EQ_IGNORE) {
            return "!=~";
            return "!contains";
        } else if (operator == NOT_CONTAINS_IGNORECASE) {
            return "!~~";
            return "!regex";
            return "!in";
            return "!is";
            return "!range";
            return "startsWith";
            return "endsWith";
        } else if (operator == NOT_EQ_IGNORE) {
            return null;
        } else if (operator == NOT_CONTAINS_IGNORECASE) {
            return null;
