    private volatile AssertionError failFastAssertionError;
    @UriParam(label = "producer")
    private boolean failFast = true;
            if (failFastAssertionError == null) {
                assertEquals("Received message count", expectedCount, getReceivedCounter());
            }
        if (failFastAssertionError != null) {
            throw failFastAssertionError;
        }

            // skip tasks which we have already been running in fail fast mode
            boolean skip = failFast && test instanceof AssertionTask;
            if (!skip) {
                test.run();
            }
            expects(new AssertionTask() {
                @Override
                void assertOnIndex(int i) {
                    Exchange exchange = getReceivedExchange(i);
                    for (Map.Entry<String, Object> entry : expectedHeaderValues.entrySet()) {
                        String key = entry.getKey();
                        Object expectedValue = entry.getValue();

                        // we accept that an expectedValue of null also means that the header may be absent
                        if (expectedValue != null) {
                            assertTrue("Exchange "  i  " has no headers", exchange.getIn().hasHeaders());
                            boolean hasKey = exchange.getIn().getHeaders().containsKey(key);
                            assertTrue("No header with name "  key  " found for message: "  i, hasKey);
                        }

                        Object actualValue = exchange.getIn().getHeader(key);
                        actualValue = extractActualValue(exchange, actualValue, expectedValue);

                        assertEquals("Header with name "  key  " for message: "  i, expectedValue, actualValue);
                    }
                }

                        assertOnIndex(i);
        expects(new AssertionTask() {
            @Override
            void assertOnIndex(int i) {
                Exchange exchange = getReceivedExchange(i);
                for (Map.Entry<String, Object> entry : expectedPropertyValues.entrySet()) {
                    String key = entry.getKey();
                    Object expectedValue = entry.getValue();

                    // we accept that an expectedValue of null also means that the property may be absent
                    if (expectedValue != null) {
                        assertTrue("Exchange "  i  " has no properties", !exchange.getProperties().isEmpty());
                        boolean hasKey = exchange.getProperties().containsKey(key);
                        assertTrue("No property with name "  key  " found for message: "  i, hasKey);
                    }

                    Object actualValue = exchange.getProperty(key);
                    actualValue = extractActualValue(exchange, actualValue, expectedValue);

                    assertEquals("Property with name "  key  " for message: "  i, expectedValue, actualValue);
                }
            }

                    assertOnIndex(i);
        expects(new AssertionTask() {
            @Override
            void assertOnIndex(int i) {
                Exchange exchange = getReceivedExchange(i);
                assertTrue("No exchange received for counter: "  i, exchange != null);

                Object expectedBody = expectedBodyValues.get(i);
                Object actualBody = null;
                if (i < actualBodyValues.size()) {
                    actualBody = actualBodyValues.get(i);
                }
                actualBody = extractActualValue(exchange, actualBody, expectedBody);

                assertEquals("Body of message: "  i, expectedBody, actualBody);
            }

                    assertOnIndex(i);
    public boolean isFailFast() {
        return failFast;
    }

    /**
     * Sets whether {@link #assertIsSatisfied()} should fail fast
     * at the first detected failed expectation while it may otherwise wait for all expected
     * messages to arrive before performing expectations verifications.
     *
     * Is by default <tt>true</tt>. Set to <tt>false</tt> to use behavior as in Camel 2.x.
     */
    public void setFailFast(boolean failFast) {
        this.failFast = failFast;
    }

        failFastAssertionError = null;

            if (failFast) {
                // fail fast mode so check n'th expectations as soon as possible
                int index = getReceivedCounter() - 1;
                for (Runnable test : tests) {
                    // only assertion tasks can support fail fast mode
                    if (test instanceof AssertionTask) {
                        AssertionTask task = (AssertionTask) test;
                        try {
                            log.debug("Running assertOnIndex({}) on task: {}", index, task);
                            task.assertOnIndex(index);
                        } catch (AssertionError e) {
                            failFastAssertionError = e;
                            // signal latch we are done as we are failing fast
                            log.debug("Assertion failed fast on "  index  " received exchange due to "  e.getMessage());
                            while (latch != null && latch.getCount() > 0) {
                                latch.countDown();
                            }
                        }
                    }
                }
            }
