import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
        injectBindToRegistryFields(bean, beanName);
        injectBindToRegistryMethods(bean, beanName);
            }
        });
    }
    protected void injectBindToRegistryFields(final Object bean, final String beanName) {
        ReflectionHelper.doWithFields(bean.getClass(), new ReflectionHelper.FieldCallback() {
            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {
    protected void injectBindToRegistryMethods(final Object bean, final String beanName) {
        // sort the methods so the simplest are used first

        final List<Method> methods = new ArrayList<Method>();
        ReflectionHelper.doWithMethods(bean.getClass(), method -> {
            BindToRegistry bind = method.getAnnotation(BindToRegistry.class);
            if (bind != null && getPostProcessorHelper().matchContext(bind.context())) {
                methods.add(method);
            }
        });

        // sort methods on shortest number of parameters as we want to process the most simplest first
        methods.sort(Comparator.comparingInt(Method::getParameterCount));

        LOG.trace("Discovered {} @BindToRegistry methods", methods.size());

        // bind each method
        methods.forEach(method -> {
            BindToRegistry bind = method.getAnnotation(BindToRegistry.class);
            bindToRegistry(method, bind.value(), bean, beanName);
        });
    }

                } else {
                    // okay attempt to default to singleton instances from the registry
                    Set<?> instances = camelContext.getRegistry().findByType(type);
                    if (instances.size() == 1) {
                        parameters[i] = instances.iterator().next();
                    } else {
                        // there are multiple instances of the same type, so barf
                        throw new IllegalArgumentException("Multiple beans of the same type: "  type
                                 " exists in the Camel registry. Specify the bean name on @BeanInject to bind to a single bean, at the method: "  method);
                    }
