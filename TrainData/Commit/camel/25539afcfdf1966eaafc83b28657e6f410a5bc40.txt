import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
        private final Map<String, Long> lastProcessedOffset = new ConcurrentHashMap<>();
                        log.debug("Records count {} received for partition {}", allRecords.records(partition).size(), partition);
                                    //lastOffsetProcessed would be used by Consumer re-balance listener to preserve offset state upon partition revoke
                                    lastProcessedOffset.put(serializeOffsetKey(partition), partitionLastOffset);
                String offsetKey = serializeOffsetKey(partition);
                Long offset = lastProcessedOffset.get(offsetKey);
                if (offset == null) {
                    offset = -1l;
                log.debug("Saving offset repository state {} from offsetKey {} with offset: {}", threadId, offsetKey, offset);
                commitOffset(offsetRepository, partition, offset, true);
                lastProcessedOffset.remove(offsetKey);
