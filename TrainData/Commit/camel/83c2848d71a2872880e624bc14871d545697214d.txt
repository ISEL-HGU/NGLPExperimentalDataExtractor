 * Generate or updates the component/dataformat/language readme.md and .adoc files in the project root directory.

                    updated |= updateTitle(file, model.getTitle()  " Component");


                    updated |= updateTitle(file, model.getTitle()  " DataFormat");


                    updated |= updateTitle(file, model.getTitle()  " Language");

    private boolean updateTitle(File file, String title) throws MojoExecutionException {
        if (!file.exists()) {
            return false;
        }

        // they may be in old title format which we want to avoid
        // [[Bean-BeanComponent]]
        // Bean Component
        // ~~~~~~~~~~~~~~

        try {
            String text = loadText(new FileInputStream(file));

            // grab the first 3 lines which can have old legacy format
            String before = StringHelper.before(text, "\n");
            text = StringHelper.after(text, "\n");
            String before2 = StringHelper.before(text, "\n");
            text = StringHelper.after(text, "\n");
            String before3 = StringHelper.before(text, "\n");
            text = StringHelper.after(text, "\n");

            // skip old title format
            if (before3 != null && before3.startsWith("~~~")) {
                before = null;
                before2 = null;
                before3 = null;
            }
            if (before2 != null && before2.startsWith("~~~")) {
                before = null;
                before2 = null;
            }

            String oldTitle = before;
            if (oldTitle == null) {
                oldTitle = before2;
            }
            if (oldTitle == null) {
                oldTitle = before3;
            }

            String changed = "# "  title;
            if (!changed.equals(oldTitle)) {
                // insert title in top of file
                String newText = changed  "\n";
                // keep the before lines that was okay to keep
                if (before != null) {
                    newText = before  "\n";
                }
                if (before2 != null) {
                    newText = before2  "\n";
                }
                if (before3 != null) {
                    newText = before3  "\n";
                }
                // and remember the doc body
                newText = text;

                writeText(file, newText);
                return true;
            }
        } catch (Exception e) {
            throw new MojoExecutionException("Error reading file "  file  " Reason: "  e, e);
        }

        return false;
    }

