import org.apache.camel.builder.ExpressionBuilder;
    @XmlAttribute @Metadata(defaultValue = "true")
    private Boolean dynamicUri;
    @Override
    protected Expression createExpression(RouteContext routeContext) {
        // whether to use dynamic or static uri
        if (isDynamic()) {
            return super.createExpression(routeContext);
        } else {
            return ExpressionBuilder.constantExpression(getUri());
        }
    }

    private boolean isDynamic() {
        // its dynamic by default
        return dynamicUri == null || dynamicUri;
    }

     * Whether the uri is dynamic or static.
     * If the uri is dynamic then the simple language is used to evaluate a dynamic uri to use as the wire-tap destination,
     * for each incoming message. This works similar to how the <tt>toD</tt> EIP pattern works.
     * If static then the uri is used as-is as the wire-tap destination.
     *
     * @param dynamicUri  whether to use dynamic or static uris
     * @return the builder
     */
    public WireTapDefinition<Type> dynamicUri(boolean dynamicUri) {
        setDynamicUri(dynamicUri);
        return this;
    }

    /**
    public Boolean getDynamicUri() {
        return dynamicUri;
    }

    public void setDynamicUri(Boolean dynamicUri) {
        this.dynamicUri = dynamicUri;
    }

