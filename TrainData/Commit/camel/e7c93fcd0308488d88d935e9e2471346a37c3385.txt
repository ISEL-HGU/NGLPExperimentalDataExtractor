import java.io.FileOutputStream;
    /**
     * The output directory for generated autowire file
     */
    @Parameter(readonly = true, defaultValue = "${project.build.directory}/classes/META-INF/services/org/apache/camel/")
    protected File outFolder;

    private transient ClassLoader classLoader;
        // write this to META-INF/services/org/apache/camel/autowire.properties
            return;
        // build index of classes on classpath
        getLog().debug("Indexing classes on classpath");
        List<String> autowires = findAutowireComponentOptionsByClasspath(catalog, components, reflections);
        if (!autowires.isEmpty()) {
            outFolder.mkdirs();
            File file = new File(outFolder, "autowire.properties");
            try {
                FileOutputStream fos = new FileOutputStream(file, false);
                fos.write("# Generated by camel build tools\n".getBytes());
                for (String line : autowires) {
                    fos.write(line.getBytes());
                    fos.write("\n".getBytes());
                }
                IOHelper.close(fos);
                getLog().info("Created file: "  file  " (autowire by classpath: "  autowires.size()  ")");
            } catch (Throwable e) {
                throw new MojoFailureException("Cannot write to file "  file  " due "  e.getMessage(), e);
            }
        }
    }

    protected List<String> findAutowireComponentOptionsByClasspath(CamelCatalog catalog, Set<String> components, Reflections reflections) {
            getLog().debug("Autowiring Camel component: "  componentName);

                getLog().debug("Cannot find component JSon metadata for component: "  componentName);
                                    String line = "camel.component."  componentName  "."  name  "=#class:"  cls.getName();
                                getLog().debug("Found "  classes.size()  " for autowire: "  componentName  "."  name  ". Cannot chose one class: "  classes);
                        getLog().debug("Cannot load class: "  name, e);
        return autowires;
        // skip all from Apache Camel and regular JDK as they would be default anyway
            throw new MojoFailureException("Error during discovering Camel components from classpath due "  e.getMessage(), e);

        Set<URL> classpathURLs = new LinkedHashSet<>();

        // add project classpath
        URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL();
        classpathURLs.add(mainClasses);

        // add maven dependencies
                getLog().info("  "  url.getFile());
