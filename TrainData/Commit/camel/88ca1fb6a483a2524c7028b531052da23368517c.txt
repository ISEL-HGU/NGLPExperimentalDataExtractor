 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.LongAdder;

        VALUE, DELTA, COUNTER, MAXIMUM, MINIMUM
    private final AtomicLong value = new AtomicLong();
    private final AtomicLong lastValue;
    private final LongAdder updateCount = new LongAdder();
        if (UpdateMode.DELTA == updateMode) {
            this.lastValue = new AtomicLong();
        } else {
            this.lastValue = null;
        }
    public void updateValue(long newValue) {
        switch (updateMode) {
            value.addAndGet(newValue);
            value.set(newValue);
            if (updateCount.longValue() > 0) {
                // remember previous value before updating it
                lastValue.set(value.longValue());
            value.set(newValue);
            value.updateAndGet(value -> {
                if (updateCount.longValue() == 0 || value < newValue) {
                    return newValue;
                } else {
                    return value;
                }
            });
            value.updateAndGet(value -> {
                if (updateCount.longValue() == 0 || value > newValue) {
                    return newValue;
                } else {
                    return value;
                }
            });
        updateCount.add(1);
    public void increment() {
    public void decrement() {
    public long getValue() {
            if (updateCount.longValue() == 0) {
                return value.get();
                return value.get() - lastValue.get();
        return value.get();
    public long getUpdateCount() {
        return updateCount.longValue();
    public void reset() {
        value.set(0);
        if (lastValue != null) {
            lastValue.set(0);
        }
        updateCount.reset();
        return ""  value.get();
