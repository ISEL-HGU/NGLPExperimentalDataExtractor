import org.apache.camel.spi.DataType;
    private String fromType;
    private String toType;
     * If you specify 'csv', the transformer will be picked up for all of 'csv' from/to
     * Java transformation. Note that the scheme matching is performed only when
     * no exactly matched transformer exists.
    public String getFromType() {
        return fromType;
     * Set the 'from' data type name.
     * If you specify 'xml:XYZ', the transformer will be picked up if source type is
     * 'xml:XYZ'. If you specify just 'xml', the transformer matches with all of
     * 'xml' source type like 'xml:ABC' or 'xml:DEF'.
     * 
     * @param from 'from' data type name
    public void setFromType(String from) {
        this.fromType = from;
    public void setFromType(Class<?> clazz) {
        this.fromType = new DataType(clazz).toString();
    public String getToType() {
        return toType;
     * Set the 'to' data type name.
     * If you specify 'json:XYZ', the transformer will be picked up if destination type is
     * 'json:XYZ'. If you specify just 'json', the transformer matches with all of
     * 'json' destination type like 'json:ABC' or 'json:DEF'.
     * @param to 'to' data type name
    public void setToType(String to) {
        this.toType = to;
    public void setToType(Class<?> clazz) {
        this.toType = new DataType(clazz).toString();
