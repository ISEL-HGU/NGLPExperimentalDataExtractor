import java.util.Map;
import java.util.Map.Entry;

import javax.persistence.Query;
import org.apache.camel.Message;
import org.apache.camel.language.simple.SimpleLanguage;
    private String query;
    private String namedQuery;
    private String nativeQuery;
    private Map<String, Object> parameters;
    private Class<?> resultClass;
    private QueryFactory queryFactory;
    private Boolean useExecuteUpdate;
    public QueryFactory getQueryFactory() {
        if (queryFactory == null) {
            if (query != null) {
                queryFactory = QueryBuilder.query(query);
            } else if (namedQuery != null) {
                queryFactory = QueryBuilder.namedQuery(namedQuery);
            } else if (nativeQuery != null) {
                if (resultClass != null) {
                    queryFactory = QueryBuilder.nativeQuery(nativeQuery, resultClass);
                } else {
                    queryFactory = QueryBuilder.nativeQuery(nativeQuery);
                }
            }
        }
        return queryFactory;
    }

    public void setQueryFactory(QueryFactory queryFactory) {
        this.queryFactory = queryFactory;
    }

    public void setParameters(Map<String, Object> params) {
        this.parameters = params;
    }
    
    public Map<String, Object> getParameters() {
        return parameters;
    }

    public String getNamedQuery() {
        return namedQuery;
    }

    public void setNamedQuery(String namedQuery) {
        this.namedQuery = namedQuery;
    }

    public String getNativeQuery() {
        return nativeQuery;
    }

    public void setNativeQuery(String nativeQuery) {
        this.nativeQuery = nativeQuery;
    }

    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }
    
    public Class<?> getResultClass() {
        return resultClass;
    }

    public void setResultClass(Class<?> resultClass) {
        this.resultClass = resultClass;
    }

    public void setUseExecuteUpdate(Boolean executeUpdate) {
        this.useExecuteUpdate = executeUpdate;
    }

    public boolean isUseExecuteUpdate() {
        if (useExecuteUpdate == null) {
            if (query != null) {
                if (query.regionMatches(true, 0, "select", 0, 6)) {
                    useExecuteUpdate = false;
                } else {
                    useExecuteUpdate = true;
                }
            } else if (nativeQuery != null) {
                if (nativeQuery.regionMatches(true, 0, "select", 0, 6)) {
                    useExecuteUpdate = false;
                } else {
                    useExecuteUpdate = true;
                }
            } else {
                useExecuteUpdate = false;
            }
        }
        return useExecuteUpdate;
    }


        if (getQueryFactory() != null) {
            processQuery(exchange, entityManager);
        } else {
            processEntity(exchange, entityManager);
        }
    }

    protected void processQuery(Exchange exchange, EntityManager entityManager) {
        Query query = getQueryFactory().createQuery(entityManager);
        configureParameters(query, exchange);

        transactionTemplate.execute(new TransactionCallback<Object>() {
            public Object doInTransaction(TransactionStatus status) {
                if (getEndpoint().isJoinTransaction()) {
                    entityManager.joinTransaction();
                }

                Object answer = isUseExecuteUpdate() ? query.executeUpdate() : query.getResultList();
                Message target = exchange.getPattern().isOutCapable() ? exchange.getOut() : exchange.getIn();
                target.setBody(answer);

                if (getEndpoint().isFlushOnSend()) {
                    entityManager.flush();
                }

                return null;
            }
        });
    }

    private void configureParameters(Query query, Exchange exchange) {
        int maxResults = getEndpoint().getMaximumResults();
        if (maxResults > 0) {
            query.setMaxResults(maxResults);
        }
        // setup the parameter
        if (parameters != null) {
            parameters.forEach((key, value) -> {
                Object resolvedValue = value;
                if (value instanceof String) {
                    resolvedValue = SimpleLanguage.expression((String)value).evaluate(exchange, Object.class);
                }
                query.setParameter(key, resolvedValue);
            });
        }
    }

    protected void processEntity(Exchange exchange, EntityManager entityManager) {
