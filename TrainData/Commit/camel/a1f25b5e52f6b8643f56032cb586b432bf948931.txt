            byte[] postDecodedValue = ConsulRegistryUtils.decodeBase64(result.get());
            return ConsulRegistryUtils.deserialize(postDecodedValue);
        Object clone = ConsulRegistryUtils.clone((Serializable) object);
        byte[] serializedObject = ConsulRegistryUtils.serialize((Serializable) clone);
        String value = ConsulRegistryUtils.encodeBase64(serializedObject);
    static class ConsulRegistryUtils {
        /**
         * Decodes using Base64.
         *
         * @param base64String the {@link String} to decode
         * @return a decoded data as a byte array
         */
        static byte[] decodeBase64(final String base64String) {
            return Base64.decodeBase64(base64String);
        }

        /**
         * Encodes using Base64.
         * 
         * @param binaryData the data to encode
         * @return an encoded data as a {@link String}
         */
        static String encodeBase64(final byte[] binaryData) {
            final byte[] encoded = Base64.encodeBase64(binaryData);
            return new String(encoded);
        }

        /**
         * Deserializes an object out of the given byte array.
         *
         * @param bytes the byte array to deserialize from
         * @return an {@link Object} deserialized from the given byte array
         */
        static Object deserialize(byte[] bytes) {
            return SerializationUtils.deserialize(bytes);
        }

        /**
         * A deep serialization based clone
         *
         * @param object the object to clone
         * @return a deep clone
         */
        static Object clone(Serializable object) {
            return SerializationUtils.clone(object);
        }

        /**
         * Serializes the given {@code serializable} using Java Serialization
         * @param serializable
         * @return the serialized object as a byte array
         */
        static byte[] serialize(Serializable serializable) {
            return SerializationUtils.serialize(serializable);
        }
    }

