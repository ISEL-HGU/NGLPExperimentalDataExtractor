import org.apache.camel.util.CollectionStringBuffer;
    private static final String  NAMESPACE_SEPERATOR = " ";
        private String[] rootTokenNamespaces;
                rootTokenNamespaces = getNamespacesFromNamespaceTokenSplitter(scanner.findWithinHorizon(inheritNamespaceTokenPattern, 0));
                // build result with inherited namespaces and skip the prefixes that are declared within the child itself.
                next = sb.append(head).append(getMissingInherritNamespaces(head)).append(empty ? "/>" : ">").append(tail).toString();
        
        private String getMissingInherritNamespaces(final String text) {
            final StringBuilder sb = new StringBuilder();
            if (text != null) {
                boolean first = true;
                final String[] containedNamespaces = getNamespacesFromNamespaceTokenSplitter(text);
                for (final String rn : rootTokenNamespaces) {
                    boolean nsExists = false;
                    for (final String cn : containedNamespaces) {
                        if (rn.equals(cn)) {
                            nsExists = true;
                            // already existing namespace in child were found we need a separator, so we set first = false
                            if (first) {
                                first = false;
                            }
                            break;
                        }
                    }
                    if (!nsExists) {
                        sb.append(first ? rn : NAMESPACE_SEPERATOR  rn);
                        if (first) {
                            first = false;
                        }
                    }
                }
            }
            return sb.toString();
        }
        
        private String[] getNamespacesFromNamespaceTokenSplitter(final String text) {
            final String namespaces = getNamespacesFromNamespaceToken(text);
            return namespaces == null ? new String[0] : namespaces.split(NAMESPACE_SEPERATOR);
        }
        
