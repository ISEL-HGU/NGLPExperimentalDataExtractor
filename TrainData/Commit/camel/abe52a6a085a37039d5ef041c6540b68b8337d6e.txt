import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
            
            InputStream in = null;
            PipedOutputStream reply = new PipedOutputStream();
            // for now only two channel types are supported
            // shell option is added for specific purpose for now
            // may need further maintainance for further use cases
            if (Channel.CHANNEL_EXEC.equals(endpoint.getChannelType())) {
                channel = session.createChannel(Channel.CHANNEL_EXEC, command);
                in = new ByteArrayInputStream(new byte[]{0});
            } else if (Channel.CHANNEL_SHELL.equals(endpoint.getChannelType())) {
                // PipedOutputStream and PipedInputStream both are connected to each other to create a communication pipe
                // this approach is used to send the command and evaluate the response
                channel = session.createChannel(Channel.CHANNEL_SHELL);
                in = new PipedInputStream(reply);
            }
            if (Channel.CHANNEL_EXEC.equals(endpoint.getChannelType())) {
                if (openFuture.isOpened()) {
                    Set<ClientChannelEvent> events = channel.waitFor(Arrays.asList(ClientChannelEvent.CLOSED), 0);
                    if (!events.contains(ClientChannelEvent.TIMEOUT)) {
                        result = new SshResult(command, channel.getExitStatus(),
                                new ByteArrayInputStream(out.toByteArray()),
                                new ByteArrayInputStream(err.toByteArray()));
                    }
            } else if (Channel.CHANNEL_SHELL.equals(endpoint.getChannelType())) {
                getPrompt(channel, out, endpoint);
                reply.write(command.getBytes());
                reply.write(System.lineSeparator().getBytes());
                String response = getPrompt(channel, out, endpoint);
                result = new SshResult(command, channel.getExitStatus(),
                        new ByteArrayInputStream(response.getBytes()),
                        new ByteArrayInputStream(err.toByteArray()));
    private static String getPrompt(ClientChannel channel, ByteArrayOutputStream output, SshEndpoint endpoint)
        throws UnsupportedEncodingException, InterruptedException {

        while (!channel.isClosed()) {

            String response = new String(output.toByteArray(), "UTF-8");
            if (response.trim().endsWith(endpoint.getShellPrompt())) {
                output.reset();
                return SshShellOutputStringHelper.betweenBeforeLast(response, System.lineSeparator(), System.lineSeparator());
            }

            // avoid cpu burning cycles
            Thread.sleep(endpoint.getSleepForShellPrompt());
        }
        return null;
    }
