import static org.apache.camel.util.ObjectHelper.cast;
                if (valid) {
                    try {
                        value = resolveValue(camelContext, target, key, value, ignoreCase, fluentBuilder, allowPrivateSetter);
                    } catch (Exception e) {
                        throw new PropertyBindingException(target, e);
                    }
                    boolean hit = gen.configure(camelContext, target, key, value, ignoreCase);
                    if (removeParameter && hit) {
                        iter.remove();
                        rc = true;
                    }
    private static Object resolveValue(CamelContext context, Object target, String name, Object value,
                                       boolean ignoreCase, boolean fluentBuilder, boolean allowPrivateSetter) throws Exception {
        if (value instanceof String) {
            if (value.toString().startsWith("#class:")) {
                // its a new class to be created
                String className = value.toString().substring(7);
                String factoryMethod = null;
                if (className.indexOf('#') != -1) {
                    factoryMethod = StringHelper.after(className, "#");
                    className = StringHelper.before(className, "#");
                }
                Class<?> type = context.getClassResolver().resolveMandatoryClass(className);
                if (factoryMethod != null) {
                    value = context.getInjector().newInstance(type, factoryMethod);
                } else {
                    value = context.getInjector().newInstance(type);
                }
                if (value == null) {
                    throw new IllegalStateException("Cannot create instance of class: "  className);
                }
            } else if (value.toString().startsWith("#type:")) {
                // its reference by type, so lookup the actual value and use it if there is only one instance in the registry
                String typeName = value.toString().substring(6);
                Class<?> type = context.getClassResolver().resolveMandatoryClass(typeName);
                Set<?> types = context.getRegistry().findByType(type);
                if (types.size() == 1) {
                    value = types.iterator().next();
                } else if (types.size() > 1) {
                    throw new IllegalStateException("Cannot select single type: "  typeName  " as there are "  types.size()  " beans in the registry with this type");
                } else {
                    throw new IllegalStateException("Cannot select single type: "  typeName  " as there are no beans in the registry with this type");
                }
            } else if (value.toString().equals("#autowired")) {
                // we should get the type from the setter
                Method method = findBestSetterMethod(context, target.getClass(), name, fluentBuilder, allowPrivateSetter, ignoreCase);
                if (method != null) {
                    Class<?> parameterType = method.getParameterTypes()[0];
                    Set<?> types = context.getRegistry().findByType(parameterType);
                    if (types.size() == 1) {
                        value = types.iterator().next();
                    } else if (types.size() > 1) {
                        throw new IllegalStateException("Cannot select single type: "  parameterType  " as there are "  types.size()  " beans in the registry with this type");
                    } else {
                        throw new IllegalStateException("Cannot select single type: "  parameterType  " as there are no beans in the registry with this type");
                    }
                } else {
                    throw new IllegalStateException("Cannot find setter method with name: "  name  " on class: "  target.getClass().getName()  " to use for autowiring");
                }
            } else if (value.toString().equals("#bean:")) {
                String key = value.toString().substring(6);
                value = context.getRegistry().lookupByName(key);
            }
        }
        return value;
    }

            if (value.toString().startsWith("#bean:")) {
            } else {
                value = resolveValue(context, target, name, value, ignoreCase, fluentBuilder, allowPrivateSetter);
