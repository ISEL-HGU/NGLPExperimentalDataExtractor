import java.io.IOException;
import org.apache.camel.util.FileUtil;
import org.apache.camel.util.IOHelper;
                StreamMessage streamMessage = (StreamMessage)message;
                return createInputStreamFromStreamMessage(streamMessage);
    protected InputStream createInputStreamFromStreamMessage(StreamMessage message) {
        return new StreamMessageInputStream(message);
    }

        case Object: {
        }
        case Stream: {
            StreamMessage message = session.createStreamMessage();
            if (body != null) {
                long size = 0;
                try {
                    LOG.trace("Writing payload in StreamMessage");
                    InputStream is = context.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, body);
                    // assume streaming is bigger payload so use same buffer size as the file component
                    byte[] buffer = new byte[FileUtil.BUFFER_SIZE];
                    int len = 0;
                    int count = 0;
                    while (len >= 0) {
                        count;
                        len = is.read(buffer);
                        if (len >= 0) {
                            size = len;
                            LOG.trace("Writing payload chunk {} as bytes in StreamMessage", count);
                            message.writeBytes(buffer, 0, len);
                        }
                    }
                    LOG.trace("Finished writing payload (size {}) as bytes in StreamMessage", size);
                } catch (NoTypeConversionAvailableException | IOException e) {
                    // cannot convert to inputstream then thrown an exception to avoid sending a null message
                    JMSException cause = new MessageFormatException(e.getMessage());
                    cause.initCause(e);
                    throw cause;
                }
            }
            return message;
        }
