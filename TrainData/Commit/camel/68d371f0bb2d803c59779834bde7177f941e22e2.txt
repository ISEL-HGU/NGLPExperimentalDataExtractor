import static org.apache.camel.maven.packaging.JSonSchemaHelper.*;
        // only run if in camel-core
        File coreDir = new File(".");
        if (!coreDir.getName().equals("camel-core")) {
            return;
        }

        // find all json files in camel-core
        if (coreDir.isDirectory()) {
            File target = new File(coreDir, "target/classes/org/apache/camel/model");
            PackageHelper.findJsonFiles(target, jsonFiles, new PackageHelper.CamelComponentsModelFilter());
        }
        if (!jsonFiles.isEmpty()) {
            getLog().debug("Found "  jsonFiles.size()  " eips");
            for (File jsonFile : jsonFiles) {
                String json = loadEipJson(jsonFile);
                    String eipName = model.getName();
                    File file = new File(docDir, eipName  "-eip.adoc");

                        getLog().warn("No eip doc file: "  file);
    private String loadEipJson(File file) {
            String json = loadText(new FileInputStream(file));
            boolean isEip = json.contains("\"kind\": \"model\"");
            if (isEip) {
                return json;
        List<Map<String, String>> rows = parseJsonSchema("component", json, false);
        component.setScheme(getSafeValue("scheme", rows));
        component.setSyntax(getSafeValue("syntax", rows));
        component.setAlternativeSyntax(getSafeValue("alternativeSyntax", rows));
        component.setAlternativeSchemes(getSafeValue("alternativeSchemes", rows));
        component.setTitle(getSafeValue("title", rows));
        component.setDescription(getSafeValue("description", rows));
        component.setFirstVersion(getSafeValue("firstVersion", rows));
        component.setLabel(getSafeValue("label", rows));
        component.setDeprecated(getSafeValue("deprecated", rows));
        component.setConsumerOnly(getSafeValue("consumerOnly", rows));
        component.setProducerOnly(getSafeValue("producerOnly", rows));
        component.setJavaType(getSafeValue("javaType", rows));
        component.setGroupId(getSafeValue("groupId", rows));
        component.setArtifactId(getSafeValue("artifactId", rows));
        component.setVersion(getSafeValue("version", rows));
        rows = parseJsonSchema("componentProperties", json, true);
        rows = parseJsonSchema("properties", json, true);
        List<Map<String, String>> rows = parseJsonSchema("dataformat", json, false);
        dataFormat.setTitle(getSafeValue("title", rows));
        dataFormat.setModelName(getSafeValue("modelName", rows));
        dataFormat.setName(getSafeValue("name", rows));
        dataFormat.setDescription(getSafeValue("description", rows));
        dataFormat.setFirstVersion(getSafeValue("firstVersion", rows));
        dataFormat.setLabel(getSafeValue("label", rows));
        dataFormat.setDeprecated(getSafeValue("deprecated", rows));
        dataFormat.setJavaType(getSafeValue("javaType", rows));
        dataFormat.setGroupId(getSafeValue("groupId", rows));
        dataFormat.setArtifactId(getSafeValue("artifactId", rows));
        dataFormat.setVersion(getSafeValue("version", rows));
        rows = parseJsonSchema("properties", json, true);
        List<Map<String, String>> rows = parseJsonSchema("language", json, false);
        language.setTitle(getSafeValue("title", rows));
        language.setModelName(getSafeValue("modelName", rows));
        language.setName(getSafeValue("name", rows));
        language.setDescription(getSafeValue("description", rows));
        language.setFirstVersion(getSafeValue("firstVersion", rows));
        language.setLabel(getSafeValue("label", rows));
        language.setDeprecated(getSafeValue("deprecated", rows));
        language.setJavaType(getSafeValue("javaType", rows));
        language.setGroupId(getSafeValue("groupId", rows));
        language.setArtifactId(getSafeValue("artifactId", rows));
        language.setVersion(getSafeValue("version", rows));
        rows = parseJsonSchema("properties", json, true);
        List<Map<String, String>> rows = parseJsonSchema("model", json, false);
        eip.setName(getSafeValue("name", rows));
        eip.setTitle(getSafeValue("title", rows));
        eip.setDescription(getSafeValue("description", rows));
        eip.setJavaType(getSafeValue("javaType", rows));
        eip.setLabel(getSafeValue("label", rows));
        eip.setDeprecated("true".equals(getSafeValue("deprecated", rows)));
        eip.setInput("true".equals(getSafeValue("input", rows)));
        eip.setOutput("true".equals(getSafeValue("output", rows)));

        rows = parseJsonSchema("properties", json, true);
        for (Map<String, String> row : rows) {
            EipOptionModel option = new EipOptionModel();
            option.setName(getSafeValue("name", row));
            option.setDisplayName(getSafeValue("displayName", row));
            option.setJavaType(getSafeValue("javaType", row));
            option.setDeprecated("true".equals(getSafeValue("deprecated", row)));
            option.setDescription(getSafeValue("description", row));
            option.setInput("true".equals(getSafeValue("input", row)));
            option.setOutput("true".equals(getSafeValue("output", row)));

            eip.addEipOptionModel(option);
        }
