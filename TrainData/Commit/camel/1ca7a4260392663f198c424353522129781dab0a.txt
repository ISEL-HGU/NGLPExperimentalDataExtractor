import org.springframework.context.ApplicationContext;
        final String name = model.getJavaType().substring(model.getJavaType().lastIndexOf(".")  1).replace("Component", "ComponentAutoConfiguration");
        final String configurationName = name.replace("ComponentAutoConfiguration", "ComponentConfiguration");
        final String componentName = (overrideComponentName != null ? overrideComponentName : model.getScheme()).toLowerCase(Locale.US);

        javaClass.setPackage(packageName);
        javaClass.setName(name);
        javaClass.getJavaDoc().setFullText("Generated by camel-package-maven-plugin - do not edit this file!");
        javaClass.addImport(Map.class);
        javaClass.addImport(ApplicationContext.class);
        javaClass.addImport("org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator");
        javaClass.addImport("org.apache.camel.util.IntrospectionSupport");
        javaClass.addImport("org.apache.camel.spi.HasId");
        javaClass.addImport(model.getJavaType());
        javaClass.addField()
            .setPrivate()
            .setName("applicationContext")
            .setType("ApplicationContext")
            .addAnnotation(Autowired.class);
        javaClass.addField()
            .setPrivate()
            .setName("configuration")
            .setType(configurationName)
            .addAnnotation(Autowired.class);
            .addAnnotation(Autowired.class)
                .setLiteralValue("required", "false");
                    .setBody("super(\"camel.component\", \"camel.component."  componentName  "\");")
        String body = createComponentBody(model.getShortJavaType(), componentName);
        final String name = model.getJavaType().substring(model.getJavaType().lastIndexOf(".")  1).replace("DataFormat", "DataFormatAutoConfiguration");
        final String configurationName = name.replace("DataFormatAutoConfiguration", "DataFormatConfiguration");
        final String dataformatName = (overrideDataFormatName != null ? overrideDataFormatName : model.getName()).toLowerCase(Locale.US);

        javaClass.setPackage(packageName);
        javaClass.setName(name);
        javaClass.getJavaDoc().setFullText("Generated by camel-package-maven-plugin - do not edit this file!");
        javaClass.addImport(Map.class);
        javaClass.addImport(ApplicationContext.class);
        javaClass.addImport("org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator");
        javaClass.addImport("org.apache.camel.util.IntrospectionSupport");
        javaClass.addImport("org.apache.camel.spi.HasId");
        javaClass.addImport(model.getJavaType());
        javaClass.addField()
            .setPrivate()
            .setName("applicationContext")
            .setType("ApplicationContext")
            .addAnnotation(Autowired.class);
        javaClass.addField()
            .setPrivate()
            .setName("configuration")
            .setType(configurationName)
            .addAnnotation(Autowired.class);
                    .setBody("super(\"camel.dataformat\", \"camel.dataformat."  dataformatName  "\");")
        String body = createDataFormatBody(model.getShortJavaType(), dataformatName);
        final String name = model.getJavaType().substring(model.getJavaType().lastIndexOf(".")  1).replace("Language", "LanguageAutoConfiguration");
        final String configurationName = name.replace("LanguageAutoConfiguration", "LanguageConfiguration");
        final String languageName = (overrideLanguageName != null ? overrideLanguageName : model.getName()).toLowerCase(Locale.US);

        javaClass.setPackage(packageName);
        javaClass.setName(name);
        javaClass.getJavaDoc().setFullText("Generated by camel-package-maven-plugin - do not edit this file!");
        javaClass.addImport(HashMap.class);
        javaClass.addImport(Map.class);
        javaClass.addImport(ApplicationContext.class);
        javaClass.addImport("org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator");
        javaClass.addImport("org.apache.camel.util.IntrospectionSupport");
        javaClass.addImport("org.apache.camel.spi.HasId");
        javaClass.addImport(model.getJavaType());
        javaClass.addField()
            .setPrivate()
            .setName("applicationContext")
            .setType("ApplicationContext")
            .addAnnotation(Autowired.class);
        javaClass.addField()
            .setPrivate()
            .setName("configuration")
            .setType(configurationName)
            .addAnnotation(Autowired.class);
            .addAnnotation(Autowired.class)
                .setLiteralValue("required", "false");
                    .setBody("super(\"camel.component\", \"camel.component."  languageName  "\");")
        String body = createLanguageBody(model.getShortJavaType(), languageName);
    private static String createComponentBody(String shortJavaType, String name) {
        sb.append("IntrospectionSupport.getProperties(configuration, parameters, null, false);\n");
        sb.append("if (ObjectHelper.isNotEmpty(customizers)) {\n");
        sb.append("\n");
        sb.append("        boolean useCustomizer = (customizer instanceof HasId)");
        sb.append("            ? HierarchicalPropertiesEvaluator.evaluate(\n");
        sb.append("                applicationContext.getEnvironment(),\n");
        sb.append("               \"camel.component.customizer\",\n");
        sb.append("               \"camel.component.").append(name).append(".customizer\",\n");
        sb.append("               ((HasId)customizer).getId())\n");
        sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\n");
        sb.append("                applicationContext.getEnvironment(),\n");
        sb.append("               \"camel.component.customizer\",\n");
        sb.append("               \"camel.component.").append(name).append(".customizer\");\n");
        sb.append("\n");
        sb.append("        if (useCustomizer) {\n");
        sb.append("            LOGGER.debug(\"Configure component {}, with customizer {}\", component, customizer);\n");
        sb.append("            customizer.customize(component);\n");
        sb.append("        }\n");
    private static String createDataFormatBody(String shortJavaType, String name) {
        sb.append("            IntrospectionSupport.getProperties(configuration, parameters, null, false);\n");
        sb.append("if (ObjectHelper.isNotEmpty(customizers)) {\n");
        sb.append("\n");
        sb.append("        boolean useCustomizer = (customizer instanceof HasId)");
        sb.append("            ? HierarchicalPropertiesEvaluator.evaluate(\n");
        sb.append("                applicationContext.getEnvironment(),\n");
        sb.append("               \"camel.dataformat.customizer\",\n");
        sb.append("               \"camel.dataformat.").append(name).append(".customizer\",\n");
        sb.append("               ((HasId)customizer).getId())\n");
        sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\n");
        sb.append("                applicationContext.getEnvironment(),\n");
        sb.append("               \"camel.dataformat.customizer\",\n");
        sb.append("               \"camel.dataformat.").append(name).append(".customizer\");\n");
        sb.append("\n");
        sb.append("        if (useCustomizer) {\n");
        sb.append("            LOGGER.debug(\"Configure dataformat {}, with customizer {}\", dataformat, customizer);\n");
        sb.append("            customizer.customize(dataformat);\n");
        sb.append("        }\n");

    private static String createLanguageBody(String shortJavaType, String name) {
        sb.append("IntrospectionSupport.getProperties(configuration, parameters, null, false);\n");
        sb.append("if (ObjectHelper.isNotEmpty(customizers)) {\n");
        sb.append("\n");
        sb.append("        boolean useCustomizer = (customizer instanceof HasId)");
        sb.append("            ? HierarchicalPropertiesEvaluator.evaluate(\n");
        sb.append("                applicationContext.getEnvironment(),\n");
        sb.append("               \"camel.language.customizer\",\n");
        sb.append("               \"camel.language.").append(name).append(".customizer\",\n");
        sb.append("               ((HasId)customizer).getId())\n");
        sb.append("            : HierarchicalPropertiesEvaluator.evaluate(\n");
        sb.append("                applicationContext.getEnvironment(),\n");
        sb.append("               \"camel.language.customizer\",\n");
        sb.append("               \"camel.language.").append(name).append(".customizer\");\n");
        sb.append("\n");
        sb.append("        if (useCustomizer) {\n");
        sb.append("            LOGGER.debug(\"Configure language {}, with customizer {}\", language, customizer);\n");
        sb.append("            customizer.customize(language);\n");
        sb.append("        }\n");

