import java.util.Objects;
import java.util.stream.Stream;
                createEndpointDsl(packageName, model, compModels, overrideComponentName);
    private void createEndpointDsl(String packageName, ComponentModel model, List<ComponentModel> aliases, String overrideComponentName) throws MojoFailureException {
        if (aliases.size() == 1) {
            Method method = javaClass.addMethod().setDefault().setName(camelCaseLower(model.getScheme()))
                    .addParameter(String.class, "path")
                    .setReturnType(new GenericType(loadClass(builderClass.getCanonicalName())))
                    .setBody("class "  builderName  "Impl extends AbstractEndpointBuilder implements "  builderName  ", Advanced"  builderName  " {\n"  "    public "  builderName
                             "Impl(String path) {\n"  "        super(\""  model.getScheme()  "\", path);\n"  "    }\n"  "}\n"  "return new "  builderName  "Impl(path);\n");
            if ("true".equals(model.getDeprecated())) {
                method.addAnnotation(Deprecated.class);
            }
            String desc = getMainDescription(model);
            method.getJavaDoc().setText(desc);
        } else {
            for (ComponentModel componentModel : aliases) {
                Method method = javaClass.addMethod().setDefault().setName(camelCaseLower(componentModel.getScheme()))
                        .addParameter(String.class, "path")
                        .setReturnType(new GenericType(loadClass(builderClass.getCanonicalName())))
                        .setBody("return "  camelCaseLower(model.getScheme())  "(\""  componentModel.getScheme()  "\", path);\n");

                if ("true".equals(model.getDeprecated())) {
                    method.addAnnotation(Deprecated.class);
                }
                String desc = getMainDescription(componentModel);
                method.getJavaDoc().setText(desc);
            }
            Method method = javaClass.addMethod().setDefault().setName(camelCaseLower(model.getScheme()))
                    .addParameter(String.class, "scheme")
                    .addParameter(String.class, "path")
                    .setReturnType(new GenericType(loadClass(builderClass.getCanonicalName())))
                    .setBody("class "  builderName  "Impl extends AbstractEndpointBuilder implements "  builderName  ", Advanced"  builderName  " {\n"  "    public "  builderName
                             "Impl(String scheme, String path) {\n"  "        super(scheme, path);\n"  "    }\n"  "}\n"  "return new "  builderName  "Impl(scheme, path);\n");

            if ("true".equals(model.getDeprecated())) {
                method.addAnnotation(Deprecated.class);
            }
            String desc = model.getTitle()  " ("  model.getArtifactId()  ")";
            desc = "\n"  model.getDescription();
            desc = "\n";
            desc = "\nCategory: "  model.getLabel();
            desc = "\nAvailable as of version: "  model.getFirstVersionShort();
            desc = "\nMaven coordinates: "  project.getGroupId()  ":"  project.getArtifactId();
            method.getJavaDoc().setText(desc);
        String fileName = packageName.replaceAll("\\.", "\\/")  "/"  builderName  "Factory.java";
        writeSourceIfChanged(javaClass, fileName, false);
    }

    private static String camelCaseLower(String s) {
        int i;
        while (s != null && (i = s.indexOf('-')) > 0) {
            s = s.substring(0, i)  s.substring(i  1, i  2).toUpperCase()  s.substring(i  2);
        }
        while (s != null && (i = s.indexOf('')) > 0) {
            s = s.substring(0, i)  s.substring(i  1, i  2).toUpperCase()  s.substring(i  2);
        }
        if (s != null) {
            s = s.substring(0, 1).toLowerCase()  s.substring(1);
            switch (s) {
                case "class":
                    s = "clas";
                    break;
                case "package":
                    s = "packag";
                    break;
            }
        }
        return s;
    }

    private String getMainDescription(ComponentModel model) {
        return desc;
