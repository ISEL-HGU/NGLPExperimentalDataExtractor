                return Collections.singletonList(element);
                discarded = Collections.singletonList(buffer.removeLast());
            }

            buffer.addLast(element);
            return discarded;
        }
    },

    /**
     * Keeps only the oldest onNext value, overwriting any previous value if the
     * downstream can't keep up.
     */
    OLDEST {
        @Override
        public <T> Collection<T> update(Deque<T> buffer, T element) {
            Collection<T> discarded = Collections.emptySet();
            if (buffer.size() > 0) {
                discarded = Collections.singletonList(buffer.removeFirst());
