import java.util.ArrayList;
import java.util.Collections;
import org.kie.api.KieServices;
import org.kie.api.command.BatchExecutionCommand;
import org.kie.api.command.Command;
import org.kie.api.command.KieCommands;
import org.kie.api.runtime.ExecutionResults;
import org.kie.server.api.model.ServiceResponse;
import org.kie.server.api.model.instance.ProcessInstance;
import org.kie.server.api.model.instance.TaskAttachment;
import org.kie.server.api.model.instance.TaskInstance;
import org.kie.server.api.model.instance.TaskSummary;
import org.kie.server.client.KieServicesClient;
import org.kie.server.client.ProcessServicesClient;
import org.kie.server.client.QueryServicesClient;
import org.kie.server.client.RuleServicesClient;
import org.kie.server.client.UserTaskServicesClient;
    private static KieCommands commandsFactory = KieServices.get().getCommands();
    
    private JBPMConfiguration configuration;
    private KieServicesClient kieServicesClient;
    

    public JBPMProducer(JBPMEndpoint endpoint, KieServicesClient kieServicesClient) {
        this.kieServicesClient = kieServicesClient;        
        super.doStop();        
        getOperation(exchange).execute(kieServicesClient, configuration, exchange);
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class);
                Long processInstance = processClient.startProcess(configuration.getDeploymentId(), getProcessId(configuration, exchange), getParameters(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class);
                processClient.abortProcessInstance(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange)));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class);
                    processClient.signalProcessInstance(configuration.getDeploymentId(), processInstanceId, getEventType(configuration, exchange), getEvent(configuration, exchange));
                    processClient.signal(configuration.getDeploymentId(), getEventType(configuration, exchange), getEvent(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class);
                ProcessInstance processInstance = processClient.getProcessInstance(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange)));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                QueryServicesClient queryClient = kieServicesClient.getServicesClient(QueryServicesClient.class);
                Collection<ProcessInstance> processInstances = queryClient.findProcessInstances(getPage(configuration, exchange), getPageSize(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                RuleServicesClient ruleClient = kieServicesClient.getServicesClient(RuleServicesClient.class);
                List<Command<?>> commands = new ArrayList<Command<?>>();
                BatchExecutionCommand executionCommand = commandsFactory.newBatchExecution(commands);
                
                    commands.add(commandsFactory.newFireAllRules(max));
                    commands.add(commandsFactory.newFireAllRules());
                ServiceResponse<ExecutionResults> reply = ruleClient.executeCommandsWithResults(configuration.getDeploymentId(), executionCommand);                
                setResult(exchange, reply.getResult());
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                RuleServicesClient ruleClient = kieServicesClient.getServicesClient(RuleServicesClient.class);
                List<Command<?>> commands = new ArrayList<Command<?>>();
                BatchExecutionCommand executionCommand = commandsFactory.newBatchExecution(commands);
                String identifier = getIdentifier(configuration, exchange);
                commands.add(commandsFactory.newGetGlobal(identifier, identifier));

                ServiceResponse<ExecutionResults> reply = ruleClient.executeCommandsWithResults(configuration.getDeploymentId(), executionCommand);  
                setResult(exchange, reply.getResult().getValue(identifier));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                RuleServicesClient ruleClient = kieServicesClient.getServicesClient(RuleServicesClient.class);
                List<Command<?>> commands = new ArrayList<Command<?>>();
                BatchExecutionCommand executionCommand = commandsFactory.newBatchExecution(commands);

                commands.add(commandsFactory.newSetGlobal(getIdentifier(configuration, exchange), getValue(configuration, exchange)));

                ruleClient.executeCommandsWithResults(configuration.getDeploymentId(), executionCommand);                
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class);
                processClient.abortWorkItem(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange)), safe(getWorkItemId(configuration, exchange)));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class);
                processClient.completeWorkItem(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange)), safe(getWorkItemId(configuration, exchange)), getParameters(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.activateTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.claimTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.completeAutoProgress(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getParameters(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.delegateTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getTargetUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.exitTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.failTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getParameters(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                TaskAttachment attachment = taskClient.getTaskAttachmentById(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), safe(getAttachmentId(configuration, exchange)));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                List<TaskSummary> taskSummaries = taskClient.findTasksAssignedAsBusinessAdministrator(getUserId(configuration, exchange), getPage(configuration, exchange), getPageSize(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                List<TaskSummary> taskSummaries = taskClient.findTasksAssignedAsPotentialOwner(getUserId(configuration, exchange), getStatuses(configuration, exchange), getPage(configuration, exchange), getPageSize(configuration, exchange));
                setResult(exchange, taskSummaries);
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                TaskInstance task = taskClient.findTaskByWorkItemId(safe(getWorkItemId(configuration, exchange)));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                TaskInstance task = taskClient.findTaskById(safe(getTaskId(configuration, exchange)));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                Map<String, Object> content = taskClient.getTaskOutputContentByTaskId(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)));
                setResult(exchange, content);
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                List<TaskSummary> processInstanceIds = taskClient.findTasksByStatusByProcessInstanceId(safe(getProcessInstanceId(configuration, exchange)), Collections.emptyList(),
                        getPage(configuration, exchange), getPageSize(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                List<TaskSummary> taskSummaryList = taskClient.findTasksByStatusByProcessInstanceId(
                        getPage(configuration, exchange), getPageSize(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                List<TaskSummary> summaryList = taskClient.findTasksOwned(getUserId(configuration, exchange), getPage(configuration, exchange), getPageSize(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.nominateTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getEntities(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.releaseTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.resumeTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.skipTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.startTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.stopTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
            void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {
                UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class);
                taskClient.suspendTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange));
        List<String> getStatuses(JBPMConfiguration configuration, Exchange exchange) {
            List<String> statusList = exchange.getIn().getHeader(JBPMConstants.STATUS_LIST, List.class);
        List<String> getEntities(JBPMConfiguration configuration, Exchange exchange) {
            List<String> entityList = exchange.getIn().getHeader(JBPMConstants.ENTITY_LIST, List.class);
        Integer getPage(JBPMConfiguration configuration, Exchange exchange) {
            Integer page = exchange.getIn().getHeader(JBPMConstants.RESULT_PAGE, Integer.class);
            if (page == null) {
                page = configuration.getPage();
            return page;
        }
        
        Integer getPageSize(JBPMConfiguration configuration, Exchange exchange) {
            Integer pageSize = exchange.getIn().getHeader(JBPMConstants.RESULT_PAGE_SIZE, Integer.class);
            if (pageSize == null) {
                pageSize = configuration.getPageSize();
            }
            return pageSize;
        abstract void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange);
