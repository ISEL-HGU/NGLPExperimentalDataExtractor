import io.nessus.ipfs.client.DefaultIPFSClient;
import io.nessus.ipfs.client.IPFSException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
    public static final long DEFAULT_TIMEOUT = 10000L;
    
    private static final Logger LOG = LoggerFactory.getLogger(IPFSComponent.class);
    private final IPFSConfiguration config;
    private IPFSClient client;

    public IPFSEndpoint(String uri, IPFSComponent component, IPFSConfiguration config) {
        this.config = config;
        this.client = createClient(config);
    public IPFSClient getIPFSClient() {
        return client;
    }

    public void setClient(IPFSClient client) {
        this.client = client;
    }

    @Override
    protected void doStart() throws Exception {
        super.doStart();
        try {
            client.connect();
        } catch (IPFSException ex) {
            LOG.warn(ex.getMessage());
        }
    }
    
        return config;
        String cmd = config.getIpfsCmd();
            return future.get(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);
            return future.get(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);
        if (!client.hasConnection()) {
            client.connect();
        }
        return client;
    }
    
    private IPFSClient createClient(IPFSConfiguration config) {
        IPFSClient ipfsClient = new DefaultIPFSClient(config.getIpfsHost(), config.getIpfsPort());
        return ipfsClient;
