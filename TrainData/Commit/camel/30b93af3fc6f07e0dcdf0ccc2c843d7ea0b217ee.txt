import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.util.HashMap;
import java.util.Map;
import org.apache.camel.support.ExchangeHelper;
    private boolean useTempFile;
        this(false);

        this(preserveFolderStructure, useFilenameHeader, false);
    }

    /**
     * @param preserveFolderStructure if true, the folder structure is preserved when the source is
     * a type of {@link GenericFileMessage}.  If used with a file, use recursive=true.
     * @param useFilenameHeader if true, the filename header will be used to name aggregated byte arrays
     * within the ZIP file.
     * @param useTempFile if true, the ZipFileSystem will use temporary files for zip manipulations instead of memory.
     */
    public ZipAggregationStrategy(boolean preserveFolderStructure, boolean useFilenameHeader, boolean useTempFile) {
        this.useTempFile = useTempFile;
                newZipFile(zipFile);
            } catch (IOException | URISyntaxException e) {

        String charset = ExchangeHelper.getCharsetName(newExchange, true);

                    addEntryToZip(zipFile, entryName, buffer, charset);

        GenericFile<File> genericFile = FileConsumer.asGenericFile(zipFile.getParent(), zipFile, charset, false);
        genericFile.bindToExchange(answer);

    private static void newZipFile(File zipFile) throws URISyntaxException, IOException {
        if (zipFile.exists()) {
            if (!zipFile.delete()) { // Delete, because ZipFileSystem needs to create file on its own (with correct END bytes in the file)
                throw new IOException("Cannot delete file "  zipFile);
        Map<String, String> env = new HashMap<>();
        env.put("create", Boolean.TRUE.toString());

        try (FileSystem ignored = FileSystems.newFileSystem(getZipURI(zipFile), env)) {
            //noop, just open and close FileSystem to initialize correct headers in file
        }
    private void addFileToZip(File zipFile, File file, String fileName) throws IOException, URISyntaxException {
        String entryName = fileName == null ? file.getName() : fileName;
        Map<String, String> env = new HashMap<>();
        env.put("useTempFile", Boolean.toString(this.useTempFile));
        try (FileSystem fs = FileSystems.newFileSystem(getZipURI(zipFile), env)) {
            Path dest = fs.getPath("/", entryName);
            Files.createDirectories(dest.getParent());
            Files.copy(file.toPath(), dest, StandardCopyOption.REPLACE_EXISTING);

    private void addEntryToZip(File zipFile, String entryName, byte[] buffer, String charset) throws IOException, URISyntaxException {
        Map<String, String> env = new HashMap<>();
        env.put("encoding", charset);
        env.put("useTempFile", Boolean.toString(this.useTempFile));
        try (FileSystem fs = FileSystems.newFileSystem(getZipURI(zipFile), env)) {
            Path dest = fs.getPath("/", entryName);
            Files.createDirectories(dest.getParent());
            Files.write(dest, buffer, StandardOpenOption.CREATE);
        }
    }

    private static URI getZipURI(File zipFile) throws URISyntaxException {
        return new URI("jar", zipFile.toURI().toString(),  null);
    }

