        private String optionPrefix;
         * Whether properties should be filtered by prefix.         *
         * Note that the prefix is removed from the key before the property is bound.
         */
        public Builder withOptionPrefix(String optionPrefix) {
            this.optionPrefix = optionPrefix;
            return this;
        }

        /**
            return bindProperties(camelContext, target, properties, optionPrefix, nesting, deepNesting, fluentBuilder, reference, placeholder);
        return bindProperties(camelContext, target, properties, null);
     * Binds the properties with the given prefix to the target object, and removes the property that was bound from properties.
     * Note that the prefix is removed from the key before the property is bound.
     *
     * @param camelContext  the camel context
     * @param target        the target object
     * @param properties    the properties where the bound properties will be removed from
     * @param optionPrefix  the prefix used to filter properties
     * @return              true if one or more properties was bound
     */
    public static boolean bindProperties(CamelContext camelContext, Object target, Map<String, Object> properties, String optionPrefix) {
        return bindProperties(camelContext, target, properties, optionPrefix, true, true, true, true, true);
    }

    /**
     * Binds the properties with the given prefix to the target object, and removes the property that was bound from properties.

        return bindProperties(camelContext, target, properties, null, nesting, deepNesting, fluentBuilder, reference, placeholder);
    }

    /**
     * Binds the properties with the given prefix to the target object, and removes the property that was bound from properties.
     * Note that the prefix is removed from the key before the property is bound.
     *
     * @param camelContext  the camel context
     * @param target        the target object
     * @param properties    the properties where the bound properties will be removed from
     * @param optionPrefix  the prefix used to filter properties
     * @param nesting       whether nesting is in use
     * @param deepNesting   whether deep nesting is in use, where Camel will attempt to walk as deep as possible by creating new objects in the OGNL graph if
     *                      a property has a setter and the object can be created from a default no-arg constructor.
     * @param fluentBuilder whether fluent builder is allowed as a valid getter/setter
     * @param reference     whether reference parameter (syntax starts with #) is in use
     * @param placeholder   whether to use Camels property placeholder to resolve placeholders on keys and values
     * @return              true if one or more properties was bound
     */
    public static boolean bindProperties(CamelContext camelContext, Object target, Map<String, Object> properties,
                                         String optionPrefix,
                                         boolean nesting, boolean deepNesting, boolean fluentBuilder, boolean reference, boolean placeholder) {
            String key = entry.getKey();
            Object value = entry.getValue();

            if (isNotEmpty(optionPrefix)) {
                if (!key.startsWith(optionPrefix)) {
                    continue;
                }

                key = key.substring(optionPrefix.length());
            }

            if (entry != null) {
                if (bindProperty(camelContext, target, key, value, nesting, deepNesting, fluentBuilder, reference, placeholder)) {
                    iter.remove();
                    rc = true;
                }
