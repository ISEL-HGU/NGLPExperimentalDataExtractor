import java.util.concurrent.Phaser;
import java.util.concurrent.TimeoutException;
    private static final int DEFAULT_TERMINATION_TIMEOUT = 10;

    private Phaser inflightRequests;

    private long terminationTimeout;

        SalesforceHttpClient httpClient) throws SalesforceException {
        this(version, session, httpClient, DEFAULT_TERMINATION_TIMEOUT);
    }

    AbstractClientBase(String version, SalesforceSession session,
                              SalesforceHttpClient httpClient, int terminationTimeout) throws SalesforceException {
        this.terminationTimeout = terminationTimeout;

        inflightRequests = new Phaser(1);
        inflightRequests.arrive();
        if (!inflightRequests.isTerminated()) {
            try {
                inflightRequests.awaitAdvanceInterruptibly(0, terminationTimeout, TimeUnit.SECONDS);
            } catch (InterruptedException | TimeoutException ignored) {
                // exception is ignored
            }
        }

        inflightRequests.register();
                try {
                    Response response = result.getResponse();
                    if (result.isFailed()) {
                        // Failure!!!
                        // including Salesforce errors reported as exception from SalesforceSecurityHandler
                        Throwable failure = result.getFailure();
                        if (failure instanceof SalesforceException) {
                            callback.onResponse(null, (SalesforceException) failure);
                        } else {
                            final String msg = String.format("Unexpected error {%s:%s} executing {%s:%s}",
                                response.getStatus(), response.getReason(), request.getMethod(), request.getURI());
                            callback.onResponse(null, new SalesforceException(msg, response.getStatus(), failure));
                        // HTTP error status
                        final int status = response.getStatus();
                        SalesforceHttpRequest request = (SalesforceHttpRequest) ((SalesforceHttpRequest) result.getRequest())
                            .getConversation()
                            .getAttribute(SalesforceSecurityHandler.AUTHENTICATION_REQUEST_ATTRIBUTE);

                        if (status == HttpStatus.BAD_REQUEST_400 && request != null) {
                            // parse login error
                            ContentResponse contentResponse = new HttpContentResponse(response, getContent(), getMediaType(), getEncoding());
                            try {

                                session.parseLoginResponse(contentResponse, getContentAsString());
                                final String msg = String.format("Unexpected Error {%s:%s} executing {%s:%s}",
                                    status, response.getReason(), request.getMethod(), request.getURI());
                                callback.onResponse(null, new SalesforceException(msg, null));

                            } catch (SalesforceException e) {

                                final String msg = String.format("Error {%s:%s} executing {%s:%s}",
                                    status, response.getReason(), request.getMethod(), request.getURI());
                                callback.onResponse(null, new SalesforceException(msg, response.getStatus(), e));

                            }
                        } else if (status < HttpStatus.OK_200 || status >= HttpStatus.MULTIPLE_CHOICES_300) {
                            // Salesforce HTTP failure!
                            final SalesforceException exception = createRestException(response, getContentAsInputStream());

                            // for APIs that return body on status 400, such as Composite API we need content as well
                            callback.onResponse(getContentAsInputStream(), exception);
                        } else {

                            // Success!!!
                            callback.onResponse(getContentAsInputStream(), null);
                        }
                } finally {
                    inflightRequests.arriveAndDeregister();
