        AbstractHttpEntity httpEntity;

                if (content == null) { // actions may have no input
                    httpEntity = new ByteArrayEntity(new byte[0]);
                    httpEntity = writeContent(uriInfo, content);
                httpEntity = writeContent(uriInfo, content);
            final List<Olingo4BatchRequest> batchParts = (List<Olingo4BatchRequest>) content;
            final InputStream requestStream = serializeBatchRequest(edm, batchParts, BOUNDARY_DOUBLE_DASH  boundary);
            httpEntity = writeContent(requestStream);
    private AbstractHttpEntity writeContent(UriInfo uriInfo, Object content) throws ODataException {
        AbstractHttpEntity httpEntity;

        if (content instanceof ClientEntity) {
            final InputStream requestStream = odataWriter.writeEntity((ClientEntity) content, getResourceContentType(uriInfo));
            httpEntity = writeContent(requestStream);
        } else if (content instanceof String) {
            httpEntity = new StringEntity((String) content, org.apache.http.entity.ContentType.APPLICATION_JSON);
        } else {
            throw new ODataException("Unsupported content type: "  content);
        }

        httpEntity.setChunked(false);

        return httpEntity;
    }

    private AbstractHttpEntity writeContent(InputStream inputStream) throws ODataException {
        AbstractHttpEntity httpEntity;
        
        try {
            httpEntity = new ByteArrayEntity(IOUtils.toByteArray(inputStream));
        } catch (IOException e) {
            throw new ODataException("Error during converting input stream to byte array", e);
        }

        httpEntity.setChunked(false);

        return httpEntity;
    }

