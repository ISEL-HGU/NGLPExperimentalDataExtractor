    @Override
    public List<Map<String, String>> getTransformers(String camelContextName) throws Exception {
        if (jolokia == null) {
            throw new IllegalStateException("Need to connect to remote jolokia first");
        }

        List<Map<String, String>> answer = new ArrayList<Map<String, String>>();

        ObjectName found = lookupCamelContext(camelContextName);
        if (found != null) {
            String pattern = String.format("%s:context=%s,type=services,name=DefaultTransformerRegistry", found.getDomain(), found.getKeyProperty("context"));
            ObjectName on = ObjectName.getInstance(pattern);

            J4pExecResponse response = jolokia.execute(new J4pExecRequest(on, "listTransformers()"));
            if (response != null) {
                JSONObject data = response.getValue();
                if (data != null) {
                    for (Object obj : data.values()) {
                        JSONObject data2 = (JSONObject) obj;
                        JSONObject service = (JSONObject) data2.values().iterator().next();

                        Map<String, String> row = new LinkedHashMap<String, String>();
                        row.put("string", asString(service.get("string")));
                        row.put("static", asString(service.get("static")));
                        row.put("dynamic", asString(service.get("dynamic")));
                        answer.add(row);
                    }
                }
            }

            // sort the list
            Collections.sort(answer, new Comparator<Map<String, String>>() {
                @Override
                public int compare(Map<String, String> service1, Map<String, String> service2) {
                    String url1 = service1.get("string");
                    String url2 = service2.get("string");
                    return url1.compareTo(url2);
                }
            });
        }
        return answer;
    }

