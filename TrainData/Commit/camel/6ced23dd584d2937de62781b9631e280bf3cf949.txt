import java.io.IOError;
import java.util.function.Function;
import java.util.function.Supplier;
import static org.apache.camel.maven.packaging.AbstractGeneratorMojo.updateResource;
        executeAll();
    private void executeAll() throws MojoExecutionException, MojoFailureException {
        Map<File, Supplier<String>> files =
                PackageHelper.findJsonFiles(buildDir, p -> p.isDirectory() || p.getName().endsWith(".json"))
                        .stream().collect(Collectors.toMap(Function.identity(), s -> cache(() -> loadJson(s))));
        executeModels(files);
        executeComponent(files);
        executeDataFormat(files);
        executeLanguage(files);
    }

    private static String loadJson(File file) {
        try (InputStream is = new FileInputStream(file)) {
            return loadText(is);
        } catch (IOException e) {
            throw new IOError(e);
        }
    }

    private static <T> Supplier<T> cache(Supplier<T> supplier) {
        return new Supplier<T>() {
            T value;
            @Override
            public T get() {
                if (value == null) {
                    value = supplier.get();
                }
                return value;
            }
        };
    }

    private void executeModels(Map<File, Supplier<String>> files) throws MojoExecutionException, MojoFailureException {
    private void executeComponent(Map<File, Supplier<String>> jsonFiles) throws MojoExecutionException, MojoFailureException {
    private void executeDataFormat(Map<File, Supplier<String>> jsonFiles) throws MojoExecutionException, MojoFailureException {
    private void executeLanguage(Map<File, Supplier<String>> jsonFiles) throws MojoExecutionException, MojoFailureException {
    private static String loadModelJson(Map<File, Supplier<String>> jsonFiles, String modelName) {
        return loadJsonOfType(jsonFiles, modelName, "model");
    private static String loadComponentJson(Map<File, Supplier<String>> jsonFiles, String componentName) {
        return loadJsonOfType(jsonFiles, componentName, "component");
    private static String loadDataFormatJson(Map<File, Supplier<String>> jsonFiles, String dataFormatName) {
        return loadJsonOfType(jsonFiles, dataFormatName, "dataformat");
    private static String loadLanguageJson(Map<File, Supplier<String>> jsonFiles, String languageName) {
        return loadJsonOfType(jsonFiles, languageName, "language");
    }

    private static String loadJsonOfType(Map<File, Supplier<String>> jsonFiles, String modelName, String type) {
        for (Map.Entry<File, Supplier<String>> entry : jsonFiles.entrySet()) {
            if (entry.getKey().getName().equals(modelName  ".json")) {
                String json = entry.getValue().get();
                if (json.contains("\"kind\": \""  type  "\"")) {
                    return json;
            String header;
            try (InputStream is = getClass().getClassLoader().getResourceAsStream("license-header-java.txt")) {
                header = loadText(is);
            }
            String code = header  source;
            updateResource(null, target.toPath(), code);
