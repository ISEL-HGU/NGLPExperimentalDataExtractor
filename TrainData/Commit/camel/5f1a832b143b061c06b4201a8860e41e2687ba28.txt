    @SuppressWarnings("unchecked")
        List<String> componentOptions = null;
            componentOptions = (List) dto.get("componentOptions");
                createConnectorConfigurationSource(pkg, model, javaType, connectorScheme, componentOptions);
    private void createConnectorConfigurationSource(String packageName, ComponentModel model, String javaType,
                                                    String connectorScheme, List<String> componentOptions) throws MojoFailureException {
            // only include the options that has been explicit configured in the camel-connector.json file
            boolean accepted = false;
            if (componentOptions != null) {
                accepted = componentOptions.stream().anyMatch(o -> o.equals(option.getName()));
            }
            if (accepted) {
                String type = option.getJavaType();
                PropertySource<JavaClassSource> prop = javaClass.addProperty(type, option.getName());

                if ("true".equals(option.getDeprecated())) {
                    prop.getField().addAnnotation(Deprecated.class);
                    prop.getAccessor().addAnnotation(Deprecated.class);
                    prop.getMutator().addAnnotation(Deprecated.class);
                    // DeprecatedConfigurationProperty must be on getter when deprecated
                    prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);
                }
                if (!Strings.isBlank(option.getDescription())) {
                    prop.getField().getJavaDoc().setFullText(option.getDescription());
                }
                if (!Strings.isBlank(option.getDefaultValue())) {
                    if ("java.lang.String".equals(option.getJavaType())) {
                        prop.getField().setStringInitializer(option.getDefaultValue());
                    } else if ("long".equals(option.getJavaType()) || "java.lang.Long".equals(option.getJavaType())) {
                        // the value should be a Long number
                        String value = option.getDefaultValue()  "L";
                        prop.getField().setLiteralInitializer(value);
                    } else if ("integer".equals(option.getType()) || "boolean".equals(option.getType())) {
                        prop.getField().setLiteralInitializer(option.getDefaultValue());
                    } else if (!Strings.isBlank(option.getEnums())) {
                        String enumShortName = type.substring(type.lastIndexOf(".")  1);
                        prop.getField().setLiteralInitializer(enumShortName  "."  option.getDefaultValue());
                        javaClass.addImport(model.getJavaType());
                    }
