import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
        Map<StreamPayload<Exchange>, String> discardedMessages = null;
                Collection<StreamPayload<Exchange>> discarded = this.backpressureStrategy.update(buffer, message);
                if (discarded.iterator().hasNext()) {
                    discardedMessages = new HashMap<>();
                    for (StreamPayload<Exchange> ex : discarded) {
                        discardedMessages.put(ex, "Exchange "  ex.getItem()  " discarded by backpressure strategy "  this.backpressureStrategy);
                // acknowledge
                discardedMessages = Collections.singletonMap(message, "Exchange "  message.getItem()  " discarded: subscription closed");
        // discarding outside of mutex scope
        if (discardedMessages != null) {
            for (Map.Entry<StreamPayload<Exchange>, String> discarded : discardedMessages.entrySet()) {
                StreamPayload<Exchange> m = discarded.getKey();
                m.getCallback().processed(m.getItem(), new IllegalStateException(discarded.getValue()));
            }
