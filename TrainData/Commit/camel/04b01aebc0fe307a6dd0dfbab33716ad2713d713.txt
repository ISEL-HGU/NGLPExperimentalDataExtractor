
import org.json.simple.JsonObject;
import org.json.simple.Jsoner;
    @SuppressWarnings("unchecked")
        List<Map<String, String>> answer = new ArrayList<>();
        // convert into a List<Map<String, String>> structure which is expected as output from this parser
        JsonObject output = Jsoner.deserialize(json, new JsonObject());
        for (String key : output.keySet()) {
            Map row = output.getMap(key);
            if (key.equals(group)) {
                if (parseProperties) {
                    // flattern each entry in the row with name as they key, and its value as the content (its a map also)
                    for (Object obj : row.entrySet()) {
                        Map.Entry entry = (Map.Entry) obj;
                        Map<String, String> newRow = new LinkedHashMap();
                        newRow.put("name", entry.getKey().toString());
                        Map newData = transformMap((Map) entry.getValue());
                        newRow.putAll(newData);
                        answer.add(newRow);
                    }
                    // flattern each entry in the row as a list of single Map<key, value> elements
                    Map newData = transformMap(row);
                    for (Object obj : newData.entrySet()) {
                        Map.Entry entry = (Map.Entry) obj;
                        Map<String, String> newRow = new LinkedHashMap<>();
                        newRow.put(entry.getKey().toString(), entry.getValue().toString());
                        answer.add(newRow);
    private static Map<String, String> transformMap(Map jsonMap) {
        Map<String, String> answer = new LinkedHashMap<>();

        for (Object rowObj : jsonMap.entrySet()) {
            Map.Entry rowEntry = (Map.Entry) rowObj;
            // if its a list type then its an enum, and we need to parse it as a single line separated with comma
            // to be backwards compatible
            Object newValue = rowEntry.getValue();
            if (newValue instanceof List) {
                List list = (List) newValue;
                CollectionStringBuffer csb = new CollectionStringBuffer(",");
                for (Object line : list) {
                    csb.append(line);
                }
                newValue = csb.toString();
            }
            answer.put(rowEntry.getKey().toString(), newValue.toString());

        return answer;
