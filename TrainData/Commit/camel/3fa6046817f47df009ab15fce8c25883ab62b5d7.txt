    private final Map<String, RestletHost> restletHostRegistry = new HashMap<>();
    private final Map<String, MethodBasedRouter> routers = new HashMap<>();
        restletHostRegistry.clear();
        RestletHost host;
        synchronized (restletHostRegistry) {
            host = restletHostRegistry.get(key);
            if (host == null) {
                host = createRestletHost();
                host.configure(endpoint, component);
                restletHostRegistry.put(key, host);
                LOG.debug("Added host: {}", key);
                host.start();
    protected RestletHost createRestletHost() {
        RestletHostOptions options = new RestletHostOptions();

        if (getControllerDaemon() != null) {
            options.setControllerDaemon(getControllerDaemon());
        }
        if (getControllerSleepTimeMs() != null) {
            options.setControllerSleepTimeMs(getControllerSleepTimeMs());
        }
        if (getInboundBufferSize() != null) {
            options.setInboundBufferSize(getInboundBufferSize());
        }
        if (getMinThreads() != null) {
            options.setMinThreads(getMinThreads());
        }
        if (getMaxThreads() != null) {
            options.setMaxThreads(getMaxThreads());
        }
        if (getLowThreads() != null) {
            options.setLowThreads(getLowThreads());
        }
        if (getMaxQueued() != null) {
            options.setMaxQueued(getMaxQueued());
        }
        if (getMaxConnectionsPerHost() != null) {
            options.setMaxConnectionsPerHost(getMaxConnectionsPerHost());
        }
        if (getMaxTotalConnections() != null) {
            options.setMaxTotalConnections(getMaxTotalConnections());
        }
        if (getOutboundBufferSize() != null) {
            options.setOutboundBufferSize(getOutboundBufferSize());
        }
        if (getPersistingConnections() != null) {
            options.setPersistingConnections(getPersistingConnections());
        }
        if (getPipeliningConnections() != null) {
            options.setPipeliningConnections(getPipeliningConnections());
        }
        if (getThreadMaxIdleTimeMs() != null) {
            options.setThreadMaxIdleTimeMs(getThreadMaxIdleTimeMs());
        }
        if (getUseForwardedForHeader() != null) {
            options.setUseForwardedForHeader(getUseForwardedForHeader());
        }
        if (getReuseAddress() != null) {
            options.setReuseAddress(getReuseAddress());
        }

        return new DefaultRestletHost(options);
    }

