         * The action to do.
         * <code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.
        default SoroushBotEndpointConsumerBuilder action(SoroushAction action) {
            setProperty("action", action);
         * The action to do.
         * <code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.
        default SoroushBotEndpointConsumerBuilder action(String action) {
            setProperty("action", action);
            return this;
        }
        /**
         * Connection timeout in ms when connecting to soroush API.
         * The option is a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointConsumerBuilder connectionTimeout(
                int connectionTimeout) {
            setProperty("connectionTimeout", connectionTimeout);
            return this;
        }
        /**
         * Connection timeout in ms when connecting to soroush API.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointConsumerBuilder connectionTimeout(
                String connectionTimeout) {
            setProperty("connectionTimeout", connectionTimeout);
            return this;
        }
        /**
         * Maximum connection retry when fail to connect to soroush API, if the
         * quota is reached, MaximumConnectionRetryReachedException is thrown
         * for that message.
         * The option is a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointConsumerBuilder maxConnectionRetry(
                int maxConnectionRetry) {
            setProperty("maxConnectionRetry", maxConnectionRetry);
            return this;
        }
        /**
         * Maximum connection retry when fail to connect to soroush API, if the
         * quota is reached, MaximumConnectionRetryReachedException is thrown
         * for that message.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointConsumerBuilder maxConnectionRetry(
                String maxConnectionRetry) {
            setProperty("maxConnectionRetry", maxConnectionRetry);
         * The option is a <code>int</code> type.
                int concurrentConsumers) {
         * The option will be converted to a <code>int</code> type.
         * The option is a <code>int</code> type.
                int queueCapacityPerThread) {
         * The option will be converted to a <code>int</code> type.
         * The strategy to backoff in case of connection failure. Currently 3
         * strategies are supported: 1. Exponential (default): It multiply
         * retryWaitingTime by retryExponentialCoefficient after each connection
         * failure. 2. Linear: It increase retryWaitingTime by
         * retryLinearIncrement after each connection failure. 3. Fixed: Always
         * use retryWaitingTime as the time between retries.
         * The option is a <code>java.lang.String</code> type.
         * @group scheduling
        default SoroushBotEndpointConsumerBuilder backOffStrategy(
                String backOffStrategy) {
            setProperty("backOffStrategy", backOffStrategy);
         * Maximum amount of time (in millisecond) a thread wait before retrying
         * failed request.
         * The option is a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointConsumerBuilder maxRetryWaitingTime(
                long maxRetryWaitingTime) {
            setProperty("maxRetryWaitingTime", maxRetryWaitingTime);
         * Maximum amount of time (in millisecond) a thread wait before retrying
         * failed request.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointConsumerBuilder maxRetryWaitingTime(
                String maxRetryWaitingTime) {
            setProperty("maxRetryWaitingTime", maxRetryWaitingTime);
         * The timeout in millisecond to reconnect the existing getMessage
         * connection to ensure that the connection is always live and does not
         * dead without notifying the bot. this value should not be changed.
         * The option is a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointConsumerBuilder reconnectIdleConnectionTimeout(
                long reconnectIdleConnectionTimeout) {
            setProperty("reconnectIdleConnectionTimeout", reconnectIdleConnectionTimeout);
            return this;
        }
        /**
         * The timeout in millisecond to reconnect the existing getMessage
         * connection to ensure that the connection is always live and does not
         * dead without notifying the bot. this value should not be changed.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointConsumerBuilder reconnectIdleConnectionTimeout(
                String reconnectIdleConnectionTimeout) {
            setProperty("reconnectIdleConnectionTimeout", reconnectIdleConnectionTimeout);
            return this;
        }
        /**
         * Coefficient to compute back off time when using Exponential Back Off
         * strategy.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointConsumerBuilder retryExponentialCoefficient(
                long retryExponentialCoefficient) {
            setProperty("retryExponentialCoefficient", retryExponentialCoefficient);
            return this;
        }
        /**
         * Coefficient to compute back off time when using Exponential Back Off
         * strategy.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointConsumerBuilder retryExponentialCoefficient(
                String retryExponentialCoefficient) {
            setProperty("retryExponentialCoefficient", retryExponentialCoefficient);
            return this;
        }
        /**
         * The amount of time (in millisecond) which adds to waiting time when
         * using Linear back off strategy.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointConsumerBuilder retryLinearIncrement(
                long retryLinearIncrement) {
            setProperty("retryLinearIncrement", retryLinearIncrement);
            return this;
        }
        /**
         * The amount of time (in millisecond) which adds to waiting time when
         * using Linear back off strategy.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointConsumerBuilder retryLinearIncrement(
                String retryLinearIncrement) {
            setProperty("retryLinearIncrement", retryLinearIncrement);
            return this;
        }
        /**
         * Waiting time before retry failed request (Millisecond). If
         * backOffStrategy is not Fixed this is the based value for computing
         * back off waiting time. the first retry is always happen immediately
         * after failure and retryWaitingTime do not apply to the first retry.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointConsumerBuilder retryWaitingTime(
                long retryWaitingTime) {
            setProperty("retryWaitingTime", retryWaitingTime);
            return this;
        }
        /**
         * Waiting time before retry failed request (Millisecond). If
         * backOffStrategy is not Fixed this is the based value for computing
         * back off waiting time. the first retry is always happen immediately
         * after failure and retryWaitingTime do not apply to the first retry.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointConsumerBuilder retryWaitingTime(
                String retryWaitingTime) {
            setProperty("retryWaitingTime", retryWaitingTime);
         * The action to do.
         * <code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.
        default SoroushBotEndpointProducerBuilder action(SoroushAction action) {
            setProperty("action", action);
         * The action to do.
         * <code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.
        default SoroushBotEndpointProducerBuilder action(String action) {
            setProperty("action", action);
            return this;
        }
        /**
         * Connection timeout in ms when connecting to soroush API.
         * The option is a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointProducerBuilder connectionTimeout(
                int connectionTimeout) {
            setProperty("connectionTimeout", connectionTimeout);
            return this;
        }
        /**
         * Connection timeout in ms when connecting to soroush API.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointProducerBuilder connectionTimeout(
                String connectionTimeout) {
            setProperty("connectionTimeout", connectionTimeout);
            return this;
        }
        /**
         * Maximum connection retry when fail to connect to soroush API, if the
         * quota is reached, MaximumConnectionRetryReachedException is thrown
         * for that message.
         * The option is a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointProducerBuilder maxConnectionRetry(
                int maxConnectionRetry) {
            setProperty("maxConnectionRetry", maxConnectionRetry);
            return this;
        }
        /**
         * Maximum connection retry when fail to connect to soroush API, if the
         * quota is reached, MaximumConnectionRetryReachedException is thrown
         * for that message.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        default SoroushBotEndpointProducerBuilder maxConnectionRetry(
                String maxConnectionRetry) {
            setProperty("maxConnectionRetry", maxConnectionRetry);
            return this;
        }
        /**
         * Automatically download SoroushMessage.fileUrl and
         * SoroushMessage.thumbnailUrl if exists for the message and store them
         * in SoroushMessage.file and SoroushMessage.thumbnail field.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder autoDownload(
                boolean autoDownload) {
            setProperty("autoDownload", autoDownload);
            return this;
        }
        /**
         * Automatically download SoroushMessage.fileUrl and
         * SoroushMessage.thumbnailUrl if exists for the message and store them
         * in SoroushMessage.file and SoroushMessage.thumbnail field.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder autoDownload(
                String autoDownload) {
            setProperty("autoDownload", autoDownload);
            return this;
        }
        /**
         * Automatically upload attachments when a message goes to the
         * sendMessage endpoint and the SoroushMessage.file
         * (SoroushMessage.thumbnail) has been set and
         * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is null.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder autoUploadFile(
                boolean autoUploadFile) {
            setProperty("autoUploadFile", autoUploadFile);
            return this;
        }
        /**
         * Automatically upload attachments when a message goes to the
         * sendMessage endpoint and the SoroushMessage.file
         * (SoroushMessage.thumbnail) has been set and
         * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is null.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder autoUploadFile(
                String autoUploadFile) {
            setProperty("autoUploadFile", autoUploadFile);
            return this;
        }
        /**
         * If true, when downloading an attached file, thumbnail will be
         * downloaded if provided in the message. Otherwise, only the file will
         * be downloaded.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder downloadThumbnail(
                boolean downloadThumbnail) {
            setProperty("downloadThumbnail", downloadThumbnail);
            return this;
        }
        /**
         * If true, when downloading an attached file, thumbnail will be
         * downloaded if provided in the message. Otherwise, only the file will
         * be downloaded.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder downloadThumbnail(
                String downloadThumbnail) {
            setProperty("downloadThumbnail", downloadThumbnail);
            return this;
        }
        /**
         * Force to download SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl)
         * if exists, even if the SoroushMessage.file(SoroushMessage.thumbnail)
         * was not null in that message.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder forceDownload(
                boolean forceDownload) {
            setProperty("forceDownload", forceDownload);
            return this;
        }
        /**
         * Force to download SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl)
         * if exists, even if the SoroushMessage.file(SoroushMessage.thumbnail)
         * was not null in that message.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder forceDownload(
                String forceDownload) {
            setProperty("forceDownload", forceDownload);
            return this;
        }
        /**
         * Force to upload SoroushMessage.file(SoroushMessage.thumbnail) if
         * exists, even if the
         * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is not null in
         * the message.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder forceUpload(
                boolean forceUpload) {
            setProperty("forceUpload", forceUpload);
            return this;
        }
        /**
         * Force to upload SoroushMessage.file(SoroushMessage.thumbnail) if
         * exists, even if the
         * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is not null in
         * the message.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default SoroushBotEndpointProducerBuilder forceUpload(String forceUpload) {
            setProperty("forceUpload", forceUpload);
         * The strategy to backoff in case of connection failure. Currently 3
         * strategies are supported: 1. Exponential (default): It multiply
         * retryWaitingTime by retryExponentialCoefficient after each connection
         * failure. 2. Linear: It increase retryWaitingTime by
         * retryLinearIncrement after each connection failure. 3. Fixed: Always
         * use retryWaitingTime as the time between retries.
         * The option is a <code>java.lang.String</code> type.
         * @group scheduling
        default SoroushBotEndpointProducerBuilder backOffStrategy(
                String backOffStrategy) {
            setProperty("backOffStrategy", backOffStrategy);
         * Maximum amount of time (in millisecond) a thread wait before retrying
         * failed request.
         * The option is a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointProducerBuilder maxRetryWaitingTime(
                long maxRetryWaitingTime) {
            setProperty("maxRetryWaitingTime", maxRetryWaitingTime);
         * Maximum amount of time (in millisecond) a thread wait before retrying
         * failed request.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointProducerBuilder maxRetryWaitingTime(
                String maxRetryWaitingTime) {
            setProperty("maxRetryWaitingTime", maxRetryWaitingTime);
         * The timeout in millisecond to reconnect the existing getMessage
         * connection to ensure that the connection is always live and does not
         * dead without notifying the bot. this value should not be changed.
         * The option is a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointProducerBuilder reconnectIdleConnectionTimeout(
                long reconnectIdleConnectionTimeout) {
            setProperty("reconnectIdleConnectionTimeout", reconnectIdleConnectionTimeout);
            return this;
        }
        /**
         * The timeout in millisecond to reconnect the existing getMessage
         * connection to ensure that the connection is always live and does not
         * dead without notifying the bot. this value should not be changed.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointProducerBuilder reconnectIdleConnectionTimeout(
                String reconnectIdleConnectionTimeout) {
            setProperty("reconnectIdleConnectionTimeout", reconnectIdleConnectionTimeout);
            return this;
        }
        /**
         * Coefficient to compute back off time when using Exponential Back Off
         * strategy.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointProducerBuilder retryExponentialCoefficient(
                long retryExponentialCoefficient) {
            setProperty("retryExponentialCoefficient", retryExponentialCoefficient);
            return this;
        }
        /**
         * Coefficient to compute back off time when using Exponential Back Off
         * strategy.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointProducerBuilder retryExponentialCoefficient(
                String retryExponentialCoefficient) {
            setProperty("retryExponentialCoefficient", retryExponentialCoefficient);
            return this;
        }
        /**
         * The amount of time (in millisecond) which adds to waiting time when
         * using Linear back off strategy.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointProducerBuilder retryLinearIncrement(
                long retryLinearIncrement) {
            setProperty("retryLinearIncrement", retryLinearIncrement);
            return this;
        }
        /**
         * The amount of time (in millisecond) which adds to waiting time when
         * using Linear back off strategy.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointProducerBuilder retryLinearIncrement(
                String retryLinearIncrement) {
            setProperty("retryLinearIncrement", retryLinearIncrement);
            return this;
        }
        /**
         * Waiting time before retry failed request (Millisecond). If
         * backOffStrategy is not Fixed this is the based value for computing
         * back off waiting time. the first retry is always happen immediately
         * after failure and retryWaitingTime do not apply to the first retry.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointProducerBuilder retryWaitingTime(
                long retryWaitingTime) {
            setProperty("retryWaitingTime", retryWaitingTime);
            return this;
        }
        /**
         * Waiting time before retry failed request (Millisecond). If
         * backOffStrategy is not Fixed this is the based value for computing
         * back off waiting time. the first retry is always happen immediately
         * after failure and retryWaitingTime do not apply to the first retry.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointProducerBuilder retryWaitingTime(
                String retryWaitingTime) {
            setProperty("retryWaitingTime", retryWaitingTime);
         * The action to do.
         * <code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.
        default SoroushBotEndpointBuilder action(SoroushAction action) {
            setProperty("action", action);
         * The action to do.
         * <code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.
        default SoroushBotEndpointBuilder action(String action) {
            setProperty("action", action);
         * The option is a <code>int</code> type.
         * @group common
                int connectionTimeout) {
         * The option will be converted to a <code>int</code> type.
         * @group common
         * The option is a <code>int</code> type.
         * @group common
                int maxConnectionRetry) {
         * The option will be converted to a <code>int</code> type.
         * @group common
         * The strategy to backoff in case of connection failure. Currently 3
         * strategies are supported: 1. Exponential (default): It multiply
         * retryWaitingTime by retryExponentialCoefficient after each connection
         * failure. 2. Linear: It increase retryWaitingTime by
         * retryLinearIncrement after each connection failure. 3. Fixed: Always
         * use retryWaitingTime as the time between retries.
         * The option is a <code>java.lang.String</code> type.
         * @group scheduling
        default SoroushBotEndpointBuilder backOffStrategy(String backOffStrategy) {
            setProperty("backOffStrategy", backOffStrategy);
         * Maximum amount of time (in millisecond) a thread wait before retrying
         * failed request.
         * The option is a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointBuilder maxRetryWaitingTime(
                long maxRetryWaitingTime) {
            setProperty("maxRetryWaitingTime", maxRetryWaitingTime);
         * Maximum amount of time (in millisecond) a thread wait before retrying
         * failed request.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointBuilder maxRetryWaitingTime(
                String maxRetryWaitingTime) {
            setProperty("maxRetryWaitingTime", maxRetryWaitingTime);
         * The timeout in millisecond to reconnect the existing getMessage
         * connection to ensure that the connection is always live and does not
         * dead without notifying the bot. this value should not be changed.
         * The option is a <code>long</code> type.
         * @group scheduling
        default SoroushBotEndpointBuilder reconnectIdleConnectionTimeout(
                long reconnectIdleConnectionTimeout) {
            setProperty("reconnectIdleConnectionTimeout", reconnectIdleConnectionTimeout);
            return this;
        }
        /**
         * The timeout in millisecond to reconnect the existing getMessage
         * connection to ensure that the connection is always live and does not
         * dead without notifying the bot. this value should not be changed.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointBuilder reconnectIdleConnectionTimeout(
                String reconnectIdleConnectionTimeout) {
            setProperty("reconnectIdleConnectionTimeout", reconnectIdleConnectionTimeout);
            return this;
        }
        /**
         * Coefficient to compute back off time when using Exponential Back Off
         * strategy.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointBuilder retryExponentialCoefficient(
                long retryExponentialCoefficient) {
            setProperty("retryExponentialCoefficient", retryExponentialCoefficient);
            return this;
        }
        /**
         * Coefficient to compute back off time when using Exponential Back Off
         * strategy.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointBuilder retryExponentialCoefficient(
                String retryExponentialCoefficient) {
            setProperty("retryExponentialCoefficient", retryExponentialCoefficient);
            return this;
        }
        /**
         * The amount of time (in millisecond) which adds to waiting time when
         * using Linear back off strategy.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointBuilder retryLinearIncrement(
                long retryLinearIncrement) {
            setProperty("retryLinearIncrement", retryLinearIncrement);
            return this;
        }
        /**
         * The amount of time (in millisecond) which adds to waiting time when
         * using Linear back off strategy.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointBuilder retryLinearIncrement(
                String retryLinearIncrement) {
            setProperty("retryLinearIncrement", retryLinearIncrement);
            return this;
        }
        /**
         * Waiting time before retry failed request (Millisecond). If
         * backOffStrategy is not Fixed this is the based value for computing
         * back off waiting time. the first retry is always happen immediately
         * after failure and retryWaitingTime do not apply to the first retry.
         * The option is a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointBuilder retryWaitingTime(long retryWaitingTime) {
            setProperty("retryWaitingTime", retryWaitingTime);
            return this;
        }
        /**
         * Waiting time before retry failed request (Millisecond). If
         * backOffStrategy is not Fixed this is the based value for computing
         * back off waiting time. the first retry is always happen immediately
         * after failure and retryWaitingTime do not apply to the first retry.
         * The option will be converted to a <code>long</code> type.
         * @group scheduling
         */
        default SoroushBotEndpointBuilder retryWaitingTime(
                String retryWaitingTime) {
            setProperty("retryWaitingTime", retryWaitingTime);
     * <code>org.apache.camel.component.soroushbot.models.SoroushAction</code>
     * enum.
    enum SoroushAction {
