import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
    private static final Logger LOG = LoggerFactory.getLogger(RouteFilters.class);

    private final String includesText;
    private final String excludesText;
    private final String[] includes;
    private final String[] excludes;
     * Used for filtering routes routes matching the given pattern, which follows the following rules:
     * For example to only include routes which starts with foo in their route id's, use: include=foo&#42;
     * And to exclude routes which starts from JMS endpoints, use: exclude=jms:&#42;
     *
     * Multiple patterns can be separated by comma, for example to exclude both foo and bar routes, use: exclude=foo&#42;,bar&#42;
     *
     * Exclude takes precedence over include.
     *
     * @param include  the include pattern
     * @param exclude  the exclude pattern
    public static RouteFilters filterByPattern(String include, String exclude) {
        return new RouteFilters(include, exclude);
    private RouteFilters(String include, String exclude) {
        this.includesText = include;
        this.excludesText = exclude;
        this.includes = include != null ? include.split(",") : null;
        this.excludes = exclude != null ? exclude.split(",") : null;
        String id = route.getId();
        String uri = route.getInput() != null ? route.getInput().getEndpointUri() : null;

        boolean answer = filter(route, id, uri);
        LOG.debug("Route filter: include={}, exclude={}, id={}, from={} -> {}", includesText, excludesText, id, uri, answer);
        return answer;
    }

    private boolean filter(RouteDefinition route, String id, String uri) {
        // exclude takes precedence
        if (excludes != null) {
            for (String part : excludes) {
                if (PatternHelper.matchPattern(id, part) || PatternHelper.matchPattern(uri, part)) {
                    return false;
                }
            }

        if (includes != null) {
            for (String part : includes) {
                if (PatternHelper.matchPattern(id, part) || PatternHelper.matchPattern(uri, part)) {
                    match = true;
                    break;
                }
            }
        } else {
            // if include has not been set then, we assume its matched as it was not excluded
            match = true;

