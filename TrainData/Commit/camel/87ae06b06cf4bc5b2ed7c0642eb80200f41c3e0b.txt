import java.io.StringWriter;
import java.util.HashMap;
import java.util.Properties;
import org.apache.http.Header;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.context.Context;
import org.apache.velocity.runtime.RuntimeConstants;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
    
    private VelocityEngine velocityEngine;
                failureFields, errorFields, warningFields, extensionFields, charset));
                                                   Map<String, String> extensionFields,
                                                   String charset)
        String mdnDescription = createMdnDescription(request, response, dispositionMode, dispositionType,
                dispositionModifier, failureFields, errorFields, warningFields, extensionFields, charset);
        return new TextPlainEntity(mdnDescription, AS2Charset.US_ASCII, AS2TransferEncoding.SEVENBIT, false);
    
    private String createMdnDescription(HttpEntityEnclosingRequest request,
                                        HttpResponse response,
                                        DispositionMode dispositionMode,
                                        AS2DispositionType dispositionType,
                                        AS2DispositionModifier dispositionModifier,
                                        String[] failureFields,
                                        String[] errorFields,
                                        String[] warningFields,
                                        Map<String, String> extensionFields,
                                        String charset) throws HttpException {
        
        try {
            Context context = new VelocityContext();
            context.put("request", request);
            Map<String,Object> requestHeaders = new HashMap<>();
            for(Header header: request.getAllHeaders()) {
                requestHeaders.put(header.getName(), header.getValue());
            }
            context.put("requestHeaders", requestHeaders);
            
            Map<String,Object> responseHeaders = new HashMap<>();
            for(Header header: response.getAllHeaders()) {
                responseHeaders.put(header.getName(), header.getValue());
            }
            context.put("responseHeaders", responseHeaders);
            
            context.put("dispositionMode", dispositionMode);
            context.put("dispositionType", dispositionType);
            context.put("dispositionModifier", dispositionModifier);
            context.put("failureFields", failureFields);
            context.put("errorFields", errorFields);
            context.put("warningFields", warningFields);
            context.put("extensionFields", extensionFields);
            
            Template template = getVelocityEngine().getTemplate("mdnDescription.vm", charset);
            StringWriter sw = new StringWriter();
            template.merge(context, sw);
            
            return sw.toString();
        } catch (Exception e) {
            throw new HttpException("failed to create MDN description", e);
        }
    }
    
    private synchronized VelocityEngine getVelocityEngine() throws Exception {
        if (velocityEngine == null) {
            velocityEngine = new VelocityEngine();
            
            // set default properties
            Properties properties = new Properties();
            properties.setProperty(RuntimeConstants.RESOURCE_LOADER, "class");
            properties.setProperty("class.resource.loader.description", "Camel Velocity Classpath Resource Loader");
            properties.setProperty("class.resource.loader.class", ClasspathResourceLoader.class.getName());
            final Logger velocityLogger = LoggerFactory.getLogger("org.apache.camel.maven.Velocity");
            properties.setProperty(RuntimeConstants.RUNTIME_LOG_NAME, velocityLogger.getName());
            
            velocityEngine.init(properties);
        }
        return velocityEngine;
    }

