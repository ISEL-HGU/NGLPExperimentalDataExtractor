import org.apache.camel.spi.RouteContext;
import org.apache.camel.spi.UnitOfWork;
    /**
     * Optionally a <tt>from</tt> current route which means that this expression should only be based
     * on {@link Exchange} which is the current route(s).
     *
     * @param routeId id of route or pattern (see the EndpointHelper javadoc)
     * @return the builder
     * @see EndpointHelper#matchEndpoint(org.apache.camel.CamelContext, String, String)
     */
    public NotifyBuilder fromCurrentRoute(final String routeId) {
        stack.add(new EventPredicateSupport() {

            @Override
            public boolean isAbstract() {
                // is abstract as its a filter
                return true;
            }

            @Override
            public boolean onExchangeSent(Exchange exchange, Endpoint endpoint, long timeTaken) {
                UnitOfWork uow = exchange.getUnitOfWork();
                RouteContext rc = uow != null ? uow.getRouteContext() : null;
                if (rc != null) {
                    String id = rc.getRouteId();
                    return PatternHelper.matchPattern(id, routeId);
                } else {
                    return false;
                }
            }

            public boolean matches() {
                // should be true as we use the onExchange to filter
                return true;
            }

            @Override
            public String toString() {
                return "fromCurrentRoute("  routeId  ")";
            }
        });
        return this;
    }

