                answer = retrieveFileToFileInLocalWorkDirectory(name, exchange, endpoint.isResumeDownload());
    private boolean retrieveFileToFileInLocalWorkDirectory(String name, Exchange exchange, boolean resumeDownload) throws GenericFileOperationFailedException {
        long existingSize = -1;

            // delete any local file (as its the temp file that is in the in-progress download)
            // if a previous file exists then store its current size as its a partial download
            boolean exists = temp.exists();
            if (exists) {
                existingSize = temp.length();
            }

            // if we do not resume download, then delete any existing temp file and create a new to use for in-progress download
            if (!resumeDownload) {
                // delete any existing files
                if (exists && !FileUtil.deleteFile(temp)) {
                    throw new GenericFileOperationFailedException("Cannot delete existing local work file: "  temp);
                }
                // create new temp local work file
                if (!temp.createNewFile()) {
                    throw new GenericFileOperationFailedException("Cannot create new local work file: "  temp);
                }
            boolean append = resumeDownload && existingSize > 0;
            os = new FileOutputStream(temp, append);
            // the file exists so lets try to resume the download
            if (resumeDownload && existingSize > 0) {
                clientActivityListener.onResumeDownloading(endpoint.getConfiguration().remoteServerInformation(), name, existingSize);
                log.trace("Client restartOffset: {}", existingSize);
                log.debug("Resuming download of file: {} at position: {}", remoteName, existingSize);
                // use binary for resume downloads as FTP servers would expect that
                if (!endpoint.getConfiguration().isBinary()) {
                    log.debug("Resume download requires file type binary mode");
                    client.setFileType(FTP.BINARY_FILE_TYPE);
                }
                client.setRestartOffset(existingSize);
            }
            log.trace("Error occurred during retrieving file: {} to local directory.", name);
            // if we do not attempt to resume download, then attempt to delete the temporary file
            if (!resumeDownload) {
                log.trace("Deleting local work file: {}", name, temp);
                // failed to retrieve the file so we need to close streams and delete in progress file
                // must close stream before deleting file
                IOHelper.close(os, "retrieve: "  name, log);
                boolean deleted = FileUtil.deleteFile(temp);
                if (!deleted) {
                    log.warn("Error occurred during retrieving file: "  name  " to local directory. Cannot delete local work file: "  temp);
                }
