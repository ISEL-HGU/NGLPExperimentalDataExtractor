import org.apache.camel.model.ToDefinition;
import org.apache.camel.processor.SendDynamicProcessor;
import org.apache.camel.processor.SendProcessor;
        // create the before
        final Processor before = this.createChildProcessor(routeContext, true);
        // create the after
        Processor afterProcessor = null;
        if (definition.getAfterUri() != null) {
            ToDefinition to = new ToDefinition(definition.getAfterUri());
            // at first use custom factory
            if (routeContext.getCamelContext().adapt(ExtendedCamelContext.class).getProcessorFactory() != null) {
                afterProcessor = routeContext.getCamelContext().adapt(ExtendedCamelContext.class)
                        .getProcessorFactory().createProcessor(routeContext, to);
            }
            // fallback to default implementation if factory did not create the processor
            if (afterProcessor == null) {
                afterProcessor = reifier(to).createProcessor(routeContext);
            }
        }
        final Processor after = afterProcessor;
                    proxy.setBefore(before);
                    proxy.setAfter(after);
        return new InterceptEndpointProcessor(matchURI, before);
