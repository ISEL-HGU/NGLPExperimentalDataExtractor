 b/tooling/apt/src/main/java/org/apache/camel/tools/apt/TypeConverterLoaderProcessor.java
import java.util.StringJoiner;
import java.util.stream.Collectors;
import javax.tools.DocumentationTool;
import javax.tools.FileObject;
import javax.tools.JavaFileManager;
import javax.tools.StandardLocation;
public class TypeConverterLoaderProcessor extends AbstractCamelAnnotationProcessor {
        private final Map<String, Map<TypeMirror, ExecutableElement>> converters = new TreeMap<>();
        private int size;
            size;
            size;
        long size() {
            return size;
        }

        boolean isEmpty() {
            return size == 0;
        }
            if (!value.isEmpty()) {
                writeConverterLoader(key, value, converterAnnotationType, fallbackAnnotationType);
            }
        writeConverterLoaderMetaInfo(converters);
    private void writeConverterLoaderMetaInfo(Map<String, ClassConverters> converters) throws Exception {
        StringJoiner sj = new StringJoiner(",");
        for (Map.Entry<String, ClassConverters> entry : converters.entrySet()) {
            String key = entry.getKey();
            ClassConverters value = entry.getValue();
            if (!value.isEmpty()) {
                sj.add(key);
            }
        }

        if (sj.length() > 0) {
            FileObject fo = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT, "", "META-INF/services/org/apache/camel/TypeConverterLoader");
            try (Writer writer = fo.openWriter()) {
                writer.append("# Generated by camel annotation processor\n");
                for (String fqn : sj.toString().split(",")) {
                    writer.append("class=").append(fqn).append("Loader\n");
                }
            }
        }
    }

            writer.append("    static abstract class BaseTypeConverter extends TypeConverterSupport {\n");
            writer.append("        public BaseTypeConverter(boolean allowNull) {\n");
            writer.append("    private DoubleMap<Class<?>, Class<?>, BaseTypeConverter> converters = new DoubleMap<>("  converters.size()  ");\n");
                        .append(".class, new BaseTypeConverter(").append(Boolean.toString(allowNull)).append(") {\n");
