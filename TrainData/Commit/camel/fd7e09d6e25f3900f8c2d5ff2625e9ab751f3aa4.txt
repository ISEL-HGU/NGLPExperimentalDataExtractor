     * If true, the consumer will receive notifications synchronously
     */
     * Specifies the set of event types to register by the consumer. Multiple
     * event can be separated by comma.
     * The possible event types are: CACHE_ENTRY_ACTIVATED,
     * CACHE_ENTRY_PASSIVATED, CACHE_ENTRY_VISITED, CACHE_ENTRY_LOADED,
     * CACHE_ENTRY_EVICTED, CACHE_ENTRY_CREATED, CACHE_ENTRY_REMOVED,
     * CACHE_ENTRY_MODIFIED, TRANSACTION_COMPLETED, TRANSACTION_REGISTERED,
     * CACHE_ENTRY_INVALIDATED, DATA_REHASHED, TOPOLOGY_CHANGED,
     * PARTITION_STATUS_CHANGED
     * Specifies the set of event types to register by the consumer. Multiple
     * event can be separated by comma.
     * The possible event types are: CACHE_ENTRY_ACTIVATED,
     * CACHE_ENTRY_PASSIVATED, CACHE_ENTRY_VISITED, CACHE_ENTRY_LOADED,
     * CACHE_ENTRY_EVICTED, CACHE_ENTRY_CREATED, CACHE_ENTRY_REMOVED,
     * CACHE_ENTRY_MODIFIED, TRANSACTION_COMPLETED, TRANSACTION_REGISTERED,
     * CACHE_ENTRY_INVALIDATED, DATA_REHASHED, TOPOLOGY_CHANGED,
     * PARTITION_STATUS_CHANGED
     * The CacheContainer configuration. Uses if the cacheContainer is not
     * defined. Must be the following types:
     * org.infinispan.client.hotrod.configuration.Configuration - for remote
     * cache interaction configuration;
     * org.infinispan.configuration.cache.Configuration - for embedded cache
     * interaction configuration;
     * Store the operation result in a header instead of the message body. By
     * default, resultHeader == null and the query result is stored in the
     * the query result and the original message body is preserved. This value
     * can be overridden by an in message header named:
     * CamelInfinispanOperationResultHeader
    public BiFunction getRemappingFunction() {
        return remappingFunction;
    }
    public void setRemappingFunction(BiFunction remappingFunction) {
        this.remappingFunction = remappingFunction;
    }
