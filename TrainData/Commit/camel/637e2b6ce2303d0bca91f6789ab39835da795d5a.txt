import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
    private static final Logger LOGGER = LoggerFactory.getLogger(BackOffTimer.class);

    public Task schedule(BackOff backOff, ThrowingFunction<BackOffContext, Boolean, Exception> function) {
        final TaskImpl task = new TaskImpl(backOff, function);
    public interface Task {
        /**
         * Gets the {@link BackOffContext} associated with this task.
         */
        BackOffContext getContext();

        /**
         * Cancel the task.
         */
        void cancel();

        /**
         * Action to execute when the context is completed (cancelled or exhausted)
         *
         * @param whenCompleted the consumer.
         */
        void whenComplete(BiConsumer<BackOffContext, Throwable> whenCompleted);
    }

    // ****************************************
    // TimerTask
    // ****************************************

    private final class TaskImpl implements Task, Runnable {
        private final AtomicReference<ScheduledFuture<?>> futureRef;
        private final List<BiConsumer<BackOffContext, Throwable>> consumers;
        TaskImpl(BackOff backOff, ThrowingFunction<BackOffContext, Boolean, Exception> function) {
            this.consumers = new ArrayList<>();
            this.futureRef = new AtomicReference<>();
            if (context.getStatus() == BackOffContext.Status.Active) {
                try {
                    final long currentTime = System.currentTimeMillis();
                    context.setLastAttemptTime(currentTime);
                    if (function.apply(context)) {
                        long delay = context.next();
                        if (context.getStatus() != BackOffContext.Status.Active) {
                            // if the call to next makes the context not more
                            // active, signal task completion.
                            complete();
                        } else {
                            context.setNextAttemptTime(currentTime  delay);

                            // Cache the scheduled future so it can be cancelled
                            // later by Task.cancel()
                            futureRef.lazySet(scheduler.schedule(this, delay, TimeUnit.MILLISECONDS));
                        }
                    } else {
                        // if the function return false no more attempts should
                        // be made so stop the context.
                        context.stop();

                        // and signal the task as completed.
                } catch (Exception e) {
                    context.stop();
                    consumers.forEach(c -> c.accept(context, e));
        public BackOffContext getContext() {
            return context;
        }

        @Override
        public void cancel() {
            ScheduledFuture<?> future = futureRef.get();
            if (future != null) {
                future.cancel(true);
            }

            // signal task completion on cancel.
            complete();
        @Override
        public void whenComplete(BiConsumer<BackOffContext, Throwable> whenCompleted) {
            synchronized (this.consumers) {
                consumers.add(whenCompleted);
            }
        void complete() {
            synchronized (this.consumers) {
                consumers.forEach(c -> c.accept(context, null));
            }
