     * @param target the target exchange which will have the output and error state added (result)
    public static void copyResults(Exchange target, Exchange source) {
        doCopyResults(target, source, false);
     * @param target the target exchange which will have the output and error state added (result)
    public static void copyResultsPreservePattern(Exchange target, Exchange source) {
        doCopyResults(target, source, true);
    }
    private static void doCopyResults(Exchange result, Exchange source, boolean preserverPattern) {
            if (preserverPattern) {
                // exchange pattern sensitive
                Message resultMessage = getResultMessage(result);
                resultMessage.copyFrom(source.getOut());
            } else {
                result.getOut().copyFrom(source.getOut());
            }
        } else if (result.getPattern() == ExchangePattern.InOptionalOut) {
            // special case where the result is InOptionalOut and with no OUT response
            // so we should return null to indicate this fact
            result.setOut(null);
        } else {
            // no results so lets copy the last input
            // as the final processor on a pipeline might not
            // have created any OUT; such as a mock:endpoint
            // so lets assume the last IN is the OUT
            if (!preserverPattern && result.getPattern().isOutCapable()) {
                // only set OUT if its OUT capable
                result.getOut().copyFrom(source.getIn());
            } else {
                // if not replace IN instead to keep the MEP
                result.getIn().copyFrom(source.getIn());
                // clear any existing OUT as the result is on the IN
                if (result.hasOut()) {
                    result.setOut(null);
                }
            }

        result.setException(source.getException());
