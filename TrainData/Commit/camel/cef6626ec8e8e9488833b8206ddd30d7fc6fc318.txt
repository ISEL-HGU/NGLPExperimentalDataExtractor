import org.restlet.data.AuthenticationInfo;
        configureRestletRequestStandardHeaders(exchange, request, standardHeaders);
    private void configureRestletRequestStandardHeaders(Exchange exchange, Request request, Series standardHeaders) {
            } else if ("User-Agent".equalsIgnoreCase(key)) {
                request.getClientInfo().setAgent(value);
            } else if ("Referer".equalsIgnoreCase(key)) {
                request.setReferrerRef(value);
            } else if ("Host".equalsIgnoreCase(key)) {
                request.setHostRef(value);
            } else if ("Date".equalsIgnoreCase(key)) {
                Date d = exchange.getContext().getTypeConverter().tryConvertTo(Date.class, exchange, value);
                if (d != null) {
                    request.setDate(d);
                }
            } else {
                // TODO: implement all the other restlet standard headers
                LOG.warn("Addition of the standard header \"{}\" is not allowed. Please use the equivalent property in the Restlet API.", key);
        }
    }

    private void configureRestletResponseStandardHeaders(Exchange exchange, Response response, Series standardHeaders) {
        Iterator it = standardHeaders.iterator();
        while (it.hasNext()) {
            Header h = (Header) it.next();
            String key = h.getName();
            String value = h.getValue();
            if ("Content-Type".equalsIgnoreCase(key)) {
                MediaType mediaType = exchange.getContext().getTypeConverter().tryConvertTo(MediaType.class, exchange, value);
                if (mediaType != null) {
                    response.getEntity().setMediaType(mediaType);
                }
            } else if ("Server".equalsIgnoreCase(key)) {
                response.getServerInfo().setAgent(value);
            } else if ("Age".equalsIgnoreCase(key)) {
                Integer age = exchange.getContext().getTypeConverter().tryConvertTo(Integer.class, exchange, value);
                if (age != null) {
                    response.setAge(age);
                }
            } else if ("Expires".equalsIgnoreCase(key)) {
                Date date = exchange.getContext().getTypeConverter().tryConvertTo(Date.class, exchange, value);
                if (date != null) {
                    response.getEntity().setExpirationDate(date);
                }
            } else {
                // TODO: implement all the other restlet standard headers
                LOG.warn("Addition of the standard header \"{}\" is not allowed. Please use the equivalent property in the Restlet API.", key);
            }
        // filter out standard restlet headers which must be configured differently
        org.restlet.Message extensionHeaders = new Request();
        HeaderUtils.copyExtensionHeaders(series, extensionHeaders);

        // setup standard headers
        Series<Header> standardHeaders = new Series<>(Header.class);
        standardHeaders.addAll(series);
        standardHeaders.removeAll(extensionHeaders.getHeaders());

        // setup extension headers
        series.removeAll(standardHeaders);

        // now add standard headers but via the special restlet api
        LOG.debug("Detected {} extension headers", extensionHeaders.getHeaders().size());
        LOG.debug("Detected {} standard headers", standardHeaders.size());

        configureRestletResponseStandardHeaders(exchange, response, standardHeaders);

        // include the extension headers on the response
        if (extensionHeaders.getHeaders().size() > 0) {
            response.getHeaders().addAll(extensionHeaders.getHeaders());
