import brave.Span;
import brave.Tracing;
import brave.propagation.B3Propagation;
import brave.propagation.Propagation.Getter;
import brave.propagation.Propagation.Setter;
import brave.propagation.TraceContext;
import brave.propagation.TraceContext.Extractor;
import brave.propagation.TraceContext.Injector;
import brave.sampler.Sampler;
import org.apache.camel.Message;
// NOTE: this implementation currently only does explicit propagation, meaning that non-camel
// components will not see the current trace context, and therefore will be unassociated. This can
// be fixed by using CurrentTraceContext to scope a span where user code is invoked.
// If this is desirable, an instance variable of CurrentTraceContext.Default.create() could do the
// trick.
    private static final Getter<Message, String> GETTER = new Getter<Message, String>() {
        @Override public String get(Message message, String key) {
            return message.getHeader(key, String.class);
        }
    };
    private static final Setter<Message, String> SETTER = new Setter<Message, String>() {
        @Override public void put(Message message, String key, String value) {
            message.setHeader(key, value);
        }
    };
    private static final Extractor<Message> EXTRACTOR = B3Propagation.B3_STRING.extractor(GETTER);
    private static final Injector<Message> INJECTOR = B3Propagation.B3_STRING.injector(SETTER);


    private final Map<String, Tracing> braves = new HashMap<>();
            createTracingForService(pattern, serviceName);
            createTracingForService(pattern, serviceName);
    private void createTracingForService(String pattern, String serviceName) {
        Tracing brave = braves.get(pattern);
            brave = newTracing(serviceName);
    private Tracing newTracing(String serviceName) {
        return Tracing.newBuilder()
            .localServiceName(serviceName)
            .sampler(Sampler.create(rate))
    private Tracing getTracing(String serviceName) {
        Tracing brave = null;
                LOG.debug("Creating Tracing assigned to serviceName: {}", serviceName  " as fallback");
                brave = newTracing(serviceName);
    private void clientRequest(Tracing brave, String serviceName, ExchangeSendingEvent event) {
        Span last = state.peekServerSpan();
        Span span;
            span = brave.tracer().newChild(last.context());
        } else {
            span = brave.tracer().nextSpan();
        span.kind(Span.Kind.CLIENT).start();
        ZipkinClientRequestAdapter parser = new ZipkinClientRequestAdapter(this, event.getEndpoint());
        INJECTOR.inject(span.context(), event.getExchange().getIn());
        parser.onRequest(event.getExchange(), span.customizer());
        if (LOG.isDebugEnabled()) {
            TraceContext context = span.context();
            String traceId = ""  context.traceIdString();
            String spanId = ""  context.spanId();
            String parentId = context.parentId() != null ? ""  context.parentId() : null;
    private void clientResponse(Tracing brave, String serviceName, ExchangeSentEvent event) {
            ZipkinClientResponseAdaptor parser = new ZipkinClientResponseAdaptor(this, event.getEndpoint());
            parser.onResponse(event.getExchange(), span.customizer());
            span.finish();
                TraceContext context = span.context();
                String traceId = ""  context.traceIdString();
                String spanId = ""  context.spanId();
                String parentId = context.parentId() != null ? ""  context.parentId() : null;
    private Span serverRequest(Tracing brave, String serviceName, Exchange exchange) {
        Span span = brave.tracer().nextSpan(EXTRACTOR.extract(exchange.getIn()));
        span.kind(Span.Kind.SERVER).start();
        ZipkinServerRequestAdapter parser = new ZipkinServerRequestAdapter(this, exchange);
        parser.onRequest(exchange, span.customizer());
        if (LOG.isDebugEnabled()) {
            TraceContext context = span.context();
            String traceId = ""  context.traceIdString();
            String spanId = ""  context.spanId();
            String parentId = context.parentId() != null ? ""  context.parentId() : null;
            if (parentId != null) {
                LOG.debug(String.format("serverRequest [service=%s, traceId=%20s, spanId=%20s, parentId=%20s]", serviceName, traceId, spanId, parentId));
            } else {
                LOG.debug(String.format("serverRequest [service=%s, traceId=%20s, spanId=%20s]", serviceName, traceId, spanId));
    private void serverResponse(Tracing brave, String serviceName, Exchange exchange) {
        Span span = null;
            ZipkinServerResponseAdapter parser = new ZipkinServerResponseAdapter(this, exchange);
            parser.onResponse(exchange, span.customizer());
            span.finish();
            if (LOG.isDebugEnabled()) {
                TraceContext context = span.context();
                String traceId = ""  context.traceIdString();
                String spanId = ""  context.spanId();
                String parentId = context.parentId() != null ? ""  context.parentId() : null;
                Tracing brave = getTracing(serviceName);
                Tracing brave = getTracing(serviceName);
                Tracing brave = getTracing(serviceName);
                    Tracing brave = getTracing(serviceName);
