import java.util.function.Function;
        return addToClassMap(classKey, new ClassSupplier() {
            @Override
            public Class<?> get() throws ClassNotFoundException, IOException {
                return DefaultFactoryFinder.this.newInstance(DefaultFactoryFinder.this.doFindFactoryProperties(key), prefix);
            }
        });
            return classMap.computeIfAbsent(key, new Function<String, Class<?>>() {
                @Override
                public Class<?> apply(String classKey) {
                    try {
                        return mappingFunction.get();
                    } catch (ClassNotFoundException e) {
                        throw new WrappedRuntimeException(e);
                    } catch (NoFactoryAvailableException e) {
                        throw new WrappedRuntimeException(e);
                    } catch (IOException e) {
                        throw new WrappedRuntimeException(e);
                    }
