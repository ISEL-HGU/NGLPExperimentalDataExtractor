import org.apache.camel.support.DefaultConsumer;
public class SedaConsumer extends DefaultConsumer implements Runnable, ShutdownAware, Suspendable {
        super(endpoint, processor);
    public SedaEndpoint getEndpoint() {
        return (SedaEndpoint) super.getEndpoint();
        if (getEndpoint().isPurgeWhenStopping()) {
            getEndpoint().purgeQueue();
        return getEndpoint().getQueue().size();
        BlockingQueue<Exchange> queue = getEndpoint().getQueue();
        Exchange newExchange = ExchangeHelper.copyExchangeAndSetCamelContext(exchange, getEndpoint().getCamelContext());
        newExchange.setFromEndpoint(getEndpoint());
        int size = getEndpoint().getConsumers().size();
        if (size > 1 && !getEndpoint().isMultipleConsumersSupported()) {
            throw new IllegalStateException("Multiple consumers for the same endpoint is not allowed: "  getEndpoint());
        if (getEndpoint().isMultipleConsumersSupported()) {
            AsyncProcessor mp = getEndpoint().getConsumerMulticastProcessor();
            getAsyncProcessor().process(exchange, EmptyAsyncCallback.get());
        super.doStart();
        latch = new CountDownLatch(getEndpoint().getConcurrentConsumers());
        getEndpoint().onStarted(this);
        getEndpoint().onStopped(this);
        getEndpoint().onStarted(this);
        if (getEndpoint().isPurgeWhenStopping()) {
            getEndpoint().purgeQueue();
        getEndpoint().onStopped(this);

        super.doStop();
            getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);
        int poolSize = getEndpoint().getConcurrentConsumers();
            executor = getEndpoint().getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, getEndpoint().getEndpointUri(), poolSize);
