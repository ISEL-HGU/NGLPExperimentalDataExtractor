         * Control whether automatic batching of messages is enabled for the
         * producer. Default is true.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder batchingEnabled(
                boolean batchingEnabled) {
            setProperty("batchingEnabled", batchingEnabled);
            return this;
        }
        /**
         * Control whether automatic batching of messages is enabled for the
         * producer. Default is true.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder batchingEnabled(
                String batchingEnabled) {
            setProperty("batchingEnabled", batchingEnabled);
            return this;
        }
        /**
         * Set the maximum number of messages permitted in a batch. Default
         * 1,000.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder batchingMaxMessages(
                int batchingMaxMessages) {
            setProperty("batchingMaxMessages", batchingMaxMessages);
            return this;
        }
        /**
         * Set the maximum number of messages permitted in a batch. Default
         * 1,000.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder batchingMaxMessages(
                String batchingMaxMessages) {
            setProperty("batchingMaxMessages", batchingMaxMessages);
            return this;
        }
        /**
         * Set the time period within which the messages sent will be batched if
         * batch messages are enabled. If set to a non zero value, messages will
         * be queued until either: this time interval expires the max number of
         * messages in a batch is reached Default is 1ms.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder batchingMaxPublishDelayMicros(
                long batchingMaxPublishDelayMicros) {
            setProperty("batchingMaxPublishDelayMicros", batchingMaxPublishDelayMicros);
            return this;
        }
        /**
         * Set the time period within which the messages sent will be batched if
         * batch messages are enabled. If set to a non zero value, messages will
         * be queued until either: this time interval expires the max number of
         * messages in a batch is reached Default is 1ms.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder batchingMaxPublishDelayMicros(
                String batchingMaxPublishDelayMicros) {
            setProperty("batchingMaxPublishDelayMicros", batchingMaxPublishDelayMicros);
            return this;
        }
        /**
         * Set whether the send and asyncSend operations should block when the
         * outgoing message queue is full. If set to false, send operations will
         * immediately fail with ProducerQueueIsFullError when there is no space
         * left in the pending queue. Default is false.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder blockIfQueueFull(
                boolean blockIfQueueFull) {
            setProperty("blockIfQueueFull", blockIfQueueFull);
            return this;
        }
        /**
         * Set whether the send and asyncSend operations should block when the
         * outgoing message queue is full. If set to false, send operations will
         * immediately fail with ProducerQueueIsFullError when there is no space
         * left in the pending queue. Default is false.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder blockIfQueueFull(
                String blockIfQueueFull) {
            setProperty("blockIfQueueFull", blockIfQueueFull);
            return this;
        }
        /**
         * Set the compression type for the producer. Supported compression
         * types are: NONE: No compression LZ4: Compress with LZ4 algorithm.
         * Faster but lower compression than ZLib ZLI: Standard ZLib compression
         * Default is NONE.
         * 
         * The option is a:
         * <code>org.apache.pulsar.client.api.CompressionType</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder compressionType(
                CompressionType compressionType) {
            setProperty("compressionType", compressionType);
            return this;
        }
        /**
         * Set the compression type for the producer. Supported compression
         * types are: NONE: No compression LZ4: Compress with LZ4 algorithm.
         * Faster but lower compression than ZLib ZLI: Standard ZLib compression
         * Default is NONE.
         * 
         * The option will be converted to a
         * <code>org.apache.pulsar.client.api.CompressionType</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder compressionType(
                String compressionType) {
            setProperty("compressionType", compressionType);
            return this;
        }
        /**
         * Set the baseline for the sequence ids for messages published by the
         * producer. First message will be using (initialSequenceId 1) as its
         * sequence id and subsequent messages will be assigned incremental
         * sequence ids, if not otherwise specified.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder initialSequenceId(
                long initialSequenceId) {
            setProperty("initialSequenceId", initialSequenceId);
            return this;
        }
        /**
         * Set the baseline for the sequence ids for messages published by the
         * producer. First message will be using (initialSequenceId 1) as its
         * sequence id and subsequent messages will be assigned incremental
         * sequence ids, if not otherwise specified.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder initialSequenceId(
                String initialSequenceId) {
            setProperty("initialSequenceId", initialSequenceId);
            return this;
        }
        /**
         * Set the max size of the queue holding the messages pending to receive
         * an acknowledgment from the broker. Default is 1000.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder maxPendingMessages(
                int maxPendingMessages) {
            setProperty("maxPendingMessages", maxPendingMessages);
            return this;
        }
        /**
         * Set the max size of the queue holding the messages pending to receive
         * an acknowledgment from the broker. Default is 1000.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder maxPendingMessages(
                String maxPendingMessages) {
            setProperty("maxPendingMessages", maxPendingMessages);
            return this;
        }
        /**
         * Set the number of max pending messages across all the partitions.
         * Default is 50000.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder maxPendingMessagesAcrossPartitions(
                int maxPendingMessagesAcrossPartitions) {
            setProperty("maxPendingMessagesAcrossPartitions", maxPendingMessagesAcrossPartitions);
            return this;
        }
        /**
         * Set the number of max pending messages across all the partitions.
         * Default is 50000.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder maxPendingMessagesAcrossPartitions(
                String maxPendingMessagesAcrossPartitions) {
            setProperty("maxPendingMessagesAcrossPartitions", maxPendingMessagesAcrossPartitions);
            return this;
        }
        /**
        /**
         * Send timeout in milliseconds. Defaults to 30,000ms (30 seconds).
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder sendTimeoutMs(int sendTimeoutMs) {
            setProperty("sendTimeoutMs", sendTimeoutMs);
            return this;
        }
        /**
         * Send timeout in milliseconds. Defaults to 30,000ms (30 seconds).
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: producer
         */
        default PulsarEndpointProducerBuilder sendTimeoutMs(String sendTimeoutMs) {
            setProperty("sendTimeoutMs", sendTimeoutMs);
            return this;
        }

    /**
     * Proxy enum for <code>org.apache.pulsar.client.api.CompressionType</code>
     * enum.
     */
    enum CompressionType {
        NONE,
        LZ4,
        ZLIB,
        ZSTD,
        SNAPPY;
    }
