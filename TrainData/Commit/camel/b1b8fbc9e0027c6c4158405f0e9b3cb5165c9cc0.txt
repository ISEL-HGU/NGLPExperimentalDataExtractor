    private int propagationBehavior = TransactionDefinition.PROPAGATION_REQUIRED;
     * Sets the name of the repository
        transactionTemplate.setPropagationBehavior(propagationBehavior);
        transactionTemplateReadOnly.setPropagationBehavior(propagationBehavior);
     * Sets the DataSource to use for accessing the database
     * Whether or not recovery is enabled. This option is by default true. When enabled the Camel
     * Aggregator automatic recover failed aggregated exchange and have them resubmitted.
     * An endpoint uri for a Dead Letter Channel where exhausted recovered Exchanges will be
     * moved. If this option is used then the maximumRedeliveries option must also be provided.
     * Important note : if the deadletter route throws an exception, it will be send again to DLQ until it succeed !
     * Whether the get operation should return the old existing Exchange if any existed.
     * By default this option is false to optimize as we do not need the old exchange when aggregating.
     *
     * Whether to store the message body as String which is human readable.
     * By default this option is false storing the body in binary format.
    public int getPropagationBehavior() {
        return propagationBehavior;
    }

    /**
     * Sets propagation behavior to use with spring transaction template which are used for database access.
     * The default is TransactionDefinition.PROPAGATION_REQUIRED.
    public void setPropagationBehavior(int propagationBehavior) {
        this.propagationBehavior = propagationBehavior;
    }

     * Sets a custom LobHandler to use
