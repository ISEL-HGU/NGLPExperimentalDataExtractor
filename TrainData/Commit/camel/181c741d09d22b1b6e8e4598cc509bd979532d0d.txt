import javax.servlet.ServletConfig;
import org.atmosphere.cpr.AtmosphereResponseImpl;
import org.atmosphere.cpr.AtmosphereRequestImpl;
import org.atmosphere.cpr.AtmosphereFrameworkInitializer;
    private AtmosphereFramework framework;
    private final AtmosphereFrameworkInitializer initializer;
    public void configureEventsResending(final boolean enableEventsResending){
        this.enableEventsResending = enableEventsResending;
    }
    public void configureFramework(ServletConfig config) throws ServletException {
        initializer.configureFramework(config, false, false, AtmosphereFramework.class);
        this.framework = initializer.framework();
        this.framework.setUseNativeImplementation(false);
        this.framework.addInitParameter(ApplicationConfig.WEBSOCKET_SUPPORT, "true");
        this.framework.addInitParameter(ApplicationConfig.WEBSOCKET_PROTOCOL,
                getEndpoint().isUseStreaming() ? WebsocketStreamHandler.class.getName() : WebsocketHandler.class.getName());
        this.framework.init(config);

        WebSocketProtocol wsp = this.framework.getWebSocketProtocol();
            ((WebsocketHandler)wsp).setConsumer(this);
    public WebsocketConsumer(WebsocketEndpoint endpoint, Processor processor) {
        super(endpoint, processor);
        initializer = new AtmosphereFrameworkInitializer(false , true);
  }

    void service(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
