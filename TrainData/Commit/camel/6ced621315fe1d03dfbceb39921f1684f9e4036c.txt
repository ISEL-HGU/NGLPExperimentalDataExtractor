import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
        String serviceClassName = packageName  "."  serviceName  GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX;
    
    @SuppressWarnings({"rawtypes", "unchecked"})
    public static void invokeAsyncMethod(Object asyncStubClass, String invokeMethod, Object request, StreamObserver responseObserver) {
        Class[] paramMethod = null;
            throw new IllegalArgumentException("gRPC service method not found: "  asyncStubClass.getClass().getName()  "."  invokeMethod);
        if (method.getReturnType().equals(StreamObserver.class)) {
            StreamObserver<Object> requestObserver = (StreamObserver<Object>)ReflectionUtils.invokeMethod(method, asyncStubClass, responseObserver);
            if (request instanceof List) {
                List<Object> requestList = (List<Object>)request;
                requestList.forEach((requestItem) -> {
                    requestObserver.onNext(requestItem);
                });
            } else {
                requestObserver.onNext(request);
            }
            requestObserver.onCompleted();
        } else {
            ReflectionUtils.invokeMethod(method, asyncStubClass, request, responseObserver);
        }
    @SuppressWarnings({"rawtypes", "unchecked"})
        Class[] paramMethod = null;
            throw new IllegalArgumentException("gRPC service method not found: "  blockingStubClass.getClass().getName()  "."  invokeMethod);
        if (method.getReturnType().equals(Iterator.class)) {
            Iterator<Object> responseObjects = (Iterator<Object>)ReflectionUtils.invokeMethod(method, blockingStubClass, request);
            List<Object> objectList = new ArrayList<Object>();
            while (responseObjects.hasNext()) {
                objectList.add(responseObjects.next());
            }
            return objectList;
        } else {
            return ReflectionUtils.invokeMethod(method, blockingStubClass, request);
        }
