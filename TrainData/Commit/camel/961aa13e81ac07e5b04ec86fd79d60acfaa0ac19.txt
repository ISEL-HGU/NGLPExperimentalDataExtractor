import java.util.regex.Pattern;
        public String enumTypeName(final String sObjectName, final String name) {
            return sObjectName  "_"  (name.endsWith("__c") ? name.substring(0, name.length() - 3) : name)  "Enum";
                    if (picklistsEnumToSObject.containsKey(description.getName())
                        && picklistsEnumToSObject.get(description.getName()).contains(field.getName())) {
                        return enumTypeName(description.getName(), field.getName());
                    }
                    return String.class.getName();
                } else if (picklistsStringToSObject.containsKey(description.getName())
                    && picklistsStringToSObject.get(description.getName()).contains(field.getName())) {
                return enumTypeName(description.getName(), field.getName());
                    if (picklistsEnumToSObject.containsKey(description.getName())
                        && picklistsEnumToSObject.get(description.getName()).contains(field.getName())) {
                        return enumTypeName(description.getName(), field.getName())  "[]";
                    }
                    return String.class.getName()  "[]";
                } else if (picklistsStringToSObject.containsKey(description.getName())
                    && picklistsStringToSObject.get(description.getName()).contains(field.getName())) {
                return enumTypeName(description.getName(), field.getName())  "[]";
    private static final Pattern FIELD_DEFINITION_PATTERN = Pattern.compile("\\w\\.{1}\\w");
    private static final String JAVA_EXT = ".java";
    private static final String MULTIPICKLIST = "multipicklist";

     * Names of specific picklist/multipicklist fields, which should be
     * converted to Enum (default case) if property
     * {@link this#useStringsForPicklists} is set to true. Format:
     * SObjectApiName.FieldApiName (e.g. Account.DataSource)
     */
    @Parameter
    String[] picklistToEnums;

    /**
     * Names of specific picklist/multipicklist fields, which should be
     * converted to String if property {@link this#useStringsForPicklists} is
     * set to false. Format: SObjectApiName.FieldApiName (e.g.
     * Account.DataSource)
     */
    @Parameter
    String[] picklistToStrings;

    @Parameter(property = "camelSalesforce.useStringsForPicklists", defaultValue = "false")
    Boolean useStringsForPicklists;

    /**
    private final Map<String, Set<String>> picklistsEnumToSObject = new HashMap<>();

    private final Map<String, Set<String>> picklistsStringToSObject = new HashMap<>();

    void parsePicklistToEnums() {
        parsePicklistOverrideArgs(picklistToEnums, picklistsEnumToSObject);
    }

    void parsePicklistToStrings() {
        parsePicklistOverrideArgs(picklistToStrings, picklistsStringToSObject);
    }
        useStringsForPicklists = useStringsForPicklists == null ? Boolean.FALSE : useStringsForPicklists;

        parsePicklistToEnums();
        parsePicklistToStrings();
                final String enumName = utility.enumTypeName(description.getName(), field.getName());

    private static void parsePicklistOverrideArgs(final String[] picklists,
        final Map<String, Set<String>> picklistsToSObject) {
        if (picklists != null && picklists.length > 0) {
            String[] strings;
            for (final String picklist : picklists) {
                if (!FIELD_DEFINITION_PATTERN.matcher(picklist).matches()) {
                    throw new IllegalArgumentException(
                        "Invalid format provided for picklistFieldToEnum value - allowed format SObjectName.FieldName");
                }
                strings = picklist.split("\\.");
                picklistsToSObject.putIfAbsent(strings[0], new HashSet<>());
                picklistsToSObject.get(strings[0]).add(strings[1]);
            }
        }
    }

