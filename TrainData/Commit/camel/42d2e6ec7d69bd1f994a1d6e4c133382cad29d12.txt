import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.stream.Collectors;
import io.ipfs.multihash.Multihash;
import io.nessus.ipfs.client.IPFSClient;

    static long DEFAULT_TIMEOUT = 10000L;
    
        List<Multihash> cids = ipfs().add(path);
        return cids.stream().map(mh -> mh.toBase58()).collect(Collectors.toList());
    InputStream ipfsCat(String cid) throws IOException, TimeoutException {
        Multihash mhash = Multihash.fromBase58(cid);
        Future<InputStream> future = ipfs().cat(mhash);
            return future.get(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);
        } catch (InterruptedException | ExecutionException ex) {
            throw new IOException("Cannot obtain: "  cid, ex);
        }
    }

    Path ipfsGet(String cid, Path outdir) throws IOException, TimeoutException {
        Multihash mhash = Multihash.fromBase58(cid);
        Future<Path> future = ipfs().get(mhash, outdir);
        try {
            return future.get(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);
