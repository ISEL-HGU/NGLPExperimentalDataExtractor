        String[] parts = directory.split(",");
        for (String part : parts) {
            LOG.info("Loading additional Camel XML routes from: {}", part);
            try {
                Resource[] xmlRoutes = applicationContext.getResources(part);
                for (Resource xmlRoute : xmlRoutes) {
                    LOG.debug("Found XML route: {}", xmlRoute);
                    RoutesDefinition xmlDefinition = camelContext.adapt(ModelCamelContext.class).loadRoutesDefinition(xmlRoute.getInputStream());
                    camelContext.adapt(ModelCamelContext.class).addRouteDefinitions(xmlDefinition.getRoutes());
                }
            } catch (FileNotFoundException e) {
                LOG.debug("No XML routes found in {}. Skipping XML routes detection.", part);
    private void loadXmlRests(ApplicationContext applicationContext, CamelContext camelContext, String directory) throws Exception {
        String[] parts = directory.split(",");
        for (String part : parts) {
            LOG.info("Loading additional Camel XML rests from: {}", part);
            try {
                final Resource[] xmlRests = applicationContext.getResources(part);
                for (final Resource xmlRest : xmlRests) {
                    final RestsDefinition xmlDefinitions = camelContext.adapt(ModelCamelContext.class).loadRestsDefinition(xmlRest.getInputStream());
                    camelContext.adapt(ModelCamelContext.class).addRestDefinitions(xmlDefinitions.getRests());
                    for (final RestDefinition xmlDefinition : xmlDefinitions.getRests()) {
                        final List<RouteDefinition> routeDefinitions = xmlDefinition.asRouteDefinition(camelContext);
                        camelContext.adapt(ModelCamelContext.class).addRouteDefinitions(routeDefinitions);
                    }
            } catch (FileNotFoundException e) {
                LOG.debug("No XML rests found in {}. Skipping XML rests detection.", part);
