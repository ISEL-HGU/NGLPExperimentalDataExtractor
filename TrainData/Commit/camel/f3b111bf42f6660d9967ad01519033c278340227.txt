import java.lang.reflect.Constructor;
import org.elasticsearch.transport.client.PreBuiltTransportClient;



            message.setBody(client.search(searchRequest).actionGet());

                client = createClient()
                && !configuration.getTransportAddressesList().isEmpty()) {
                client = createClient().addTransportAddresses(addresses.toArray(new TransportAddress[addresses.size()]));
    private TransportClient createClient() {
        final Settings.Builder settings = getSettings();
        try {
            Class clazz = Class.forName("org.elasticsearch.xpack.client.PreBuiltXPackTransportClient");
            Constructor<?> ctor = clazz.getConstructor(Settings.class, Class[].class);
            settings.put("xpack.security.user", configuration.getUser()  ":"  configuration.getPassword())
                .put("xpack.security.transport.ssl.enabled", configuration.getEnableSSL());
            return (TransportClient) ctor.newInstance(new Object[] {settings.build(), new Class[0]});
        } catch (Exception e) {
            LOG.info("XPack Client was not found on the classpath, using the standard client");
            return new PreBuiltTransportClient(settings.build());
        }
    }

    private Settings.Builder getSettings() {
            .put("request.headers.X-Found-Cluster", configuration.getClusterName());
        return settings;

    public TransportClient getClient() {
        return client;
    }
