 b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/UpdateReadmeMojo.java
import org.apache.camel.maven.packaging.model.EipModel;
import org.apache.camel.maven.packaging.model.EipOptionModel;
 * Generate or updates the component/dataformat/language/eip readme.md and .adoc files in the project root directory.
public class UpdateReadmeMojo extends AbstractMojo {
     * The documentation directory
     *
     * @parameter default-value="${basedir}/src/main/docs/eips"
     */
    protected File eipDocDir;

    /**
        executeEips();
    private void executeEips() throws MojoExecutionException, MojoFailureException {
        // find the eips names
        List<String> eipNames = findEipNames();

        // TODO: how to find model json files
        final Set<File> jsonFiles = new TreeSet<File>();
        PackageHelper.findJsonFiles(buildDir, jsonFiles, new PackageHelper.CamelComponentsModelFilter());

        // only if there is dataformat we should update the documentation files
        if (!eipNames.isEmpty()) {
            getLog().debug("Found "  eipNames.size()  " eips");
            for (String eipName : eipNames) {
                String json = loadEipJson(jsonFiles, eipName);
                if (json != null) {
                    // special for some data formats
                    eipName = asEipName(eipName);

                    File file = new File(docDir, eipName  "-eip.adoc");

                    EipModel model = generateEipModel(json);
                    String title = asEipTitle(model.getName(), model.getTitle());
                    model.setTitle(title);

                    boolean exists = file.exists();
                    boolean updated;

                    updated = updateTitles(file, model.getTitle()  " EIP");

                    if (model.getEipOptions() != null) {
                        String options = templateEipOptions(model);
                        updated |= updateEipOptions(file, options);
                    }

                    if (updated) {
                        getLog().info("Updated doc file: "  file);
                    } else if (exists) {
                        getLog().debug("No changes to doc file: "  file);
                    } else {
                        getLog().warn("No dataformat doc file: "  file);
                        if (isFailFast()) {
                            throw new MojoExecutionException("Failed build due failFast=true");
                        }
                    }
                }
            }
        }
    }

    private static String asEipName(String name) {
        return name;
    }

    private static String asEipTitle(String name, String title) {
        return title;
    }

    private boolean updateEipOptions(File file, String changed) throws MojoExecutionException {
        if (!file.exists()) {
            return false;
        }

        try {
            String text = loadText(new FileInputStream(file));

            String existing = StringHelper.between(text, "// eip options: START", "// eip options: END");
            if (existing != null) {
                // remove leading line breaks etc
                existing = existing.trim();
                changed = changed.trim();
                if (existing.equals(changed)) {
                    return false;
                } else {
                    String before = StringHelper.before(text, "// eip options: START");
                    String after = StringHelper.after(text, "// eip options: END");
                    text = before  "// eip options: START\n"  changed  "\n// eip options: END"  after;
                    writeText(file, text);
                    return true;
                }
            } else {
                getLog().warn("Cannot find markers in file "  file);
                getLog().warn("Add the following markers");
                getLog().warn("\t// eip options: START");
                getLog().warn("\t// eip options: END");
                if (isFailFast()) {
                    throw new MojoExecutionException("Failed build due failFast=true");
                }
                return false;
            }
        } catch (Exception e) {
            throw new MojoExecutionException("Error reading file "  file  " Reason: "  e, e);
        }
    }

    private String loadEipJson(Set<File> jsonFiles, String eipName) {
        try {
            for (File file : jsonFiles) {
                if (file.getName().equals(eipName  ".json")) {
                    String json = loadText(new FileInputStream(file));
                    boolean isEip = json.contains("\"kind\": \"model\"");
                    if (isEip) {
                        return json;
                    }
                }
            }
        } catch (IOException e) {
            // ignore
        }
        return null;
    }

    private EipModel generateEipModel(String json) {
        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("model", json, false);

        EipModel eip = new EipModel();
        eip.setName(JSonSchemaHelper.getSafeValue("name", rows));
        eip.setTitle(JSonSchemaHelper.getSafeValue("title", rows));
        eip.setDescription(JSonSchemaHelper.getSafeValue("description", rows));
        eip.setJavaType(JSonSchemaHelper.getSafeValue("javaType", rows));
        eip.setLabel(JSonSchemaHelper.getSafeValue("label", rows));
        eip.setDeprecated("true".equals(JSonSchemaHelper.getSafeValue("deprecated", rows)));
        eip.setInput("true".equals(JSonSchemaHelper.getSafeValue("input", rows)));
        eip.setOutput("true".equals(JSonSchemaHelper.getSafeValue("output", rows)));

        return eip;
    }

            String template = loadText(UpdateReadmeMojo.class.getClassLoader().getResourceAsStream("component-header.mvel"));
            String template = loadText(UpdateReadmeMojo.class.getClassLoader().getResourceAsStream("component-options.mvel"));
            String template = loadText(UpdateReadmeMojo.class.getClassLoader().getResourceAsStream("endpoint-options.mvel"));
            String template = loadText(UpdateReadmeMojo.class.getClassLoader().getResourceAsStream("dataformat-options.mvel"));
            String template = loadText(UpdateReadmeMojo.class.getClassLoader().getResourceAsStream("language-options.mvel"));
            String out = (String) TemplateRuntime.eval(template, model);
            return out;
        } catch (Exception e) {
            throw new MojoExecutionException("Error processing mvel template. Reason: "  e, e);
        }
    }

    private String templateEipOptions(EipModel model) throws MojoExecutionException {
        try {
            String template = loadText(UpdateReadmeMojo.class.getClassLoader().getResourceAsStream("eip-options.mvel"));
    private List<String> findEipNames() {
        List<String> eipNames = new ArrayList<String>();
        // TODO: find by scanning model (prepare catalog does something)
        return eipNames;
    }

