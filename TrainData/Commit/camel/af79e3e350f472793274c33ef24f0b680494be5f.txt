                calculateAndSetMaxRequestsPerPeriod(delayQ, exchange, key);
                calculateAndSetMaxRequestsPerPeriod(exchange);

    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
        synchronized (this) {
            if (newThrottle == null && throttleRate == 0) {
                if (newThrottle != throttleRate) {
                    if (throttleRate > newThrottle) {
                        int delta = throttleRate - newThrottle;
                        log.debug("Throttle rate decreased from {} to {}, triggered by ExchangeId: {}", throttleRate, newThrottle, exchange.getExchangeId());
                    } else if (newThrottle > throttleRate) {
                        int delta = newThrottle - throttleRate;
                        if (throttleRate == 0) {
                            log.debug("Throttle rate increase from {} to {}, triggered by ExchangeId: {}", throttleRate, newThrottle, exchange.getExchangeId());
                    throttleRate = newThrottle;
                }
            }
        }
    }
    
    /**
     * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
     */
    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
        Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);

        if (newThrottle != null && newThrottle < 0) {
            throw new IllegalStateException("The maximumRequestsPerPeriod must be a positive number, was: "  newThrottle);
        }

        synchronized (key) {
            if (newThrottle == null && throttleRatesMap.get(key) == 0) {
                throw new RuntimeExchangeException("The maxRequestsPerPeriodExpression was evaluated as null: "  maxRequestsPerPeriodExpression, exchange);
            }

            if (newThrottle != null) {
                if (newThrottle != throttleRatesMap.get(key)) {
                    // get the queue from the cache
                    // decrease
                    if (throttleRatesMap.get(key) > newThrottle) {
                        int delta = throttleRatesMap.get(key) - newThrottle;

                        // discard any permits that are needed to decrease throttling
                        while (delta > 0) {
                            delayQueue.take();
                            delta--;
                            log.trace("Permit discarded due to throttling rate decrease, triggered by ExchangeId: {}", exchange.getExchangeId());
                        }
                        log.debug("Throttle rate decreased from {} to {}, triggered by ExchangeId: {}", throttleRatesMap.get(key), newThrottle, exchange.getExchangeId());

                    // increase
                    } else if (newThrottle > throttleRatesMap.get(key)) {
                        int delta = newThrottle - throttleRatesMap.get(key);
                        for (int i = 0; i < delta; i) {
                            delayQueue.put(new ThrottlePermit(-1));
                        }
                        if (throttleRatesMap.get(key) == 0) {
                            log.debug("Initial throttle rate set to {}, triggered by ExchangeId: {}", newThrottle, exchange.getExchangeId());
                        } else {
                            log.debug("Throttle rate increase from {} to {}, triggered by ExchangeId: {}", throttleRatesMap.get(key), newThrottle, exchange.getExchangeId());
                        }
                    throttleRatesMap.put(key, newThrottle);
