package org.apache.camel.component.crypto.cms.springboot;

import javax.annotation.Generated;
import org.apache.camel.component.crypto.cms.crypt.EnvelopedDataDecryptorConfiguration;
import org.apache.camel.component.crypto.cms.sig.SignedDataVerifierConfiguration;
import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.NestedConfigurationProperty;

/**
 * Camel Cryptographic Message Syntax Support
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo")
@ConfigurationProperties(prefix = "camel.component.crypto-cms")
public class CryptoCmsComponentConfiguration
        extends
            ComponentConfigurationPropertiesCommon {

    /**
     * To configure the shared SignedDataVerifierConfiguration which determines
     * the uri parameters for the verify operation.
     */
    @NestedConfigurationProperty
    private SignedDataVerifierConfiguration signedDataVerifierConfiguration;
    /**
     * To configure the shared EnvelopedDataDecryptorConfiguration which
     * determines the uri parameters for the decrypt operation.
     */
    @NestedConfigurationProperty
    private EnvelopedDataDecryptorConfiguration envelopedDataDecryptorConfiguration;
    /**
     * Whether the component should resolve property placeholders on itself when
     * starting. Only properties which are of String type can use property
     * placeholders.
     */
    private Boolean resolvePropertyPlaceholders = true;

    public SignedDataVerifierConfiguration getSignedDataVerifierConfiguration() {
        return signedDataVerifierConfiguration;
    }

    public void setSignedDataVerifierConfiguration(
            SignedDataVerifierConfiguration signedDataVerifierConfiguration) {
        this.signedDataVerifierConfiguration = signedDataVerifierConfiguration;
    }

    public EnvelopedDataDecryptorConfiguration getEnvelopedDataDecryptorConfiguration() {
        return envelopedDataDecryptorConfiguration;
    }

    public void setEnvelopedDataDecryptorConfiguration(
            EnvelopedDataDecryptorConfiguration envelopedDataDecryptorConfiguration) {
        this.envelopedDataDecryptorConfiguration = envelopedDataDecryptorConfiguration;
    }

    public Boolean getResolvePropertyPlaceholders() {
        return resolvePropertyPlaceholders;
    }

    public void setResolvePropertyPlaceholders(
            Boolean resolvePropertyPlaceholders) {
        this.resolvePropertyPlaceholders = resolvePropertyPlaceholders;
    }
