import java.util.HashSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
    private final ConcurrentMap<String, ChildData<T>> currentData = new ConcurrentHashMap<>();
        LOG.info("Starting ZK Group for path: {}", path);
        List<ChildData> answer = new ArrayList<>();
        answer.addAll(currentData.values());
        return answer;
        listeners.forEach(listener -> {
            try {
                listener.groupEvent(ZooKeeperGroup.this, event);
            } catch (Exception e) {
                handleException(e);
            return null;
        }
        List<String> fullPaths = children.stream().map(c -> ZKPaths.makePath(path, c)).collect(Collectors.toList());

        Set<String> removedNodes = new HashSet<>(currentData.keySet());
        // operations.remove(operation);   // avoids herding for refresh operations
