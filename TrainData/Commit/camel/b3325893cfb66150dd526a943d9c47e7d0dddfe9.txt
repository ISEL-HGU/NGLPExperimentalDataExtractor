import java.net.URI;
import java.util.*;
import org.apache.camel.Endpoint;
    private static Map<String, SegmentDecorator> decorators = new HashMap<>();

    static {
        ServiceLoader.load(SegmentDecorator.class).forEach(d -> {
            SegmentDecorator existing = decorators.get(d.getComponent());
            // Add segment decorator only if no existing decorator for the component exists yet or if we have have a
            // derived one. This allows custom decorators to be added if they extend the standard decorators
            if (existing == null || existing.getClass().isInstance(d)) {
                decorators.put(d.getComponent(), d);
            }
        });
    }

     * @param tracingStrategy The instance which tracks invoked EIP and beans
    public void setTracingStrategy(InterceptStrategy tracingStrategy) {
        this.tracingStrategy = tracingStrategy;
    protected SegmentDecorator getSegmentDecorator(Endpoint endpoint) {
        SegmentDecorator sd = decorators.get(URI.create(endpoint.getEndpointUri()).getScheme());
        if (null == sd) {
            return SegmentDecorator.DEFAULT;
        }
        return sd;
    }

                SegmentDecorator sd = getSegmentDecorator(ese.getEndpoint());
                if (!sd.newSegment()) {
                    return;
                }

//                    // AWS XRay does only allow a certain set of characters to appear within a name
//                    // Allowed characters: a-z, A-Z, 0-9, _, ., :, /, %, &, #, =, , \, -, @
                    Subsegment subsegment = AWSXRay.beginSubsegment(sd.getOperationName(ese.getExchange(), ese.getEndpoint()));
                    sd.pre(subsegment, ese.getExchange(), ese.getEndpoint());
                SegmentDecorator sd = getSegmentDecorator(ese.getEndpoint());

                    sd.post(subsegment, ese.getExchange(), ese.getEndpoint());

        @Override
        public String toString() {
            return "XRayEventNotifier";
        }
            SegmentDecorator sd = getSegmentDecorator(route.getEndpoint());
                sd.pre(segment, exchange, route.getEndpoint());
                sd.pre(subsegment, exchange, route.getEndpoint());
            SegmentDecorator sd = getSegmentDecorator(route.getEndpoint());
                sd.post(subsegment, exchange, route.getEndpoint());
                sd.post(segment, exchange, route.getEndpoint());

        @Override
        public String toString() {
            return "XRayRoutePolicy";
        }
