import org.dozer.metadata.ClassMappingMetadata;
import org.dozer.metadata.MappingMetadata;
    private transient Mapper mapper;
     * {@link CamelContext} for instances of {@link Mapper}. Each
            MapperFactory factory = new MapperFactory(camelContext, configuration);
            Mapper mapper = factory.create();
    public void init(CamelContext camelContext, Mapper mapper) {
            Map<String, Mapper> mappers = lookupDozerBeanMappers();

                    MapperFactory factory = new MapperFactory(getCamelContext(), entry.getValue());
                    Mapper beanMapper = factory.create();

            log.info("Loaded {} Dozer mappers from Camel registry.", mappers.size());

            if (mappers.size() == 0) {
                log.warn("No Dozer mappers found in Camel registry. You should add Dozer mappers as beans to the registry of the type: {}", Mapper.class.getName());
            for (Map.Entry<String, Mapper> entry : mappers.entrySet()) {
                Mapper dozer = entry.getValue();

                MappingMetadata meta = dozer.getMappingMetadata();

                List<ClassMappingMetadata> all = meta.getClassMappings();
     * Lookup the dozer {@link Mapper} to be used.
    protected Map<String, Mapper> lookupDozerBeanMappers() {
        return new HashMap<String, Mapper>(camelContext.getRegistry().findByTypeWithName(Mapper.class));
    protected void registerClassMaps(TypeConverterRegistry registry, String dozerId, Mapper dozer, List<ClassMappingMetadata> all) {
        for (ClassMappingMetadata map : all) {
            addDozerTypeConverter(registry, converter, dozerId, map.getSourceClass(), map.getDestinationClass());

            if (map.getMappingDirection() != ONE_WAY) {
                addDozerTypeConverter(registry, converter, dozerId, map.getDestinationClass(), map.getSourceClass());
                log.info("Added Dozer: {} as Camel type converter: {} -> {}", new Object[] {dozerId, from, to});
                log.info("Added Dozer as Camel type converter: {} -> {}", new Object[] {from, to});

     * The reason why {@link #init(org.apache.camel.CamelContext, org.dozer.Mapper)} is also called
    public Mapper getMapper() {
    public void setMapper(Mapper mapper) {
