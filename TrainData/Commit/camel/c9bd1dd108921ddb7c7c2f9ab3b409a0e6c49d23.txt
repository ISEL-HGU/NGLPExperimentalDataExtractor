import java.util.HashSet;
    private final ThreadLocal<Set<String>> componentsInCreation = ThreadLocal.withInitial(HashSet::new);
        // Check if the named component is already being created, that would mean
        // that the initComponent has triggered a new getComponent
        if (componentsInCreation.get().contains(name)) {
            throw new IllegalStateException("Circular dependency detected, the component "  name  " is already being created");
        }

        try {
            // atomic operation to get/create a component. Avoid global locks.
            return components.computeIfAbsent(name, comp -> initComponent(name, autoCreateComponents, autoStart));
        } finally {
            // cremove the reference to the component being created
            componentsInCreation.get().remove(name);
        }

                // Mark the component as being created so we can detect circular
                // requests.
                //
                // In spring apps, the component resolver may trigger a new getComponent
                // because of the underlying bean factory and as the endpoints are
                // registered as singleton, the spring factory creates the bean
                // and then check the type so the getComponent is always triggered.
                //
                // Simple circular dependency:
                //
                //   <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
                //     <route>
                //       <from id="twitter" uri="twitter://timeline/home?type=polling"/>
                //       <log message="Got ${body}"/>
                //     </route>
                //   </camelContext>
                //
                // Complex circular dependency:
                //
                //   <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
                //     <route>
                //       <from id="log" uri="seda:test"/>
                //       <to id="seda" uri="log:test"/>
                //     </route>
                //   </camelContext>
                //
                // This would freeze the app (lock or infinite loop).
                //
                // See https://issues.apache.org/jira/browse/CAMEL-11225
                componentsInCreation.get().add(name);

                        // If the component is looked up after the context is started,
                        // lets start it up.
