import org.apache.camel.spi.PackageScanClassResolver;
import org.apache.camel.support.SimpleTypeConverter;
        DefaultTypeConverter answer = new OsgiDefaultTypeConverter(new DefaultPackageScanClassResolver() {
    private class OsgiDefaultTypeConverter extends DefaultTypeConverter {

        public OsgiDefaultTypeConverter(PackageScanClassResolver resolver, Injector injector, FactoryFinder factoryFinder, boolean loadTypeConverters) {
            super(resolver, injector, factoryFinder, loadTypeConverters);
        }

        @Override
        public void addTypeConverter(Class<?> toType, Class<?> fromType, TypeConverter typeConverter) {
            // favour keeping the converter that was loaded via TypeConverterLoader META-INF file
            // as OSGi loads these first and then gets triggered again later when there is both a META-INF/TypeConverter and META-INF/TypeConverterLoaded file
            // for the same set of type converters and we get duplicates (so this is a way of filtering out duplicates)
            TypeConverter converter = typeMappings.get(toType, fromType);
            if (converter != null && converter != typeConverter) {
                // the converter is already there which we want to keep (optimized via SimpleTypeConverter)
                if (converter instanceof SimpleTypeConverter) {
                    // okay keep this one
                    return;
                }
            }
            super.addTypeConverter(toType, fromType, typeConverter);
        }
    }

