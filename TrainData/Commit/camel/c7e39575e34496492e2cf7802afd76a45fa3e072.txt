import org.apache.camel.component.kafka.KafkaManualCommitFactory;
     * Whether to allow doing manual commits via KafkaManualCommit. If this
     * option is enabled then an instance of KafkaManualCommit is stored on the
     * Exchange message header which allows end users to access this API and
     * perform manual offset commits via the Kafka consumer.
     */
    private Boolean allowManualCommit = false;
    /**
     * Factory to use for creating KafkaManualCommit instances. This allows to
     * plugin a custom factory to create custom KafkaManualCommit instances in
     * case special logic is needed when doing manual commits that deviates from
     * the default implementation that comes out of the box.
     */
    @NestedConfigurationProperty
    private KafkaManualCommitFactory kafkaManualCommitFactory;
    /**
    public Boolean getAllowManualCommit() {
        return allowManualCommit;
    }

    public void setAllowManualCommit(Boolean allowManualCommit) {
        this.allowManualCommit = allowManualCommit;
    }

    public KafkaManualCommitFactory getKafkaManualCommitFactory() {
        return kafkaManualCommitFactory;
    }

    public void setKafkaManualCommitFactory(
            KafkaManualCommitFactory kafkaManualCommitFactory) {
        this.kafkaManualCommitFactory = kafkaManualCommitFactory;
    }

         * Whether to allow doing manual commits via {@link KafkaManualCommit} .
         * <p/>
         * If this option is enabled then an instance of
         * {@link KafkaManualCommit} is stored on the {@link Exchange} message
         * header, which allows end users to access this API and perform manual
         * offset commits via the Kafka consumer.
         */
        private Boolean allowManualCommit = false;
        /**
        public Boolean getAllowManualCommit() {
            return allowManualCommit;
        }

        public void setAllowManualCommit(Boolean allowManualCommit) {
            this.allowManualCommit = allowManualCommit;
        }

