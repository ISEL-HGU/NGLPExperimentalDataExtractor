 * Autogenerated by Thrift Compiler (0.10.0)
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-14")
  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WorkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WorkTupleSchemeFactory();
  public java.lang.String comment; // optional
    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
      if (fields == null) throw new java.lang.IllegalArgumentException("Field "  fieldId  " doesn't exist!");
    public static _Fields findByName(java.lang.String name) {
    private final java.lang.String _fieldName;
    _Fields(short thriftId, java.lang.String fieldName) {
    public java.lang.String getFieldName() {
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
  public java.lang.String getComment() {
  public Work setComment(java.lang.String comment) {
  public void setFieldValue(_Fields field, java.lang.Object value) {
        setNum1((java.lang.Integer)value);
        setNum2((java.lang.Integer)value);
        setComment((java.lang.String)value);
  public java.lang.Object getFieldValue(_Fields field) {
    throw new java.lang.IllegalStateException();
      throw new java.lang.IllegalArgumentException();
    throw new java.lang.IllegalStateException();
  public boolean equals(java.lang.Object that) {
    if (this == that)
      return true;
    int hashCode = 1;
    hashCode = hashCode * 8191  num1;
    hashCode = hashCode * 8191  num2;
    hashCode = hashCode * 8191  ((isSetOp()) ? 131071 : 524287);
    if (isSetOp())
      hashCode = hashCode * 8191  op.getValue();
    hashCode = hashCode * 8191  ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191  comment.hashCode();
    return hashCode;
    lastComparison = java.lang.Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
    lastComparison = java.lang.Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
    lastComparison = java.lang.Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    scheme(iprot).read(iprot, this);
    scheme(oprot).write(oprot, this);
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Work(");
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
  private static class WorkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  private static class WorkStandardScheme extends org.apache.thrift.scheme.StandardScheme<Work> {
  private static class WorkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
  private static class WorkTupleScheme extends org.apache.thrift.scheme.TupleScheme<Work> {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
