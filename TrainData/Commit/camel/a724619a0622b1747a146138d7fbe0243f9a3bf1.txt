import org.apache.camel.parser.model.CamelRouteDetails;
    /**
     * Whether to validate for duplicate route ids. Route ids should be unique and if there are duplicates
     * then Camel will fail to startup.
     *
     * @parameter property="camel.duplicateRouteId"
     *            default-value="true"
     */
    private boolean duplicateRouteId;

        List<CamelRouteDetails> routeIds = new ArrayList<>();
                    List<CamelRouteDetails> fileRouteIds = new ArrayList<>();
                        if (duplicateRouteId) {
                            RouteBuilderParser.parseRouteBuilderRouteIds(clazz, baseDir, fqn, fileRouteIds);
                        }
                        routeIds.addAll(fileRouteIds);
                    List<CamelRouteDetails> fileRouteIds = new ArrayList<>();
                    if (duplicateRouteId) {
                        // need a new stream
                        is = new FileInputStream(file);
                        XmlRouteParser.parseXmlRouteRouteIds(is, baseDir, fqn, fileRouteIds);
                        is.close();
                    }

                    routeIds.addAll(fileRouteIds);

        int duplicateRouteIdErrors = 0;
        if (duplicateRouteId) {

            // filter out all non uniques
            for (CamelRouteDetails detail : routeIds) {
                // skip empty route ids
                if (detail.getRouteId() == null || "".equals(detail.getRouteId())) {
                    continue;
                }
                int count = countRouteId(routeIds, detail.getRouteId());
                if (count > 1) {
                    duplicateRouteIdErrors;

                    StringBuilder sb = new StringBuilder();
                    sb.append("Duplicate route id validation error at: ");
                    if (detail.getClassName() != null && detail.getLineNumber() != null) {
                        // this is from java code
                        sb.append(detail.getClassName());
                        if (detail.getMethodName() != null) {
                            sb.append(".").append(detail.getMethodName());
                        }
                        sb.append("(").append(asSimpleClassName(detail.getClassName())).append(".java:");
                        sb.append(detail.getLineNumber()).append(")");
                    } else if (detail.getLineNumber() != null) {
                        // this is from xml
                        String fqn = stripRootPath(asRelativeFile(detail.getFileName()));
                        if (fqn.endsWith(".xml")) {
                            fqn = fqn.substring(0, fqn.length() - 4);
                            fqn = asPackageName(fqn);
                        }
                        sb.append(fqn);
                        sb.append("(").append(asSimpleClassName(fqn)).append(".xml:");
                        sb.append(detail.getLineNumber()).append(")");
                    } else {
                        sb.append(detail.getFileName());
                    }
                    sb.append("\n");
                    sb.append("\n\t").append(detail.getRouteId());
                    sb.append("\n\n");

                    getLog().warn(sb.toString());
                } else if (showAll) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("Duplicate route id validation passed at: ");
                    if (detail.getClassName() != null && detail.getLineNumber() != null) {
                        // this is from java code
                        sb.append(detail.getClassName());
                        if (detail.getMethodName() != null) {
                            sb.append(".").append(detail.getMethodName());
                        }
                        sb.append("(").append(asSimpleClassName(detail.getClassName())).append(".java:");
                        sb.append(detail.getLineNumber()).append(")");
                    } else if (detail.getLineNumber() != null) {
                        // this is from xml
                        String fqn = stripRootPath(asRelativeFile(detail.getFileName()));
                        if (fqn.endsWith(".xml")) {
                            fqn = fqn.substring(0, fqn.length() - 4);
                            fqn = asPackageName(fqn);
                        }
                        sb.append(fqn);
                        sb.append("(").append(asSimpleClassName(fqn)).append(".xml:");
                        sb.append(detail.getLineNumber()).append(")");
                    } else {
                        sb.append(detail.getFileName());
                    }
                    sb.append("\n");
                    sb.append("\n\t").append(detail.getRouteId());
                    sb.append("\n\n");

                    getLog().info(sb.toString());
                }
            }
        }

        String routeIdSummary = "";
        if (duplicateRouteId) {
            if (duplicateRouteIdErrors == 0) {
                routeIdSummary = String.format("Duplicate route id validation success (%s = ids)", routeIds.size());
            } else {
                routeIdSummary = String.format("Duplicate route id validation error: (%s = ids, %s = duplicates)", routeIds.size(), duplicateRouteIdErrors);
            }

            if (duplicateRouteIdErrors > 0) {
                getLog().warn(routeIdSummary);
            } else {
                getLog().info(routeIdSummary);
            }
        }

        if (failOnError && (endpointErrors > 0 || simpleErrors > 0 || duplicateRouteIdErrors > 0)) {
            throw new MojoExecutionException(endpointSummary  "\n"  simpleSummary  "\n"  routeIdSummary);
        }
    private static int countRouteId(List<CamelRouteDetails> details, String routeId) {
        int answer = 0;
        for (CamelRouteDetails detail : details) {
            if (routeId.equals(detail.getRouteId())) {
                answer;
            }
        }
        return answer;
    }

