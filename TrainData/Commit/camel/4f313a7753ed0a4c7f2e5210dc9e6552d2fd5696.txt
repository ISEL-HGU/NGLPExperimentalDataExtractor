import org.apache.camel.Exchange;
import org.apache.camel.ExchangePattern;
import org.apache.camel.Message;
import org.apache.camel.RuntimeCamelException;
import org.apache.camel.component.slack.helper.SlackMessage;
import org.apache.camel.util.ObjectHelper;
import org.json.simple.JSONObject;
@UriEndpoint(firstVersion = "2.16.0", scheme = "slack", title = "Slack", syntax = "slack:channel", label = "social")
    @UriPath
    @Metadata(required = "true")
    @UriParam(label = "producer")
    @UriParam(label = "producer", secret = true)
    @UriParam(label = "producer")
    @UriParam(label = "producer")
    @UriParam(label = "consumer", secret = true)
    private String token;
    @UriParam(label = "consumer", defaultValue = "10")
    private String maxResults = "10";
        if (ObjectHelper.isEmpty(token)) {
            throw new RuntimeCamelException("Missing required endpoint configuration: token must be defined for Slack consumer");
        }
        SlackConsumer consumer = new SlackConsumer(this, processor);
        return consumer;
     * The channel name (syntax #name) or slackuser (syntax @userName) to send a
     * message directly to an user.
     * This is the username that the bot will have when sending messages to a
     * channel or user.
     * The avatar that the component will use when sending message to a channel
     * or user.
    public String getToken() {
        return token;
    }

    /**
     * The token to use
     */
    public void setToken(String token) {
        this.token = token;
    }

    public String getMaxResults() {
        return maxResults;
    }

    /**
     * The Max Result for the poll
     */
    public void setMaxResults(String maxResult) {
        this.maxResults = maxResult;
    }

    public Exchange createExchange(JSONObject object) {
        return createExchange(getExchangePattern(), object);
    }

    public Exchange createExchange(ExchangePattern pattern, JSONObject object) {
        Exchange exchange = super.createExchange(pattern);
        SlackMessage slackMessage = new SlackMessage();
        String text = (String)object.get("text");
        String username = (String)object.get("username");
        slackMessage.setText(text);
        slackMessage.setUsername(username);
        if (ObjectHelper.isNotEmpty((JSONObject)object.get("icons"))) {
            JSONObject icons = (JSONObject)object.get("icons");
            if (ObjectHelper.isNotEmpty((String)icons.get("emoji"))) {
                slackMessage.setIconEmoji((String)icons.get("emoji"));
            }
        }
        Message message = exchange.getIn();
        message.setBody(slackMessage);
        return exchange;
    }
}
