import org.lightcouch.CouchDbException;
    private static final int MAX_DB_ERROR_REPEATS = 8;
        initChanges(null);
    private void initChanges(final String sequence) {
        String since = sequence;
        if (null == since) {
        LOG.debug("Last sequence [{}]", since);
        String lastSequence = null;
        try {
            while (!stopped) {

                try {
                    while (changes.hasNext()) { // blocks until a feed is received
                        ChangesResult.Row feed = changes.next();
                        if (feed.isDeleted() && !endpoint.isDeletes()) {
                            continue;
                        }
                        if (!feed.isDeleted() && !endpoint.isUpdates()) {
                            continue;
                        }

                        lastSequence = feed.getSeq();
                        JsonObject doc = feed.getDoc();

                        Exchange exchange = endpoint.createExchange(lastSequence, feed.getId(), doc, feed.isDeleted());
                        if (LOG.isTraceEnabled()) {
                            LOG.trace("Created exchange [exchange={}, _id={}, seq={}", new Object[]{exchange, feed.getId(), lastSequence});
                        }

                        try {
                            consumer.getProcessor().process(exchange);
                        } catch (Exception e) {
                            consumer.getExceptionHandler().handleException("Error processing exchange.", exchange, e);
                        }
                    }

                    stopped = true;

                } catch (CouchDbException e) {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("CouchDb Exception encountered waiting for changes!  Attempting to recover...", e);
                    }
                    if (!waitForStability(lastSequence)) { 
                        throw e;
                    }
                }
            }
        } catch (Exception e) {
            LOG.error("Unexpected error causing CouchDb change tracker to exit!", e);
        }
    }

    private boolean waitForStability(final String lastSequence) {

        boolean problems = true;
        int repeatDbErrorCount = 0;

        while (problems) {
            if (repeatDbErrorCount > MAX_DB_ERROR_REPEATS) {
                LOG.error("CouchDb change set listener fatal error!  Retry attempts exceeded, listener must exit.");
                return false;
                Thread.sleep((int) ((Math.random() * 2000)  5000)); // <2000ms,5000ms)
            } catch (InterruptedException e) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("CouchDb change set listener interrupted waiting for stability!!", e);
                }
            }
            try {
                // Fail fast operation
                couchClient.context().serverVersion();
                // reset change listener
                initChanges(lastSequence);
                problems = false;

                if (LOG.isDebugEnabled()) {
                    LOG.debug("Failed to get CouchDb server version and/or reset change listener!  Attempt: "  repeatDbErrorCount, e);
                }
        return true;
