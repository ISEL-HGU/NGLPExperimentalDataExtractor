import org.apache.camel.util.ReferenceCount;
    private final Set<Route> startedRoutes;
    private final Set<Route> stoppeddRoutes;
    private final ReferenceCount refCount;
    private boolean shouldStopRoute;
        this.stoppeddRoutes = new HashSet<>();
        this.startedRoutes = new HashSet<>();
        this.shouldStopRoute = true;
        this.refCount = ReferenceCount.on(this::startService, this::stopService);
    public synchronized void onInit(Route route) {

        LOGGER.info("Route managed by {}. Setting route {} AutoStartup flag to false.", getClass(), route.getId());
        route.getRouteContext().getRoute().setAutoStartup("false");

        stoppeddRoutes.add(route);

        this.refCount.retain();

        startManagedRoutes();
    public synchronized void doShutdown() {
        this.refCount.release();
    // ****************************************
    // Helpers
    // ****************************************
    private void startService() {
        try {
            this.manager.start();
            this.executorService = getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "InfinispanRoutePolicy");
            if (lifespanTimeUnit.convert(lifespan, TimeUnit.SECONDS) < 2) {
                throw new IllegalArgumentException("Lock lifespan can not be less that 2 seconds");
            }

            BasicCache<String, String> cache = manager.getCache(lockMapName);
            if (manager.isCacheContainerEmbedded()) {
                this.service = new EmbeddedCacheService(InfinispanUtil.asEmbedded(cache));
            } else {
                this.service = new RemoteCacheService(InfinispanUtil.asRemote(cache));
            }

            service.start();
        } catch (Exception e) {
            throw new RuntimeCamelException(e);
    private void stopService() {
        try {
            if (future != null) {
                future.cancel(true);
                future = null;
            }

            manager.stop();

            if (this.service != null) {
                this.service.stop();
            }

            getCamelContext().getExecutorServiceManager().shutdownGraceful(executorService);
        } catch (Exception e) {
            throw new RuntimeCamelException(e);
    private void setLeader(boolean isLeader) {
            startManagedRoutes();
            stopManagedRoutes();
    private synchronized void startManagedRoutes() {
        if (!isLeader()) {
            return;
        }

            for (Route route : stoppeddRoutes) {
                LOGGER.debug("Starting route {}", route.getId());
                startRoute(route);
                startedRoutes.add(route);

            stoppeddRoutes.removeAll(startedRoutes);
    private synchronized void stopManagedRoutes() {
        if (isLeader()) {
            return;
            for (Route route : startedRoutes) {
                LOGGER.debug("Stopping route {}", route.getId());
                stopRoute(route);
                stoppeddRoutes.add(route);
            startedRoutes.removeAll(stoppeddRoutes);
    @ManagedAttribute(description = "Whether to stop route when starting up and failed to become master")
    public boolean isShouldStopRoute() {
        return shouldStopRoute;
    public void setShouldStopRoute(boolean shouldStopRoute) {
        this.shouldStopRoute = shouldStopRoute;
            if (!isRunAllowed()) {
            if (!isRunAllowed()) {
