    public Task schedule(BackOff backOff, ThrowingFunction<Task, Boolean, Exception> function) {
        final BackOffTimerTask task = new BackOffTimerTask(backOff, scheduler, function);
        long delay = task.next();
            task.cancel();
        enum Status {
            Active,
            Inactive,
            Exhausted
        }

         * The back-off associated with this task.
        BackOff getBackOff();

        /**
         * Gets the task status.
         */
        Status getStatus();

        /**
         * The number of attempts so far.
         */
        long getCurrentAttempts();

        /**
         * The current computed delay.
         */
        long getCurrentDelay();

        /**
         * The current elapsed time.
         */
        long getCurrentElapsedTime();

        /**
         * The time the last attempt has been performed.
         */
        long getLastAttemptTime();


        /**
         * An indication about the time the next attempt will be made.
         */
        long getNextAttemptTime();

        /**
         * Reset the task.
         */
        void reset();
        void whenComplete(BiConsumer<Task, Throwable> whenCompleted);
