@Mojo(name = "generate-legal", threadSafe = true, defaultPhase = LifecyclePhase.PREPARE_PACKAGE)
    @Parameter(defaultValue = "${project.build.directory}/classes")
        try (InputStream isLicense = getClass().getResourceAsStream("/camel-LICENSE.txt")) {
            String license = IOUtils.toString(isLicense, StandardCharsets.UTF_8);
            updateResource(legalOutDir.resolve("META-INF").resolve("LICENSE.txt"), license);
            throw new MojoExecutionException("Failed to write legal files. Reason: "  e, e);
        }
        try (InputStream isNotice = getClass().getResourceAsStream("/camel-NOTICE.txt")) {
            String notice = IOUtils.toString(isNotice, StandardCharsets.UTF_8);
            updateResource(legalOutDir.resolve("META-INF").resolve("NOTICE.txt"), notice);
        } catch (IOException e) {
            throw new MojoExecutionException("Failed to write legal files. Reason: "  e, e);
    protected void updateResource(Path out, String data) throws IOException {
        if (Files.isRegularFile(out)) {
            // file already exists
            return;
        }
        if (data == null) {
            if (Files.isRegularFile(out)) {
                Files.delete(out);
            }
        } else {
            Files.createDirectories(out.getParent());
            try (Writer w = Files.newBufferedWriter(out, StandardCharsets.UTF_8)) {
                w.append(data);
            }
