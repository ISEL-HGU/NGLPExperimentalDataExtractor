import java.util.Locale;
import java.util.stream.Collectors;
import static io.netty.handler.codec.http.HttpResponseStatus.OK;

            // special if its an OPTIONS request
            boolean isRestrictedToOptions = handler.getConsumer().getEndpoint().getHttpMethodRestrict() != null
                && handler.getConsumer().getEndpoint().getHttpMethodRestrict().contains("OPTIONS");
            if ("OPTIONS".equals(request.method().name()) && !isRestrictedToOptions) {
                String allowedMethods = CamelServlet.METHODS.stream().filter((m) -> isHttpMethodAllowed(request, m)).collect(Collectors.joining(","));
                if (allowedMethods == null && handler.getConsumer().getEndpoint().getHttpMethodRestrict() != null) {
                    allowedMethods = handler.getConsumer().getEndpoint().getHttpMethodRestrict();
                }

                if (allowedMethods == null) {
                    allowedMethods = "GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH";
                }

                if (!allowedMethods.contains("OPTIONS")) {
                    allowedMethods = allowedMethods  ",OPTIONS";
                }

                HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK);
                response.headers().set(Exchange.CONTENT_TYPE, "text/plain");
                response.headers().set(Exchange.CONTENT_LENGTH, 0);
                response.headers().set("Allow", allowedMethods);
                ctx.writeAndFlush(response);
                ctx.close();
            } else {
                Attribute<HttpServerChannelHandler> attr = ctx.channel().attr(SERVER_HANDLER_KEY);
                // store handler as attachment
                attr.set(handler);
                if (msg instanceof HttpContent) {
                    // need to hold the reference of content
                    HttpContent httpContent = (HttpContent) msg;
                    httpContent.content().retain();
                }
                handler.channelRead(ctx, request);
            }

        List<HttpServerChannelHandler> candidates = new ArrayList<>();
                    candidates.add(handler);
        // extra filter by restrict
        candidates = candidates.stream().filter(c -> matchRestMethod(method, c.getConsumer().getEndpoint().getHttpMethodRestrict())).collect(Collectors.toList());
        if (candidates.size() == 1) {
            answer = candidates.get(0);
        }

    private static boolean matchRestMethod(String method, String restrict) {
        return restrict == null || restrict.toLowerCase(Locale.ENGLISH).contains(method.toLowerCase(Locale.ENGLISH));
    }

