
    DestinationSource source;
    
    private EnhancedConnection connection;
    private final CopyOnWriteArrayList<SingleConnectionFactory> singleConnectionFactoryList = new CopyOnWriteArrayList<SingleConnectionFactory>();
    private final CopyOnWriteArrayList<Service> pooledConnectionFactoryServiceList = new CopyOnWriteArrayList<Service>();

    
    /**
     * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ
     * Component</a>
     *
     * @return the created component
     */
    public static ActiveMQComponent activeMQComponent() {
        return new ActiveMQComponent();
    }
    
    /**
     * Creates an <a href="http://camel.apache.org/activemq.html">ActiveMQ
     * Component</a> connecting to the given
     * <a href="http://activemq.apache.org/configuring-transports.html">broker
     * URL</a>
     *
     * @param brokerURL the URL to connect to
     * @return the created component
     */
    public static ActiveMQComponent activeMQComponent(String brokerURL) {
        ActiveMQComponent answer = new ActiveMQComponent();
        if (answer.getConfiguration() instanceof ActiveMQConfiguration) {
            ((ActiveMQConfiguration)answer.getConfiguration()).setBrokerURL(brokerURL);
        }

        return answer;
    }
     * <a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ
     * URI format</a>
     * If enabled this will cause all Queues in the ActiveMQ broker to be
     * eagerly populated into the CamelContext so that they can be easily
     * browsed by any Camel tooling. This option is disabled by default.
     * Enables or disables whether a PooledConnectionFactory will be used so
     * that when messages are sent to ActiveMQ from outside of a message
     * consuming thread, pooling will be used rather than the default with the
     * Spring {@link JmsTemplate} which will create a new connection, session,
     * producer for each message then close them all down again.
     * The default value is true. Note that this requires an extra dependency on
     * commons-pool2.
     * Enables or disables whether a Spring {@link SingleConnectionFactory} will
     * be used so that when messages are sent to ActiveMQ from outside of a
     * message consuming thread, pooling will be used rather than the default
     * with the Spring {@link JmsTemplate} which will create a new connection,
     * session, producer for each message then close them all down again.
        // if we have destination options then append them to the destination
        // name
        // use OriginalDestinationPropagateStrategy by default if no custom
        // stategy has
        // been set
                        connection = (EnhancedConnection)value;
            ((ActiveMQConfiguration)configuration).setActiveMQComponent(this);
