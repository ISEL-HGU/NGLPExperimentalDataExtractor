import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;
import org.apache.camel.EndpointConfiguration;
import org.apache.camel.component.salesforce.SalesforceEndpoint;
import org.apache.camel.component.salesforce.SalesforceEndpointConfig;
    static final CometDReplayExtension REPLAY_EXTENSION = new CometDReplayExtension();

    BayeuxClient client;
    public SubscriptionHelper(final SalesforceComponent component) throws SalesforceException {
        // create CometD client
        this.client = createClient(component);


        client = null;
    static BayeuxClient createClient(final SalesforceComponent component) throws SalesforceException {

        // added eagerly to check for support during handshake
        client.addExtension(REPLAY_EXTENSION);

        setupReplay((SalesforceEndpoint) consumer.getEndpoint());

    void setupReplay(final SalesforceEndpoint endpoint) {
        final String topicName = endpoint.getTopicName();

        final Optional<Integer> replayId = determineReplayIdFor(endpoint, topicName);
        if (replayId.isPresent()) {
            final String channelName = getChannelName(topicName);

            REPLAY_EXTENSION.addTopicReplayId(channelName, replayId.get());
        }
    }

    static Optional<Integer> determineReplayIdFor(final SalesforceEndpoint endpoint, final String topicName) {
        final String channelName = getChannelName(topicName);

        final SalesforceComponent component = endpoint.getComponent();

        final SalesforceEndpointConfig endpointConfiguration = endpoint.getConfiguration();
        final Map<String, Integer> endpointInitialReplayIdMap = endpointConfiguration.getInitialReplayIdMap();
        final Integer endpointReplayId = endpointInitialReplayIdMap.getOrDefault(topicName, endpointInitialReplayIdMap.get(channelName));
        final Integer endpointDefaultReplayId = endpointConfiguration.getDefaultReplayId();

        final SalesforceEndpointConfig componentConfiguration = component.getConfig();
        final Map<String, Integer> componentInitialReplayIdMap = componentConfiguration.getInitialReplayIdMap();
        final Integer componentReplayId = componentInitialReplayIdMap.getOrDefault(topicName, componentInitialReplayIdMap.get(channelName));
        final Integer componentDefaultReplayId = componentConfiguration.getDefaultReplayId();

        // the endpoint values have priority over component values, and the default values posteriority
        // over give topic values
        return Stream.of(endpointReplayId, componentReplayId, endpointDefaultReplayId, componentDefaultReplayId)
            .filter(Objects::nonNull).findFirst();
    }

