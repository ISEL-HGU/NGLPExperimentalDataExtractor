import java.lang.reflect.Constructor;
import java.lang.reflect.Modifier;
import java.lang.reflect.Parameter;
import org.apache.bval.util.ObjectUtils;
    public static boolean isAnnotationDirectlyPresent(AnnotatedElement e, Class<? extends Annotation> t) {
        return substitute(e).filter(s -> s.isAnnotationPresent(t)).isPresent();
    public static <T extends Annotation> T getAnnotation(AnnotatedElement e, Class<T> annotationClass) {
        return substitute(e).map(s -> s.getAnnotation(annotationClass)).orElse(null);
    }

    @SuppressWarnings("unchecked")
    public static <T extends Annotation> T[] getDeclaredAnnotationsByType(AnnotatedElement e,
        Class<T> annotationClass) {
        return substitute(e).map(s -> s.getDeclaredAnnotationsByType(annotationClass))
            .orElse((T[]) ObjectUtils.EMPTY_ANNOTATION_ARRAY);
        final Annotation[] declaredAnnotations =
            substitute(e).map(AnnotatedElement::getDeclaredAnnotations).orElse(ObjectUtils.EMPTY_ANNOTATION_ARRAY);
        
    

    private static Optional<AnnotatedElement> substitute(AnnotatedElement e) {
        if (e instanceof Parameter) {
            final Parameter p = (Parameter) e;
            if (p.getDeclaringExecutable() instanceof Constructor<?>) {
                final Constructor<?> ctor = (Constructor<?>) p.getDeclaringExecutable();
                final Class<?> dc = ctor.getDeclaringClass();
                if (!(dc.getDeclaringClass() == null || Modifier.isStatic(dc.getModifiers()))) {
                    // found ctor for non-static inner class
                    final Annotation[][] parameterAnnotations = ctor.getParameterAnnotations();
                    if (parameterAnnotations.length == ctor.getParameterCount() - 1) {
                        final Parameter[] parameters = ctor.getParameters();
                        final int idx = ObjectUtils.indexOf(parameters, p);
                        if (idx == 0) {
                            return Optional.empty();
                        }
                        return Optional.of(parameters[idx - 1]);
                    }
                    Validate.validState(parameterAnnotations.length == ctor.getParameterCount(),
                            "Cannot make sense of parameter annotations of %s", ctor);
                }
            }
        }
        return Optional.of(e);
    }
