import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Map;
import java.util.function.ToIntFunction;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
public abstract class SizeValidator<T> implements ConstraintValidator<Size, T> {
    public static class ForArray<T> extends SizeValidator<T> {
        public static class OfObject extends ForArray<Object[]> {
        }

        public static class OfByte extends ForArray<byte[]> {
        }

        public static class OfShort extends ForArray<short[]> {
        }

        public static class OfInt extends ForArray<int[]> {
        }

        public static class OfLong extends ForArray<long[]> {
        }

        public static class OfChar extends ForArray<char[]> {
        }

        public static class OfFloat extends ForArray<float[]> {
        }

        public static class OfDouble extends ForArray<double[]> {
        }

        public static class OfBoolean extends ForArray<boolean[]> {
        }

        protected ForArray() {
            super(Array::getLength);
        }
    }

    public static class ForCharSequence extends SizeValidator<CharSequence> {
        public ForCharSequence() {
            super(CharSequence::length);
        }
    }

    public static class ForCollection extends SizeValidator<Collection<?>> {

        public ForCollection() {
            super(Collection::size);
        }
    }

    public static class ForMap extends SizeValidator<Map<?, ?>> {
        public ForMap() {
            super(Map::size);
        }
    }

    public static class ForNumber extends SizeValidator<Number> {
        public ForNumber() {
            super(Number::intValue);
        }
    }

    private final ToIntFunction<? super T> sizeOf;

    protected SizeValidator(ToIntFunction<? super T> sizeOf) {
        super();
        this.sizeOf = sizeOf;
    }

     * Configure the constraint validator based on the elements specified at the time it was defined.
     * @param constraint
     *            the constraint definition

    @Override
    public boolean isValid(T value, ConstraintValidatorContext context) {
        if (value == null) {
            return true;
        }
        final int size = sizeOf.applyAsInt(value);
        return min <= size && size <= max;
    }
