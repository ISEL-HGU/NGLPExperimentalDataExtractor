import java.util.function.BiConsumer;
import java.util.function.Consumer;
import javax.validation.spi.ConfigurationState;
import org.apache.bval.jsr.metadata.MetadataBuilder.ForBean;
import org.apache.bval.jsr.metadata.MetadataSource;
import org.apache.bval.jsr.metadata.ValidatorMappingProvider;
 * Uses JAXB to parse constraints.xml based on the validation-mapping XML schema.
public class ValidationMappingParser implements MetadataSource {
    @Override
    public void process(ConfigurationState configurationState,
        Consumer<ValidatorMappingProvider> addValidatorMappingProvider, BiConsumer<Class<?>, ForBean<?>> addBuilder) {
        if (configurationState.isIgnoreXmlConfiguration()) {
            return;
        }
        for (final InputStream xmlStream : configurationState.getMappingStreams()) {
            addValidatorMappingProvider.accept(toMappingProvider(mapping));
            new XmlBuilder(mapping).forBeans().forEach(addBuilder::accept);
    private ValidatorMappingProvider toMappingProvider(ConstraintMappingsType mapping) {
        for (ConstraintDefinitionType constraintDefinition : mapping.getConstraintDefinition()) {
            final Class<?> clazz = loadClass(annotationClassName, mapping.getDefaultPackage());
        return new XmlValidationMappingProvider(validatorMappings,
            cn -> toQualifiedClassName(cn, mapping.getDefaultPackage()));
