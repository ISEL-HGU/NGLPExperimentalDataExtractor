import java.util.Arrays;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
    private static final Logger log = Logger.getLogger(ParticipantFactory.class.getName());
    private final List<ClassLoader> loaders;
    ParticipantFactory(ClassLoader... loaders) {
        this.loaders = Collections.unmodifiableList(Arrays.asList(Validate
            .noNullElements(loaders, "null %s specified at index %d", ClassLoader.class.getSimpleName()).clone()));
        final Set<URL> resources = new LinkedHashSet<>();
        final String resourceName = META_INF_SERVICES  type.getName();
        for (ClassLoader loader : loaders) {
            try {
                for (Enumeration<URL> urls = loader.getResources(resourceName); urls.hasMoreElements();) {
                    resources.add(urls.nextElement());
                }
            } catch (IOException e) {
                log.log(Level.SEVERE, "Error searching for resource(s) "  resourceName, e);
            }
        return resources.stream().map(this::read).flatMap(Collection::stream).<T> map(this::create)
            .collect(ToUnmodifiable.set());
            log.log(Level.SEVERE, "Unable to read resource "  url, e);
            return Collections.emptySet();
        for (ClassLoader loader : loaders) {
            try {
                return (Class<T>) Class.forName(className, true, loader);
            } catch (final ClassNotFoundException ex) {
            }
        throw new ValidationException("Unable to load class "  className);
