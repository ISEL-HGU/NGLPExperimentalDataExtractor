import java.util.LinkedHashSet;
import org.apache.bval.jsr.valueextraction.ValueExtractors;
import org.apache.bval.util.CloseableAble;
public class ConfigurationImpl implements ApacheValidatorConfiguration, ConfigurationState, CloseableAble {
    private final ValueExtractors bootstrapValueExtractors = new ValueExtractors();
    private final ValueExtractors valueExtractors = bootstrapValueExtractors.createChild();
    private final Lazy<BootstrapConfiguration> bootstrapConfiguration = new Lazy<>(this::createBootstrapConfiguration);
    private final Set<InputStream> mappingStreams = new HashSet<>();
    private final Map<String, String> properties = new HashMap<>();
    private ParticipantFactory participantFactory;

        return Collections.unmodifiableSet(new LinkedHashSet<>(valueExtractors.getValueExtractors().values()));
    @Override
    public Closeable getCloseable() {
        if (participantFactory == null) {
            return () -> {
            };
        }
        return participantFactory;
        try {
            if (!ignoreXmlConfiguration) {
                loader = ValidationParser.class.getClassLoader();
                final BootstrapConfiguration xmlBootstrap =
                    ValidationParser.processValidationConfig(getProperties().get(Properties.VALIDATION_XML_PATH), this);
                if (xmlBootstrap != null) {
                    return xmlBootstrap;
                }
            loader = ApacheValidatorFactory.class.getClassLoader();
            return BootstrapConfigurationImpl.DEFAULT;
        } finally {
            participantFactory = new ParticipantFactory(loader);

        bootstrapConfig.getValueExtractorClassNames().stream().<ValueExtractor<?>> map(participantFactory::create)
            .forEach(bootstrapValueExtractors::add);
        Optional.ofNullable(getClassName.get()).<T> map(participantFactory::create).ifPresent(participant::override);
