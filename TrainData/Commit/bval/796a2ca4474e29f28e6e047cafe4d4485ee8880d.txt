import org.apache.bval.util.Validate;
     * Get a {@link ClassLoader} preferring that of {@code clazz} over
     * {@link Thread#getContextClassLoader()} of current {@link Thread}.
     * 
    public static ClassLoader loaderFromClassOrThread(final Class<?> clazz) {
        return Optional.of(clazz).map(Class::getClassLoader)
            .orElseGet(() -> Thread.currentThread().getContextClassLoader());
    }

    /**
     * Get a {@link ClassLoader} preferring
     * {@link Thread#getContextClassLoader()} of current {@link Thread} over
     * that of {@code fallbackClass}.
     * 
     * @param fallbackClass
     * @return {@link ClassLoader}
     */
    public static ClassLoader loaderFromThreadOrClass(final Class<?> fallbackClass) {
        return Optional.of(Thread.currentThread()).map(Thread::getContextClassLoader)
            .orElseGet(() -> Validate.notNull(fallbackClass).getClassLoader());
        return toClass(className, loaderFromClassOrThread(Reflection.class));
    public static Class<?> toClass(String className, boolean resolve, ClassLoader loader)
        throws ClassNotFoundException {
        Validate.notNull(className, "className was null");
            throw new IllegalArgumentException("Cannot instantiate : "  cls, ex);
