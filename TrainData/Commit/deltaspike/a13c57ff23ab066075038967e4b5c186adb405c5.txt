import javax.annotation.PostConstruct;
    private NoOpQueryProcessor noOp;
    private ListResultQueryProcessor listResult;
    private StreamResultQueryProcessor streamResult;
    private ExecuteUpdateQueryProcessor executeUpdate;
    private SingleResultQueryProcessor singleResult;
    
    @PostConstruct
    public void init()
    {
        noOp = new NoOpQueryProcessor();
        listResult = new ListResultQueryProcessor();
        streamResult = new StreamResultQueryProcessor();
        executeUpdate = new ExecuteUpdateQueryProcessor();
        singleResult = new SingleResultQueryProcessor();
    }
    
            return noOp;
        
            return listResult;
        
            return streamResult;
        
            return executeUpdate;

        return singleResult;
    private static final class ListResultQueryProcessor implements QueryProcessor
    private static final class StreamResultQueryProcessor implements QueryProcessor
        // will be cached per @ApplicationScoped
        private boolean initialized;
            if (initialized == false)
            {
                initialized = true;
                try
                {
                    // take the query.getClass() instead of Query.class
                    // as the users might use JPA 2.2 API but still a JPA 2.0 impl (could happen in TomEE soon)
                    getResultStreamMethod = query.getClass().getMethod("getResultStream");
                }
                catch (Exception e)
                {
                    // ignore
                }
            }

            return query.executeUpdate();
