         * Declare the Resolver to return a List of the given Type.
         * When getting value it will be split on each comma (',') character.
         * If a comma is contained in the values it must get escaped with a preceding backslash (&quot;\,&quot;).
         * Any backslash needs to get escaped via double-backslash (&quot;\\&quot;).
         * Note that in property files this leads to &quot;\\\\&quot; as properties escape themselves.
         *
         * @return a TypedResolver for a list of configured comma separated values
         *
         * @since 1.8.0
         */
        TypedResolver<List<T>> asList();

        /**
        private boolean isList = false;

        public TypedResolver<List<T>> asList()
        {
            isList = true;

            return (TypedResolver<List<T>>) this;
        }

        @Override
        @SuppressWarnings("unchecked")
            T value;
            if (isList)
            {
                value = splitAndConvertListValue(valueStr);
            }
            else
            {
                value = convert(valueStr);
            }
        private T splitAndConvertListValue(String valueStr)
        {
            List list = new ArrayList();
            StringBuilder currentValue = new StringBuilder();
            int length = valueStr.length();
            for (int i = 0; i < length; i)
            {
                char c = valueStr.charAt(i);
                if (c == '\\')
                {
                    if (i < length - 1)
                    {
                        char nextC = valueStr.charAt(i  1);
                        currentValue.append(nextC);
                        i;
                    }
                }
                else if (c == ',')
                {
                    String trimedVal = currentValue.toString().trim();
                    if (trimedVal.length() > 0)
                    {
                        list.add(convert(trimedVal));
                    }

                    currentValue.setLength(0);
                }
                else
                {
                    currentValue.append(c);
                }
            }

            String trimedVal = currentValue.toString().trim();
            if (trimedVal.length() > 0)
            {
                list.add(convert(trimedVal));
            }

            return (T) list;
        }

