import org.apache.deltaspike.core.api.config.ConfigResolver;
import org.apache.deltaspike.core.spi.filter.ClassFilter;
import org.apache.deltaspike.core.impl.exclude.CustomProjectStageBeanFilter;
import org.apache.deltaspike.core.impl.exclude.GlobalAlternative;
import org.apache.deltaspike.core.impl.util.AnnotationInstanceUtils;
import org.apache.deltaspike.core.spi.activation.Deactivatable;
import org.apache.deltaspike.core.spi.alternative.AlternativeBeanClassProvider;
import org.apache.deltaspike.core.util.ServiceUtils;
import org.apache.deltaspike.core.util.metadata.builder.AnnotatedTypeBuilder;
    //overruling the filter is supported via config-ordinal - for now only one is supported to keep it simple
    //a custom filter can always delegate to multiple filters
    //(e.g. in combination with ServiceUtils or querying all config-sources explicitly)
    private ClassFilter classFilter;

        boolean isClassFilterActivated = ClassDeactivationUtils.isActivated(ClassFilter.class);

        if (isClassFilterActivated)
        {
            String classFilterClassName = ClassFilter.class.getName();
            String activeClassFilterName =
                ConfigResolver.getProjectStageAwarePropertyValue(classFilterClassName, classFilterClassName);

            if (!classFilterClassName.equals(activeClassFilterName))
            {
                classFilter = ClassUtils.tryToInstantiateClassForName(activeClassFilterName, ClassFilter.class);
            }
        }
        if (classFilter != null)
        {
            Class<?> beanClass = processAnnotatedType.getAnnotatedType().getJavaClass();

            if (classFilter.isFiltered(beanClass))
            {
                veto(processAnnotatedType, classFilter.getClass().getName());
                return;
            }
        }

