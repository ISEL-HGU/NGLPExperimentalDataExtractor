 b/deltaspike/modules/proxy/impl-asm5/src/main/java/org/apache/deltaspike/proxy/impl/AsmDeltaSpikeProxyClassGenerator.java
import org.apache.deltaspike.proxy.spi.invocation.DeltaSpikeProxyInvocationHandler;
import org.apache.deltaspike.proxy.spi.DeltaSpikeProxyClassGenerator;
public class AsmDeltaSpikeProxyClassGenerator implements DeltaSpikeProxyClassGenerator
    private static final String FIELDNAME_INVOCATION_HANDLER = "invocationHandler";
    private static final String FIELDNAME_DELEGATE_METHODS = "delegateMethods";
    private static final Type TYPE_DELTA_SPIKE_PROXY_INVOCATION_HANDLER =
            Type.getType(DeltaSpikeProxyInvocationHandler.class);
    private static final Type TYPE_METHOD_ARRAY = Type.getType(java.lang.reflect.Method[].class);
    private static final Type TYPE_INVOCATION_HANDLER = Type.getType(InvocationHandler.class);
        
        defineDeltaSpikeProxyFields(cw);
        defineDeltaSpikeProxyMethods(cw, proxyType);
                defineMethod(cw, method, proxyType);
                defineMethod(cw, method, proxyType);
    private static void defineDeltaSpikeProxyFields(ClassWriter cw)
        // generates
        // private DeltaSpikeProxyInvocationHandler invocationHandler;
        cw.visitField(Opcodes.ACC_PRIVATE, FIELDNAME_INVOCATION_HANDLER,
                TYPE_DELTA_SPIKE_PROXY_INVOCATION_HANDLER.getDescriptor(), null, null).visitEnd();
        // generates
        // private MyInvocationHandler delegateInvocationHandler;
        cw.visitField(Opcodes.ACC_PRIVATE, FIELDNAME_DELEGATE_INVOCATION_HANDLER,
                TYPE_INVOCATION_HANDLER.getDescriptor(), null, null).visitEnd();
        // generates
        // private Method[] delegateMethods;
        cw.visitField(Opcodes.ACC_PRIVATE, FIELDNAME_DELEGATE_METHODS,
                TYPE_METHOD_ARRAY.getDescriptor(), null, null).visitEnd();
    private static void defineDeltaSpikeProxyMethods(ClassWriter cw, Type proxyType)
            // implement #setInvocationHandler
                    "setInvocationHandler", DeltaSpikeProxyInvocationHandler.class));
            mg.checkCast(TYPE_DELTA_SPIKE_PROXY_INVOCATION_HANDLER);
            mg.putField(proxyType, FIELDNAME_INVOCATION_HANDLER, TYPE_DELTA_SPIKE_PROXY_INVOCATION_HANDLER);
            mg.returnValue();

            mg.visitMaxs(2, 1);
            mg.visitEnd();


            // implement #getInvocationHandler
            asmMethod = Method.getMethod(DeltaSpikeProxy.class.getDeclaredMethod("getInvocationHandler"));
            mg = new GeneratorAdapter(Opcodes.ACC_PUBLIC, asmMethod, null, null, cw);

            mg.visitCode();

            mg.loadThis();
            mg.getField(proxyType, FIELDNAME_INVOCATION_HANDLER, TYPE_DELTA_SPIKE_PROXY_INVOCATION_HANDLER);
            mg.returnValue();

            mg.visitMaxs(2, 1);
            mg.visitEnd();
            
            
            
            
            // implement #setDelegateInvocationHandler
            asmMethod = Method.getMethod(DeltaSpikeProxy.class.getDeclaredMethod(
                    "setDelegateInvocationHandler", InvocationHandler.class));
            mg = new GeneratorAdapter(Opcodes.ACC_PUBLIC, asmMethod, null, null, cw);

            mg.visitCode();

            mg.loadThis();
            mg.loadArg(0);
            mg.checkCast(TYPE_INVOCATION_HANDLER);
            mg.putField(proxyType, FIELDNAME_DELEGATE_INVOCATION_HANDLER, TYPE_INVOCATION_HANDLER);
            mg.getField(proxyType, FIELDNAME_DELEGATE_INVOCATION_HANDLER, TYPE_INVOCATION_HANDLER);
            mg.returnValue();

            mg.visitMaxs(2, 1);
            mg.visitEnd();
            
            
            
            
            // implement #setDelegateMethods
            asmMethod = Method.getMethod(DeltaSpikeProxy.class.getDeclaredMethod(
                    "setDelegateMethods", java.lang.reflect.Method[].class));
            mg = new GeneratorAdapter(Opcodes.ACC_PUBLIC, asmMethod, null, null, cw);

            mg.visitCode();

            mg.loadThis();
            mg.loadArg(0);
            mg.checkCast(TYPE_METHOD_ARRAY);
            mg.putField(proxyType, FIELDNAME_DELEGATE_METHODS, TYPE_METHOD_ARRAY);
            mg.returnValue();

            mg.visitMaxs(2, 1);
            mg.visitEnd();


            // implement #getDelegateMethods
            asmMethod = Method.getMethod(DeltaSpikeProxy.class.getDeclaredMethod("getDelegateMethods"));
            mg = new GeneratorAdapter(Opcodes.ACC_PUBLIC, asmMethod, null, null, cw);

            mg.visitCode();

            mg.loadThis();
            mg.getField(proxyType, FIELDNAME_DELEGATE_METHODS, TYPE_METHOD_ARRAY);
    private static void defineMethod(ClassWriter cw, java.lang.reflect.Method method, Type proxyType)
        mg.getField(proxyType, FIELDNAME_INVOCATION_HANDLER, TYPE_DELTA_SPIKE_PROXY_INVOCATION_HANDLER);
        mg.loadThis();
        mg.invokeVirtual(TYPE_DELTA_SPIKE_PROXY_INVOCATION_HANDLER,
                Method.getMethod("Object invoke(Object, java.lang.reflect.Method, Object[])"));
        mg.visitMaxs(12, 12);
