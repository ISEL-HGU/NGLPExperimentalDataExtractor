import org.apache.deltaspike.core.api.config.ConfigTransaction;
import java.util.HashMap;
import java.util.Map;
    public ConfigTransaction startTransaction(ConfigResolver.TypedResolver<?>[] typedResolvers)
    {
        // we implement kind of optimistic Locking
        // Means we try multiple time to resolve all the given values
        // until the config didn't change inbetween.
        for (int tries = 1; tries < 5; tries)
        {
            Map<ConfigResolver.TypedResolver<?>, Object> configValues = new HashMap<>();
            long startReadCfgTst = lastChanged;
            for (ConfigResolver.TypedResolver<?> typedResolver : typedResolvers)
            {
                configValues.put(typedResolver, typedResolver.getValue());
            }

            if (startReadCfgTst == lastChanged)
            {
                return new ConfigTransactionImpl(this, configValues);
            }
        }

        throw new IllegalStateException(
                "Could not resolve ConfigTransaction as underlying values are permanently changing!");
    }

    @Override
