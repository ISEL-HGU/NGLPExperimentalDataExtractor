        BinaryExpression binaryExpression = this.createBinaryExpression(ctx.left, ctx.op, ctx.right);

        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, ctx.op);
        }

        return this.configureAST(binaryExpression, ctx);
        BinaryExpression binaryExpression = this.createBinaryExpression(ctx.left, ctx.op, ctx.right);

        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, ctx.op);
        }

        return this.configureAST(binaryExpression, ctx);
        BinaryExpression binaryExpression = this.createBinaryExpression(ctx.left, ctx.op, ctx.right);

        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, ctx.op);
        }

        return this.configureAST(binaryExpression, ctx);
        Token antlrToken = null;
            antlrToken = ctx.dlOp;
            antlrToken = ctx.dgOp;
            antlrToken = ctx.tgOp;
        BinaryExpression binaryExpression = new BinaryExpression(left, op, right);
        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, antlrToken);
        }

        return this.configureAST(binaryExpression, ctx);
            {
                BinaryExpression binaryExpression = this.createBinaryExpression(ctx.left, ctx.op, ctx.right);

                if (ctx.op.getType() == IN || ctx.op.getType() == NOT_IN ) {
                    if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
                        return this.configureAST(binaryExpression, ctx.op);
                    }
                }

                return this.configureAST(binaryExpression, ctx);
            }
    public BinaryExpression visitEqualityExprAlt(EqualityExprAltContext ctx) {
        BinaryExpression binaryExpression = this.createBinaryExpression(ctx.left, ctx.op, ctx.right);

        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, ctx.op);
        }

        return this.configureAST(binaryExpression, ctx);
        BinaryExpression binaryExpression = this.createBinaryExpression(ctx.left, ctx.op, ctx.right);

        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, ctx.op);
        }

        return this.configureAST(binaryExpression, ctx);
        BinaryExpression binaryExpression = this.createBinaryExpression(ctx.left, ctx.op, ctx.right);

        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, ctx.op);
        }

        return this.configureAST(binaryExpression, ctx);
        ctx.fb.putNodeMetaData(IS_INSIDE_CONDITIONAL_EXPRESSION, true);

        ctx.tb.putNodeMetaData(IS_INSIDE_CONDITIONAL_EXPRESSION, true);

    private static final String IS_INSIDE_CONDITIONAL_EXPRESSION = "_IS_INSIDE_CONDITIONAL_EXPRESSION";
