     * Constructs a cache with unlimited size
     * Constructs a cache with limited size
     * @param accessOrder the ordering mode - <tt>true</tt> for access-order, <tt>false</tt> for insertion-order, see the parameter accessOrder of {@link LinkedHashMap#LinkedHashMap(int, float, boolean)}
    public CommonCache(final int initialCapacity, final int maxSize, final boolean accessOrder) {
        this(new LinkedHashMap<K, V>(initialCapacity, 0.75f, accessOrder) {
     * Constructs a LRU cache with the specified initial capacity and max size.
     * The LRU cache is slower than {@link LRUCache} but will not put same value multi-times concurrently
     * @param initialCapacity initial capacity of the LRU cache
     * @param maxSize max size of the LRU cache
     */
    public CommonCache(final int initialCapacity, final int maxSize) {
        this(initialCapacity, maxSize, true);
    }

    /**
     * Constructs a LRU cache with the default initial capacity(16)
