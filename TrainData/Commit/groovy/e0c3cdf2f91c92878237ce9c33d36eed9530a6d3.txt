import groovy.lang.Tuple2;
/**
 * A utility for extracting type description
 */
        if (null == desc) { // reference type
            if (!type.isArray()) {
                return makeRefDescription(type.getName());
            }

            StringBuilder arrayDescription = new StringBuilder(32);
            Tuple2<ClassNode, Integer> arrayInfo = extractArrayInfo(type);

            for (int i = 0, dimension = arrayInfo.getSecond(); i < dimension; i) {
                arrayDescription.append("[");
            }

            ClassNode componentType = arrayInfo.getFirst();
            return arrayDescription.append(getDescriptionByType(componentType)).toString();
        }

        return desc;
        ClassNode type = NAME_TO_TYPE_MAP.get(name);

        if (null == type) {
            return makeRefDescription(name);
        return getDescriptionByType(type);
    private static String makeRefDescription(String name) {
        return REF_DESCRIPTION  name.replace('.', '/')  ";";
    }

    private static Tuple2<ClassNode, Integer> extractArrayInfo(ClassNode type) {
        int dimension = 0;

        do {
            dimension;
        } while ((type = type.getComponentType()).isArray());

        return new Tuple2<ClassNode, Integer>(type, dimension);
    }
