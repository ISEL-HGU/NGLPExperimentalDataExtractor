import javax.annotation.concurrent.ThreadSafe;
import java.io.Serializable;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Set;
@ThreadSafe
public final class UnlimitedConcurrentCache<K, V> implements EvictableCache<K, V>, Serializable {
    private final ConcurrentHashMap<K, V> map;
    /**
     * Constructs a cache with unlimited size
     */
    public UnlimitedConcurrentCache() {
        map = new ConcurrentHashMap<K, V>();
    /**
     * Constructs a cache with unlimited size and set its initial capacity
     * @param initialCapacity the initial capacity
     */
    public UnlimitedConcurrentCache(int initialCapacity) {
        map = new ConcurrentHashMap<K, V>(initialCapacity);
    }

    /**
     * Constructs a cache and initialize the cache with the specified map
     * @param m the map to initialize the cache
     */
    public UnlimitedConcurrentCache(Map<? extends K, ? extends V> m) {
        this();
        map.putAll(m);
    }

    /**
     * Remove the cached value by the key
     *
     * @param key
     * @return returns the removed value
     */
    @Override
    public V remove(K key) {
        return map.remove(key);
    }

    /**
     * Clear the cache
     *
     * @return returns the content of the cleared map
     */
    @Override
    public Map<K, V> clear() {
        Map<K, V> result = new LinkedHashMap<K, V>(map.size());

        for (Map.Entry<K, V> entry : map.entrySet()) {
            K key = entry.getKey();
            V value = entry.getValue();

            boolean removed = map.remove(key, value);

            if (removed) {
                result.put(key, value);
            }
        }

        return result;
    }

    /**
     * Get all cached values
     *
     * @return all cached values
     */
    @Override
    public Collection<V> values() {
        return map.values();
    }

    /**
     * Get all keys associated to cached values
     *
     * @return all keys
     */
    @Override
    public Set<K> keys() {
        return map.keySet();
    }

    /**
     * Determines if the cache contains an entry for the specified key.
     *
     * @param key key whose presence in this cache is to be tested.
     * @return true if the cache contains a mapping for the specified key
     */
    @Override
    public boolean containsKey(K key) {
        return map.containsKey(key);
    }

    /**
     * Get the size of the cache
     *
     * @return the size of the cache
     */
    @Override
    public int size() {
        return map.size();
    }

    /**
     * Associates the specified value with the specified key in the cache.
     *
     * @param key   key with which the specified value is to be associated
     * @param value value to be associated with the specified key
     * @return null, or the old value if the key associated with the specified key.
     */
    @Override
    public V put(K key, V value) {
        return map.put(key, value);
    }

    /**
     * Gets a value from the cache
     *
     * @param key the key whose associated value is to be returned
     * @return the value, or null, if it does not exist.
     */
    @Override
    public V get(K key) {
        return map.get(key);
    }

    /**
     * Try to get the value from cache.
     * If not found, create the value by {@link ValueProvider} and put it into the cache, at last return the value.
     *
     * @param key
     * @param valueProvider provide the value if the associated value not found
     * @return the cached value
     */
    @Override
    public V getAndPut(K key, ValueProvider<? super K, ? extends V> valueProvider) {
        return map.computeIfAbsent(key, k -> valueProvider.provide(k));
    @Override
        for (Map.Entry<K, V> entry : map.entrySet()) {
                map.remove(entry.getKey(), entryVal);
