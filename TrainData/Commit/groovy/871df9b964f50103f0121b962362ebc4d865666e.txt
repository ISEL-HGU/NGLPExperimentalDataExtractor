            convertDoubleToBoolean(mv);
            convertFloatToBoolean(mv);
    private static void convertDoubleToBoolean(MethodVisitor mv) {
    private static void convertFloatToBoolean(MethodVisitor mv) {
    public static void doReturn(MethodVisitor mv, ClassNode type) {
        new ReturnVarHandler(mv, type).handle();
    }

        new LoadVarHandler(mv, type, idx).handle();
    public static void store(MethodVisitor mv, ClassNode type, int idx) {
        new StoreVarHandler(mv, type, idx).handle();
    private static class ReturnVarHandler extends PrimitiveTypeHandler {
        private MethodVisitor mv;

        public ReturnVarHandler(MethodVisitor mv, ClassNode type) {
            super(type);
            this.mv = mv;

        @Override
        protected void handleDoubleType() {
            mv.visitInsn(DRETURN);
        }

        @Override
        protected void handleFloatType() {
            mv.visitInsn(FRETURN);
        }

        @Override
        protected void handleLongType() {
            mv.visitInsn(LRETURN);
        }

        @Override
        protected void handleIntType() {
            mv.visitInsn(IRETURN);
        }

        @Override
        protected void handleVoidType() {
            mv.visitInsn(RETURN);
        }

        @Override
        protected void handleRefType() {
            mv.visitInsn(ARETURN);
        }
    }

    private static class LoadVarHandler extends PrimitiveTypeHandler {
        private MethodVisitor mv;
        private int idx;

        public LoadVarHandler(MethodVisitor mv, ClassNode type, int idx) {
            super(type);
            this.mv = mv;
            this.idx = idx;
        }

        @Override
        protected void handleDoubleType() {
            mv.visitVarInsn(DLOAD, idx);
        }

        @Override
        protected void handleFloatType() {
            mv.visitVarInsn(FLOAD, idx);
        }

        @Override
        protected void handleLongType() {
            mv.visitVarInsn(LLOAD, idx);
        }

        @Override
        protected void handleIntType() {
            mv.visitVarInsn(ILOAD, idx);
        }

        @Override
        protected void handleVoidType() {
            // do nothing
        }

        @Override
        protected void handleRefType() {
            mv.visitVarInsn(ALOAD, idx);
        }
    }

    private static class StoreVarHandler extends PrimitiveTypeHandler {
        private MethodVisitor mv;
        private int idx;

        public StoreVarHandler(MethodVisitor mv, ClassNode type, int idx) {
            super(type);
            this.mv = mv;
            this.idx = idx;
        }

        @Override
        protected void handleDoubleType() {
            mv.visitVarInsn(DSTORE, idx);
        }

        @Override
        protected void handleFloatType() {
            mv.visitVarInsn(FSTORE, idx);
        }

        @Override
        protected void handleLongType() {
            mv.visitVarInsn(LSTORE, idx);
        }

        @Override
        protected void handleIntType() {
            mv.visitVarInsn(ISTORE, idx);
        }

        @Override
        protected void handleVoidType() {
            // do nothing
        }

        @Override
        protected void handleRefType() {
            mv.visitVarInsn(ASTORE, idx);
        }
    }

    private static abstract class PrimitiveTypeHandler {
        private ClassNode type;

        public PrimitiveTypeHandler(ClassNode type) {
            this.type = type;
        }

        public void handle() {
            if (type == ClassHelper.double_TYPE) {
                handleDoubleType();
            } else if (type == ClassHelper.float_TYPE) {
                handleFloatType();
            } else if (type == ClassHelper.long_TYPE) {
                handleLongType();
            } else if (
                    type == ClassHelper.boolean_TYPE
                            || type == ClassHelper.char_TYPE
                            || type == ClassHelper.byte_TYPE
                            || type == ClassHelper.int_TYPE
                            || type == ClassHelper.short_TYPE) {
                handleIntType();
            } else if (type == ClassHelper.VOID_TYPE) {
                handleVoidType();
            } else {
                handleRefType();
            }
        }

        protected abstract void handleDoubleType();
        protected abstract void handleFloatType();
        protected abstract void handleLongType();

        /**
         * boolean, char, byte, int, short types are handle in the same way
         */
        protected abstract void handleIntType();

        protected abstract void handleVoidType();
        protected abstract void handleRefType();
