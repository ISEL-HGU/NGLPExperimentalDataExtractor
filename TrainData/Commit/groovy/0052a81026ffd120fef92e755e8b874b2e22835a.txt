import org.codehaus.groovy.ast.ASTNode;
import org.codehaus.groovy.ast.AnnotatedNode;
import org.codehaus.groovy.ast.AnnotationNode;
import org.codehaus.groovy.ast.ClassCodeVisitorSupport;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.ConstructorNode;
import org.codehaus.groovy.ast.FieldNode;
import org.codehaus.groovy.ast.InnerClassNode;
import org.codehaus.groovy.ast.MethodNode;
import org.codehaus.groovy.ast.Parameter;
import org.codehaus.groovy.ast.expr.DeclarationExpression;
import java.util.Iterator;
    private AnnotatedNode candidate;

        final ClassCodeVisitorSupport visitor = createVisitor();
        process(nodes, visitor);
    private ClassCodeVisitorSupport createVisitor() {
        return new ClassCodeVisitorSupport() {
            @Override
            public void visitClosureExpression(ClosureExpression expression) {
                if (expression.isSynthetic()) {
                    return;
                }
                Parameter[] origParams = expression.getParameters();
                for (Parameter p : origParams) {
                    p.setModifiers(p.getModifiers() | Modifier.FINAL);
                }
                super.visitClosureExpression(expression);
            }

            @Override
            protected void visitConstructorOrMethod(MethodNode node, boolean isConstructor) {
                if (hasNoExplicitAutoFinal(node) || candidate == node) {
                    super.visitConstructorOrMethod(node, isConstructor);
                }
            }

            @Override
            public void visitField(FieldNode node) {
                if (hasNoExplicitAutoFinal(node) || candidate == node) {
                    super.visitField(node);
                }
            }

            @Override
            public void visitDeclarationExpression(DeclarationExpression expr) {
                if (hasNoExplicitAutoFinal(expr) || candidate == expr) {
                    super.visitDeclarationExpression(expr);
                }
            }

            protected SourceUnit getSourceUnit() {
                return sourceUnit;
            }
        };
    }

    private void process(ASTNode[] nodes, final ClassCodeVisitorSupport visitor) {
        candidate = (AnnotatedNode) nodes[1];
            ClassNode cNode = (ClassNode) candidate;
            processClass(cNode, visitor);
            MethodNode mNode = (MethodNode) candidate;
            processConstructorOrMethod(mNode, visitor);
        } else if (candidate instanceof FieldNode) {
            FieldNode fNode = (FieldNode) candidate;
            processField(fNode, visitor);
        } else if (candidate instanceof DeclarationExpression) {
            DeclarationExpression de = (DeclarationExpression) candidate;
            processLocalVariable(de, visitor);
    private void processLocalVariable(DeclarationExpression de, ClassCodeVisitorSupport visitor) {
        if (de.getRightExpression() instanceof ClosureExpression) {
            visitor.visitDeclarationExpression(de);
    private void processField(FieldNode fNode, ClassCodeVisitorSupport visitor) {
        if (fNode.hasInitialExpression() && fNode.getInitialExpression() instanceof ClosureExpression) {
            visitor.visitField(fNode);
        }
    }
    private void processClass(ClassNode cNode, final ClassCodeVisitorSupport visitor) {

            if (hasNoExplicitAutoFinal(cn)) {
                processConstructorOrMethod(cn, visitor);
            }

            if (hasNoExplicitAutoFinal(mn)) {
                processConstructorOrMethod(mn, visitor);
            }

        Iterator<InnerClassNode> it = cNode.getInnerClasses();
        while (it.hasNext()) {
            InnerClassNode in = it.next();
            if (in.getAnnotations(MY_TYPE).isEmpty()) {
                processClass(in, visitor);
            }
        }

        visitor.visitClass(cNode);
    private boolean hasNoExplicitAutoFinal(AnnotatedNode node) {
        return node.getAnnotations(MY_TYPE).isEmpty();
    }

    private void processConstructorOrMethod(MethodNode mNode, ClassCodeVisitorSupport visitor) {
        if (mNode.isSynthetic()) return;
        Parameter[] origParams = mNode.getParameters();
        visitor.visitMethod(mNode);
