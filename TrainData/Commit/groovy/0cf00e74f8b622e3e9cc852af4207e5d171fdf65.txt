import org.codehaus.groovy.ast.expr.PropertyExpression;
    protected final LinkedList<PropertyExpression> propertyExpressions = new LinkedList<PropertyExpression>();

    /**
     * Pushes a property expression into the property expression stack.
     * @param propertyExpression the property expression to be pushed
     */
    public void pushPropertyExpression(PropertyExpression propertyExpression) {
        propertyExpressions.addFirst((PropertyExpression) propertyExpression);
    }

    /**
     * Pops a property expression from the property expression stack.
     * @return the popped property expression
     */
    public Expression popPropertyExpression() {
        return propertyExpressions.removeFirst();
    }

    /**
     * Returns the property expression which is on the top of the stack, or null
     * if there's no such element.
     * @return the property expression on top of the stack, or null if no such element.
     */
    public Expression getPropertyExpression() {
        if (propertyExpressions.isEmpty()) return null;
        return propertyExpressions.getFirst();
    }

    /**
     * Returns the current stack of property expressions. The first
     * element is the top of the stack, that is to say the currently visited property expression.
     * @return an immutable list of property expressions.
     */
    public List<PropertyExpression> getPropertyExpressions() {
        return Collections.unmodifiableList(propertyExpressions);
    }

     * Returns the current stack of enclosing method calls. The first
     * element is the top of the stack, that is to say the currently visited method call.
     * @return an immutable list of enclosing method calls.
