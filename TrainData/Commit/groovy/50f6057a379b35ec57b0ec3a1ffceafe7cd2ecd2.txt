        if (resourcesExists) {
            boolean isVariableDeclaration = expression instanceof BinaryExpression
                    && ((BinaryExpression) expression).getLeftExpression() instanceof VariableExpression;
            boolean isVariableAccess = expression instanceof VariableExpression;
            if (!(isVariableDeclaration || isVariableAccess)) {
                throw createParsingFailedException("Only variable declarations or variable access are allowed to declare resource", ctx);
            BinaryExpression assignmentExpression;
            if (isVariableDeclaration) {
                assignmentExpression = (BinaryExpression) expression;
            } else if (isVariableAccess) {
                /* See https://docs.oracle.com/javase/specs/jls/se9/html/jls-14.html
                 * 14.20.3.1. Basic try-with-resources
                 *
                 * If a basic try-with-resource statement is of the form:
                 * try (VariableAccess ...)
                 *      Block
                 *
                 * then the resource is first converted to a local variable declaration by the following translation:
                 * try (T #r = VariableAccess ...) {
                 *      Block
                 * }
                 */
                assignmentExpression =
                        new BinaryExpression(
                                new VariableExpression(genResourceName()),
                                org.codehaus.groovy.syntax.Token.newSymbol(Types.ASSIGN, -1, -1),
                                expression
                        );
            } else {
                throw createParsingFailedException("Unsupported resource declaration", ctx);
            }
    private int resourceCnt = 0;
    private String genResourceName() {
        return "__$$resource"  resourceCnt;
    }

