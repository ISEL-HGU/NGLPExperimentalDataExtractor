import groovy.lang.Reference;
                && delegate.owner.getSetterMethod(setterName) == null && delegate.owner.getProperty(name) == null
        Reference<Boolean> ownerWillHaveGetAccessor = new Reference<Boolean>();
        Reference<Boolean> ownerWillHaveIsAccessor = new Reference<Boolean>();
        extractAccessorInfo(delegate.owner, name, ownerWillHaveGetAccessor, ownerWillHaveIsAccessor);

            if ((prefix.equals("get") && willHaveGetAccessor && !ownerWillHaveGetAccessor.get()
                    || prefix.equals("is") && willHaveIsAccessor && !ownerWillHaveIsAccessor.get())
                delegate.owner.addMethod(getterName,
                        ACC_PUBLIC,
                        GenericsUtils.nonGeneric(prop.getType()),
                        Parameter.EMPTY_ARRAY,
                        null,
                        returnS(propX(delegate.getOp, name)));

    private static void extractAccessorInfo(ClassNode owner, String name, Reference<Boolean> willHaveGetAccessor, Reference<Boolean> willHaveIsAccessor) {
        String suffix = Verifier.capitalize(name);
        boolean hasGetAccessor = owner.getGetterMethod("get"  suffix) != null;
        boolean hasIsAccessor = owner.getGetterMethod("is"  suffix) != null;
        PropertyNode prop = owner.getProperty(name);
        willHaveGetAccessor.set(hasGetAccessor || (prop != null && !hasIsAccessor));
        willHaveIsAccessor.set(hasIsAccessor || (prop != null && !hasGetAccessor && prop.getOriginType().equals(ClassHelper.boolean_TYPE)));
    }
