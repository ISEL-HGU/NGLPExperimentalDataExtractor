import org.codehaus.groovy.ast.ConstructorNode;
import org.codehaus.groovy.ast.Parameter;
import org.codehaus.groovy.ast.expr.ArgumentListExpression;
import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
import org.codehaus.groovy.ast.expr.TupleExpression;
import java.util.ArrayList;
    private ConstructorCallExpression currentAIC;
                adjustToClassVar(ve);
        } else if (currentAIC != null && expr instanceof ArgumentListExpression) {
            // if a match is found, the compiler will have already set up aic constructor to hav
            // an argument which isn't needed since we'll be accessing the field; we must undo it
            Expression skip = null;
            List<Expression> origArgList = ((ArgumentListExpression) expr).getExpressions();
            for (int i = 0; i < origArgList.size(); i) {
                Expression arg = origArgList.get(i);
                if (matchesCandidate(arg)) {
                    skip = arg;
                    adjustConstructorAndFields(i, currentAIC.getType());
                    break;
                }
            }
            if (skip != null) {
                return adjustedArgList(skip, origArgList);
            }
    private boolean matchesCandidate(Expression arg) {
        return arg instanceof VariableExpression && ((VariableExpression) arg).getAccessedVariable() == candidate.getVariableExpression().getAccessedVariable();
    }

    private Expression adjustedArgList(Expression skip, List<Expression> origArgs) {
        List<Expression> newArgs = new ArrayList<Expression>(origArgs.size() - 1);
        for (Expression origArg : origArgs) {
            if (skip != origArg) {
                newArgs.add(origArg);
            }
        }
        return new ArgumentListExpression(newArgs);
    }

    private void adjustConstructorAndFields(int skipIndex, ClassNode type) {
        List<ConstructorNode> constructors = type.getDeclaredConstructors();
        if (constructors.size() == 1) {
            ConstructorNode constructor = constructors.get(0);
            Parameter[] params = constructor.getParameters();
            Parameter[] newParams = new Parameter[params.length - 1];
            int to = 0;
            for (int from = 0; from < params.length; from) {
                if (from != skipIndex) {
                    newParams[to] = params[from];
                }
            }
            type.removeConstructor(constructor);
            // code doesn't mention the removed param at this point, okay to leave as is
            type.addConstructor(constructor.getModifiers(), newParams, constructor.getExceptions(), constructor.getCode());
            type.removeField(variableName);
        }
    }

    private void adjustToClassVar(VariableExpression expr) {
        // we only need to check the variable name because the Groovy compiler
        // already fails if a variable with the same name already exists in the scope.
        // this means that a closure cannot shadow a class variable
        expr.setAccessedVariable(fieldNode);
        final VariableScope variableScope = currentClosure.getVariableScope();
        final Iterator<Variable> iterator = variableScope.getReferencedLocalVariablesIterator();
        while (iterator.hasNext()) {
            Variable next = iterator.next();
            if (next.getName().equals(variableName)) iterator.remove();
        }
        variableScope.putReferencedClassVariable(fieldNode);
    }

    public void visitConstructorCallExpression(final ConstructorCallExpression cce) {
        if (!insideScriptBody || !cce.isUsingAnonymousInnerClass()) return;
        ConstructorCallExpression old = currentAIC;
        currentAIC = cce;
        Expression newArgs = transform(cce.getArguments());
        if (cce.getArguments() instanceof TupleExpression && newArgs instanceof TupleExpression) {
            List<Expression> argList = ((TupleExpression) cce.getArguments()).getExpressions();
            argList.clear();
            argList.addAll(((TupleExpression) newArgs).getExpressions());
        }
        currentAIC = old;
    }

    @Override
        exp.visit(this);
