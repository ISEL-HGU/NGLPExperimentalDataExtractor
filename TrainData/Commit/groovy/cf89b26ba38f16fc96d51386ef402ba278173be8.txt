import java.util.ArrayList;
import java.util.Arrays;
                    List<ClassNode> candidates = new ArrayList<ClassNode>();
                    candidates.add(type);
                    while (!candidates.isEmpty()) {
                        ClassNode next = candidates.remove(0);
                        ClassNode helper = Traits.findHelper(next);
                        Parameter[] params = new Parameter[argumentTypes.length  1];
                        params[0] = new Parameter(ClassHelper.CLASS_Type.getPlainNodeReference(), "staticSelf");
                        for (int i = 1; i < params.length; i) {
                            params[i] = new Parameter(argumentTypes[i-1], "p"  i);
                        }
                        MethodNode method = helper.getDeclaredMethod(name, params);
                        if (method != null) {
                            return Collections.singletonList(makeDynamic(call, method.getReturnType()));
                        }
                        // GROOVY-8272 support inherited static methods
                        candidates.addAll(Arrays.asList(next.getInterfaces()));
