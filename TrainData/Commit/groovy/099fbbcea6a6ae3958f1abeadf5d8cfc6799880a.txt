		return replace(result, Maps.of("\\\\", "\\"));
			StringBuilder sb = new StringBuilder(text);
				replace(sb, Maps.of("\\/", "/"));
				replace(sb, Maps.of("$$", "$"));
				replace(sb, Maps.of("$/", "/"));
			text = sb.toString();
		text = replace(text, Maps.of("\\$", "$"));
		return replace(text, Maps.of("\r\n", "\n"));
	public static String replace(String str, Map<String, String> replacements) {
		return replace(new StringBuilder(str), replacements).toString();
	}

	public static StringBuilder replace(StringBuilder sb, Map<String, String> replacements) {

		for (Map.Entry<String, String> entry : replacements.entrySet()) {
			String key = entry.getKey();
			int keyLength = key.length();

			String value = entry.getValue();
			int valueLength = value.length();

			int start = sb.indexOf(key, 0);
			while (start > -1) {
				int end = start  keyLength;
				int nextSearchStart = start  valueLength;
				sb.replace(start, end, value);
				start = sb.indexOf(key, nextSearchStart);
			}
		}

		return sb;
	}

		return length == quotationLength << 1 ? "" : text.substring(quotationLength, length - quotationLength);
