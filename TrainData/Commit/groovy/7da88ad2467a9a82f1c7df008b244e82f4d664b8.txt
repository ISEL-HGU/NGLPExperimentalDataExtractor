        for (int i = 0, n = declarationExpressionList.size(); i < n; i) {
            DeclarationExpression declarationExpression = declarationExpressionList.get(i);
            VariableExpression variableExpression = (VariableExpression) declarationExpression.getLeftExpression();
            Expression initialValue = EmptyExpression.INSTANCE.equals(declarationExpression.getRightExpression()) ? null : declarationExpression.getRightExpression();
                if (0 == i) {
                    this.configureAST(fieldNode, ctx, initialValue);
                } else {
                    this.configureAST(fieldNode, variableExpression, initialValue);
                }

                if (0 == i) {
                    this.configureAST(fieldNode, ctx, initialValue);
                    this.configureAST(propertyNode, ctx, initialValue);
                } else {
                    this.configureAST(fieldNode, variableExpression, initialValue);
                    this.configureAST(propertyNode, variableExpression, initialValue);
                }
        }
        astNode.setLineNumber(start.getLine());
        astNode.setColumnNumber(start.getCharPositionInLine()  1);

        Pair<Integer, Integer> stopTokenEndPosition = endPosition(stop);
        astNode.setLastLineNumber(stopTokenEndPosition.getKey());
        astNode.setLastColumnNumber(stopTokenEndPosition.getValue());

        return astNode;
    }

    private Pair<Integer, Integer> endPosition(Token token) {
        String stopText = token.getText();
            return new Pair<Integer, Integer>(token.getLine(), token.getCharPositionInLine()  1  token.getText().length());
            return new Pair<Integer, Integer>(token.getLine()  newLineCnt, stopTextLength - stopText.lastIndexOf('\n'));
    private <T extends ASTNode> T configureAST(T astNode, GroovyParserRuleContext ctx, ASTNode stop) {
        Token start = ctx.getStart();

        astNode.setLineNumber(start.getLine());
        astNode.setColumnNumber(start.getCharPositionInLine()  1);

        if (asBoolean(stop)) {
            astNode.setLastLineNumber(stop.getLastLineNumber());
            astNode.setLastColumnNumber(stop.getLastColumnNumber());
        } else {
            Pair<Integer, Integer> endPosition = endPosition(start);
            astNode.setLastLineNumber(endPosition.getKey());
            astNode.setLastColumnNumber(endPosition.getValue());
        }

        return astNode;
    }

    private <T extends ASTNode> T configureAST(T astNode, ASTNode start, ASTNode stop) {
        astNode.setLineNumber(start.getLineNumber());
        astNode.setColumnNumber(start.getColumnNumber());

        if (asBoolean(stop)) {
            astNode.setLastLineNumber(stop.getLastLineNumber());
            astNode.setLastColumnNumber(stop.getLastColumnNumber());
        } else {
            astNode.setLastLineNumber(start.getLastLineNumber());
            astNode.setLastColumnNumber(start.getLastColumnNumber());
        }

        return astNode;
    }

