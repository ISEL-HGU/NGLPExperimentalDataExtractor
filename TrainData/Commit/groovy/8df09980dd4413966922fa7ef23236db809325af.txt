        methods = filterMethodsByVisibility(receiver, methods);
    private List<MethodNode> filterMethodsByVisibility(ClassNode receiver, List<MethodNode> methods) {
        List<MethodNode> result = new LinkedList<>();

        ClassNode enclosingClassNode = typeCheckingContext.getEnclosingClassNode();
        if (enclosingClassNode.equals(receiver)) {
            for (MethodNode methodNode : methods) {
                if (methodNode.isPrivate() && !enclosingClassNode.equals(methodNode.getDeclaringClass())) {
                    continue;
                }

                result.add(methodNode);
            }
        } else {
            boolean isDerived = enclosingClassNode.isDerivedFrom(receiver);
            for (MethodNode methodNode : methods) {
                if (methodNode.isPrivate()) {
                    continue;
                }

                if (!isDerived && methodNode.isProtected()) {
                    continue;
                }

                result.add(methodNode);
            }
        }

        return result;
    }

