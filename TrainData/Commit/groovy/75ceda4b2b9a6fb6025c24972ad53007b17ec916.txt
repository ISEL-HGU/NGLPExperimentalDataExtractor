import org.codehaus.groovy.ast.InnerClassNode;
import static org.codehaus.groovy.ast.tools.GeneralUtils.assignX;
import static org.codehaus.groovy.ast.tools.GeneralUtils.callX;
                            // getInitialExpression above will be null if not in same source unit
                            // so instead set within (static) initializer
                            if (fieldNode.isFinal() && !(helperClassNode instanceof InnerClassNode)) {
                                String baseName = fieldNode.isStatic() ? Traits.STATIC_INIT_METHOD : Traits.INIT_METHOD;
                                Expression mce = callX(helperClassNode, baseName  fieldNode.getName());
                                Statement stmt = stmt(assignX(varX(fieldNode.getName(), fieldNode.getType()), mce));
                                if (isStatic == 0) {
                                    cNode.addObjectInitializerStatements(stmt);
                                } else {
                                    cNode.addStaticInitializerStatements(Collections.<Statement>singletonList(stmt), false);
                                }
                            }
