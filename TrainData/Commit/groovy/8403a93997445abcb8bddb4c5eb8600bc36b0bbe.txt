import java.util.HashSet;
import java.util.Set;
import static org.codehaus.groovy.ast.tools.GeneralUtils.getAllProperties;
            final boolean allProperties = memberHasValue(anno, "allProperties", true);
            createHashCode(cNode, cacheHashCode, includeFields, callSuper, excludes, includes, allNames, allProperties);
            createEquals(cNode, includeFields, callSuper, useCanEqual, excludes, includes, allNames, allProperties);
        createHashCode(cNode, cacheResult, includeFields, callSuper, excludes, includes, allNames,false);
    }

    public static void createHashCode(ClassNode cNode, boolean cacheResult, boolean includeFields, boolean callSuper, List<String> excludes, List<String> includes, boolean allNames, boolean allProperties) {
                    calculateHashStatements(cNode, hash, includeFields, callSuper, excludes, includes, allNames, allProperties)
            body.addStatement(calculateHashStatements(cNode, null, includeFields, callSuper, excludes, includes, allNames, allProperties));
    private static Statement calculateHashStatements(ClassNode cNode, Expression hash, boolean includeFields, boolean callSuper, List<String> excludes, List<String> includes, boolean allNames, boolean allProperties) {
        final Set<String> names = new HashSet<String>();
        final List<PropertyNode> pList = getAllProperties(names, cNode, true, false, allProperties, false, false, false);
            if (shouldSkipUndefinedAware(pNode.getName(), excludes, includes, allNames)) continue;
            if (shouldSkipUndefinedAware(fNode.getName(), excludes, includes, allNames)) continue;
        createEquals(cNode, includeFields, callSuper, useCanEqual, excludes, includes, allNames,false);
    }

    public static void createEquals(ClassNode cNode, boolean includeFields, boolean callSuper, boolean useCanEqual, List<String> excludes, List<String> includes, boolean allNames, boolean allProperties) {
        final Set<String> names = new HashSet<String>();
        final List<PropertyNode> pList = getAllProperties(names, cNode, true, includeFields, allProperties, false, false, false);
            if (shouldSkipUndefinedAware(pNode.getName(), excludes, includes, allNames)) continue;
            if (shouldSkipUndefinedAware(fNode.getName(), excludes, includes, allNames)) continue;
