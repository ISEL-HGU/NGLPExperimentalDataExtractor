import org.codehaus.groovy.ast.expr.MethodCallExpression;
            FieldNode lockExpr = determineLock(value, cNode, mNode.isStatic(), myTypeName);
            final MethodCallExpression lockType = callX(varX(lockExpr), isWriteLock ? "writeLock" : "readLock");
            lockType.setImplicitThis(false);
            MethodCallExpression acquireLock = callX(lockType, "lock");
            acquireLock.setImplicitThis(false);

            MethodCallExpression releaseLock = callX(lockType, "unlock");
            releaseLock.setImplicitThis(false);

    private FieldNode determineLock(String value, ClassNode targetClass, boolean isStatic, String myTypeName) {
            return existingLockField;
                field = targetClass.addField(DEFAULT_STATIC_LOCKNAME, visibility, LOCK_TYPE, createLockObject());
            return field;
            field = targetClass.addField(DEFAULT_INSTANCE_LOCKNAME, visibility, LOCK_TYPE, createLockObject());
        return field;
