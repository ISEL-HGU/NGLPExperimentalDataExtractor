import java.io.Serializable;
public class ConcurrentCommonCache<K, V> implements EvictableCache<K, V>, Serializable {
    private static final long serialVersionUID = -7352338549333024936L;

    private final CommonCache<K, V> commonCache;
    public ConcurrentCommonCache() {
        commonCache = new CommonCache<K, V>();
    }
     *
     * @param initialCapacity  initial capacity of the cache
     * @param maxSize          max size of the cache
        commonCache = new CommonCache<K, V>(initialCapacity, maxSize, evictionStrategy);
     *
     * @param maxSize         max size of the LRU cache
        commonCache = new CommonCache<K, V>(initialCapacity, maxSize);
     *
        commonCache = new CommonCache<K, V>(maxSize);
     *
        commonCache = new CommonCache<K, V>(map);
            return commonCache.get(key);
            return commonCache.put(key, value);
            value = commonCache.get(key);
            value = commonCache.get(key);
                commonCache.put(key, value);
            return commonCache.values();
            return commonCache.keys();
            return commonCache.containsKey(key);
            return commonCache.size();
            return commonCache.remove(key);
            return commonCache.clear();
            commonCache.cleanUpNullReferences();
