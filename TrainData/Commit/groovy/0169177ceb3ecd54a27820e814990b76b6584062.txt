import groovy.lang.Groovydoc;
import org.codehaus.groovy.ast.AnnotatedNode;
import org.codehaus.groovy.ast.AnnotationNode;
import org.codehaus.groovy.ast.ClassHelper;
import org.codehaus.groovy.ast.expr.ConstantExpression;
    public static final String VALUE = "value";
    public static final String GROOVYDOC_PATTERN = "(?s)\\s*/[*][*]\\s(\\s[*]\\s*)*@Groovydoc.?[*]/\\s*";
     *
    public void handle(ASTNode node, GroovyParser.GroovyParserRuleContext ctx) {
        if (!asBoolean(node) || !asBoolean(ctx)) {
        attachDocCommentAsMetaData(node, ctx);
        attachGroovydocAnnotation(node, ctx);
    }

    /*
     * Attach doc comment to member node as meta data
     */
    private void attachDocCommentAsMetaData(ASTNode node, GroovyParser.GroovyParserRuleContext ctx) {
        if (!EXTRACTING_DOC_COMMENT_ENABLED) {
    private void attachGroovydocAnnotation(ASTNode node, GroovyParser.GroovyParserRuleContext ctx) {
        if (!(node instanceof AnnotatedNode)) {
            return;
        }

        String docCommentNodeText;

        if (EXTRACTING_DOC_COMMENT_ENABLED) { // try to reuse the result of extracting doc comment for better performance
            docCommentNodeText = node.getNodeMetaData(DOC_COMMENT);
        } else {
            docCommentNodeText = this.findDocCommentByNode(ctx);
        }

        if (null == docCommentNodeText || !docCommentNodeText.matches(GROOVYDOC_PATTERN)) {
            return;
        }

        AnnotatedNode annotatedNode = (AnnotatedNode) node;
        AnnotationNode annotationNode = new AnnotationNode(ClassHelper.make(Groovydoc.class));
        annotationNode.addMember(VALUE, new ConstantExpression(docCommentNodeText));
        annotatedNode.addAnnotation(annotationNode);
    }


