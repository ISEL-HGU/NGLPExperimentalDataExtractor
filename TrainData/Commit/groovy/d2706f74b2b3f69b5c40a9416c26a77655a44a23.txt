import static org.codehaus.groovy.ast.tools.GeneralUtils.getAllProperties;
            createConstructor(this, cNode, includeFields, includeProperties, includeSuperFields, includeSuperProperties,
                    callSuper, force, excludes, includes, useSetters, defaults, allNames, allProperties, makeImmutable,
                    sourceUnit, (ClosureExpression) pre, (ClosureExpression) post);
        createConstructor(xform, cNode, includeFields, includeProperties, includeSuperFields, includeSuperProperties, callSuper, force, excludes, includes, useSetters, defaults, allNames, false, false, sourceUnit, pre, post);
                                         boolean includeProperties, boolean includeSuperFields, boolean includeSuperProperties,
                                         boolean callSuper, boolean force, List<String> excludes, final List<String> includes,
                                         boolean useSetters, boolean defaults, boolean allNames, boolean allProperties, boolean makeImmutable,
                                         SourceUnit sourceUnit, ClosureExpression pre, ClosureExpression post) {
            superList = getAllProperties(names, cNode.getSuperClass(), includeSuperProperties, includeSuperFields, allProperties, true);
        List<PropertyNode> list = getAllProperties(names, cNode, true, includeFields, allProperties, false);

        if (makeImmutable) {
            boolean specialHashMapCase = (ImmutableASTTransformation.isSpecialHashMapCase(list) && superList.isEmpty()) ||
                    (ImmutableASTTransformation.isSpecialHashMapCase(superList) && list.isEmpty());
            if (!specialHashMapCase) {
                superList.addAll(list);
                ImmutableASTTransformation.createConstructorOrdered(cNode, superList);
            }
            return;
        }

        // no processing if existing constructors found
        if (!cNode.getDeclaredConstructors().isEmpty() && !force) return;
