import org.codehaus.groovy.runtime.memoize.EvictableMemoizeCache;
import org.codehaus.groovy.runtime.memoize.SimpleCache;
    protected final SimpleCache<String, Class> classCache = new SimpleCache<String, Class>();
    protected final SimpleCache<String, Class> sourceCache = new SimpleCache<String, Class>();
    public Class parseClass(final GroovyCodeSource codeSource, boolean shouldCacheSource) throws CompilationFailedException {
        return sourceCache.getAndPut(
                codeSource.getName(),
                new EvictableMemoizeCache.ValueProvider<String, Class>() {
                    @Override
                    public Class provide(String key) {
                        return doParseClass(codeSource);
                    }
                },
                shouldCacheSource
        );
        return classCache.get(name);
        classCache.put(cls.getName(), cls);
        classCache.remove(name);
                sourceCache.remove(name);
        return classCache.values().toArray(EMPTY_CLASS_ARRAY);
        Collection<Class> classesToClear = classCache.clear();
        sourceCache.clear();
