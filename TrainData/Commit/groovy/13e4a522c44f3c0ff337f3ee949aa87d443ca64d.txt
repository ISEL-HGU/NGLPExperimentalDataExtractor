        return this.createBinaryExpression(ctx.left, ctx.op, ctx.right, ctx);
        return this.createBinaryExpression(ctx.left, ctx.op, ctx.right, ctx);
        return this.createBinaryExpression(ctx.left, ctx.op, ctx.right, ctx);
            case NOT_IN: {
                    return this.createBinaryExpression(ctx.left, ctx.op, ctx.right, ctx);
                return this.configureAST(
                        this.createBinaryExpression(ctx.left, ctx.op, ctx.right),
                        ctx);
        return this.createBinaryExpression(ctx.left, ctx.op, ctx.right, ctx);
        return this.createBinaryExpression(ctx.left, ctx.op, ctx.right, ctx);
        return this.createBinaryExpression(ctx.left, ctx.op, ctx.right, ctx);
    private BinaryExpression createBinaryExpression(ExpressionContext left, Token op, ExpressionContext right, ExpressionContext ctx) {
        BinaryExpression binaryExpression = this.createBinaryExpression(left, op, right);

        if (isTrue(ctx, IS_INSIDE_CONDITIONAL_EXPRESSION)) {
            return this.configureAST(binaryExpression, op);
        }

        return this.configureAST(binaryExpression, ctx);
    }

