import static org.codehaus.groovy.ast.ClassHelper.TUPLE_CLASSES;
        Expression transformedRightExpression = transformRightExpressionToSupportMultipleAssignment(rightExpression);
        if (null == transformedRightExpression) {
        rightExpression = transformedRightExpression;

    private Expression transformRightExpressionToSupportMultipleAssignment(Expression rightExpression) {
        if (rightExpression instanceof ListExpression) {
            return rightExpression;
        }

        ClassNode cn = null;
        if (rightExpression instanceof MethodCallExpression || rightExpression instanceof VariableExpression) {
            cn = rightExpression.getType();
        }

        if (null == cn) {
            return null;
        }

        Expression listExpression = transformToListExpression(rightExpression, cn);
        if (listExpression != null) return listExpression;

        return null;
    }

    private Expression transformToListExpression(Expression expression, ClassNode cn) {
        if (null != cn && cn.isDerivedFrom(ClassHelper.TUPLE_TYPE)) { // just for performance to check
            for (int i = 0, n = TUPLE_CLASSES.length; i < n; i) {
                Class tcn = TUPLE_CLASSES[i];
                if (tcn.equals(cn.getTypeClass())) {
                    ListExpression listExpression = new ListExpression();
                    GenericsType[] genericsTypes = cn.getGenericsTypes();
                    for (int j = 0; j < i; j) {
                        // the index of element in tuple starts with 1
                        MethodCallExpression mce = new MethodCallExpression(expression, "v"  (j  1), ArgumentListExpression.EMPTY_ARGUMENTS);
                        ClassNode elementType = null != genericsTypes ? genericsTypes[j].getType() : ClassHelper.OBJECT_TYPE;
                        mce.setType(elementType);
                        storeType(mce, elementType);
                        listExpression.addExpression(mce);
                    }

                    listExpression.setSourcePosition(expression);

                    return listExpression;
                }
            }
        }
        return null;
    }

