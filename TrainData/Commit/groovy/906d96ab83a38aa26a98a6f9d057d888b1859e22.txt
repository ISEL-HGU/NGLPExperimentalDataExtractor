import org.codehaus.groovy.ast.expr.ArgumentListExpression;
import org.codehaus.groovy.ast.stmt.ReturnStatement;
import org.codehaus.groovy.runtime.DefaultGroovyMethods;
import java.util.ArrayList;
import java.util.List;
    private boolean inAssignmentRHS = false;
    private boolean inArgumentList = false;
        is_var(false),
        is_ambiguous(false); // any further use of that variable can trigger uninitialized ot not final errors
    public void visitArgumentlistExpression(ArgumentListExpression ale) {
        boolean old = inArgumentList;
        inArgumentList = true;
        super.visitArgumentlistExpression(ale);
        inArgumentList = old;
    }

    @Override
        inAssignmentRHS = assignment;
        inAssignmentRHS = false;
        boolean old = inAssignmentRHS;
        inAssignmentRHS = false;
        inAssignmentRHS = old;
        inAssignmentRHS = expression.getExpression() instanceof VariableExpression;
        inAssignmentRHS = false;
        inAssignmentRHS = expression.getExpression() instanceof VariableExpression;
        inAssignmentRHS = false;
            if ((inAssignmentRHS || inArgumentList) && (variableState == VariableState.is_uninitialized || variableState == VariableState.is_ambiguous)) {
        visitPossiblyEmptyStatement(elseBlock);
            mergedIfElse = isFinal(ifValue) && isFinal(elseValue) ? VariableState.is_final : VariableState.is_var;
    private void visitPossiblyEmptyStatement(Statement block) {
        if (block instanceof EmptyStatement) {
            // dispatching to EmptyStatement will not call back visitor,
            // must call our visitEmptyStatement explicitly
            visitEmptyStatement((EmptyStatement) block);
        } else {
            block.visit(this);
        }
    }

    private boolean isFinal(VariableState value) {
        return value != null && value.isFinal;
    }

        Map<Variable, VariableState> beforeTryState = new HashMap<Variable, VariableState>(getState());
        pushState();
        Statement tryStatement = statement.getTryStatement();
        tryStatement.visit(this);
        Map<Variable, VariableState> afterTryState = new HashMap<Variable, VariableState>(getState());
        List<Map<Variable, VariableState>> afterStates = new ArrayList<>();
        // the try finally case
        visitPossiblyEmptyStatement(finallyStatement);
        if (!returningBlock(tryStatement)) {
            afterStates.add(new HashMap<Variable, VariableState>(getState()));
        popState();
        // now the finally only case but only if no catches
        if (statement.getCatchStatements().isEmpty()) {
            visitPossiblyEmptyStatement(finallyStatement);
            if (!returningBlock(tryStatement)) {
                afterStates.add(new HashMap<Variable, VariableState>(getState()));
        for (CatchStatement catchStatement : statement.getCatchStatements()) {
            // We don't try to analyse which statement within the try block might have thrown an exception.
            // We make a crude assumption that anywhere from none to all of the statements might have been executed.
            // Run visitor for both scenarios so the eager checks will be performed for either of these cases.
            visitCatchFinally(beforeTryState, afterStates, catchStatement, finallyStatement);
            visitCatchFinally(afterTryState, afterStates, catchStatement, finallyStatement);
        }
        // after states can only be empty if try and catch statements all return in which case nothing to do
        if (afterStates.isEmpty()) return;
        // now adjust the state variables - any early returns won't have gotten here
        // but we need to check that the same status was observed by all paths
        // and mark as ambiguous if needed
        Map<Variable, VariableState> corrected = afterStates.remove(0);
        for (Map<Variable, VariableState> nextState : afterStates) {
            for (Map.Entry<Variable, VariableState> entry : corrected.entrySet()) {
                Variable var = entry.getKey();
                VariableState currentCorrectedState = entry.getValue();
                VariableState candidateCorrectedState = nextState.get(var);
                if (currentCorrectedState == VariableState.is_ambiguous) continue;
                if (currentCorrectedState != candidateCorrectedState) {
                    if (currentCorrectedState == VariableState.is_uninitialized || candidateCorrectedState == VariableState.is_uninitialized) {
                        corrected.put(var, VariableState.is_ambiguous);
                    } else {
                        corrected.put(var, VariableState.is_var);
                    }
                }
            }
        }
        getState().putAll(corrected);
    }

    private void visitCatchFinally(Map<Variable, VariableState> initialVarState, List<Map<Variable, VariableState>> afterTryCatchStates, CatchStatement catchStatement, Statement finallyStatement) {
        pushState();
//        getState().clear();
        getState().putAll(initialVarState);
        Statement code = catchStatement.getCode();
        catchStatement.visit(this);
        visitPossiblyEmptyStatement(finallyStatement);
        if (code == null || !returningBlock(code)) {
            afterTryCatchStates.add(new HashMap<Variable, VariableState>(getState()));
        }
        popState();
    }

    /**
     * @return true if the block's last statement is a return
     */
    private boolean returningBlock(Statement block) {
        if (block instanceof ReturnStatement) {
            return true;
        }
        if (!(block instanceof BlockStatement)) {
            return false;
        }
        BlockStatement bs = (BlockStatement) block;
        if (bs.getStatements().size() == 0) {
            return false;
        }
        Statement last = DefaultGroovyMethods.last(bs.getStatements());
        if (last instanceof ReturnStatement) {
            return true;
        }
        return false;
        if ((variableState == VariableState.is_var || variableState == VariableState.is_ambiguous) && callback != null) {
