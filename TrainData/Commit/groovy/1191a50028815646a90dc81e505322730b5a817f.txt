import groovy.lang.Tuple2;
import java.util.ArrayList;
        Tuple2<Integer, Integer> indexTuple = findTokensToRender(tokenList, latestTokenList);
        for (int i = indexTuple.getFirst(), n = indexTuple.getSecond(); i < n; i) {
    private static Tuple2<Integer, Integer> findTokensToRender(List<Token> tokenList, List<Token> latestTokenList) {
        int tokenListSize = tokenList.size();
        int latestTokenListSize = latestTokenList.size();

        if (0 == tokenListSize || 0 == latestTokenListSize) {
            return new Tuple2<>(0, tokenListSize);
        }

        int startTokenIndex = 0;
        int minSize = Math.min(tokenListSize, latestTokenListSize);
        for (int i = 0; i < minSize; i) {
            Token token = tokenList.get(i);
            Token latestToken = latestTokenList.get(i);

            if (token.getType() == latestToken.getType()
                    && token.getStartIndex() == latestToken.getStartIndex()
                    && token.getStopIndex() == latestToken.getStopIndex()) {
                continue;
            }

            startTokenIndex = i;
            break;
        }

        List<Token> newTokenList = new ArrayList<>(tokenList);
        List<Token> newLatestTokenList = new ArrayList<>(latestTokenList);

        Collections.reverse(newTokenList);
        Collections.reverse(newLatestTokenList);

        int stopTokenIndex = tokenListSize;

        Token lastToken = newTokenList.get(0);
        Token lastLatestToken = newLatestTokenList.get(0);

        for (int i = 0; i < minSize; i) {
            Token token = newTokenList.get(i);
            Token latestToken = newLatestTokenList.get(i);

            if ((token.getType() == latestToken.getType())
                    && (token.getStartIndex() - lastToken.getStartIndex()) == (latestToken.getStartIndex() - lastLatestToken.getStartIndex())
                    && ((token.getStopIndex() - lastToken.getStopIndex()) == (latestToken.getStopIndex() - lastLatestToken.getStopIndex()))) {
                continue;
            }

            stopTokenIndex = tokenListSize - i;
            break;
        }

        return new Tuple2<>(startTokenIndex, stopTokenIndex);
    }

    private List<Token> latestTokenList = Collections.emptyList();
