import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import static org.codehaus.groovy.ast.tools.GenericsUtils.correctToGenericsSpec;
import static org.codehaus.groovy.ast.tools.GenericsUtils.createGenericsSpec;

                public void visitClass(ClassNode node) {
                    List<Statement> savedStatements = new ArrayList<>(node.getObjectInitializerStatements());

                    for (ClassNode trait : findTraits(node)) {
                        // GROOVY-9031: replace property type placeholder with resolved type from trait generics
                        Map<String, ClassNode> generics = trait.isUsingGenerics() ? createGenericsSpec(trait) : null;
                            ClassNode traitPropertyType = traitProperty.getType();
                            traitProperty.setType(correctToGenericsSpec(generics, traitPropertyType));
                            traitProperty.setType(traitPropertyType);
                private Iterable<ClassNode> findTraits(ClassNode node) {
                    Set<ClassNode> traits = new LinkedHashSet<>();

                    LinkedList<ClassNode> todo = new LinkedList<>();
                    Collections.addAll(todo, node.getInterfaces());
                    while (!todo.isEmpty()) {
                        ClassNode next = todo.removeLast();
                        if (Traits.isTrait(next)) traits.add(next);
                        Collections.addAll(todo, next.getInterfaces());
                    }

                    return traits;
                }

