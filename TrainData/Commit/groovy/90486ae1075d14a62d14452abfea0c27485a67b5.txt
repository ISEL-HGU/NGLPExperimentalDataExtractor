import org.codehaus.groovy.transform.sc.StaticCompilationMetadataKeys;
            TypeCheckingContext.EnclosingClosure enclosingClosure = typeCheckingContext.getEnclosingClosure();
            if (enclosingClosure != null) {
                // GROOVY-8562
                // when vexp has the same name as a property of the owner,
                // the IMPLICIT_RECEIVER must be set in case it's the delegate
                if (tryVariableExpressionAsProperty(vexp, vexp.getName())) {
                    // IMPLICIT_RECEIVER is handled elsewhere
                    // however other access needs to be fixed for private access
                    if (vexp.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER) == null) {
                        ClassNode owner = (ClassNode) vexp.getNodeMetaData(StaticCompilationMetadataKeys.PROPERTY_OWNER);
                        if (owner != null) {
                            boolean lhsOfEnclosingAssignment = isLHSOfEnclosingAssignment(vexp);
                            fieldNode = owner.getField(vexp.getName());
                            vexp.setAccessedVariable(fieldNode);
                            checkOrMarkPrivateAccess(vexp, fieldNode, lhsOfEnclosingAssignment);
                        }
                    }
                }
            }

