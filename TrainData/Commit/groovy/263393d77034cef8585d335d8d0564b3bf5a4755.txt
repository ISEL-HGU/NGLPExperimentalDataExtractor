            instanceOfExpression = findNotInstanceOfReturnExpression(ifElse);
        }
        if (instanceOfExpression != null) {
    protected void visitInstanceofNot(BinaryExpression be) {
     * if (!(var1 instanceOf Runnable)) {
     *   return
    protected BinaryExpression findInstanceOfNotReturnExpression(IfStatement ifElse) {
        if (notReturningBlock(ifElse.getIfBlock())) {
    /**
     * Check IfStatement matched pattern :
     * Object var1;
     * if (var1 !instanceOf Runnable) {
     *   return
     * }
     * // Here var1 instance of Runnable
     *
     * Return expression , which contains instanceOf (without not)
     * Return null, if not found
     */
    protected BinaryExpression findNotInstanceOfReturnExpression(IfStatement ifElse) {
        Statement elseBlock = ifElse.getElseBlock();
        if (!(elseBlock instanceof EmptyStatement)) {
            return null;
        }
        Expression conditionExpression = ifElse.getBooleanExpression().getExpression();
        if (!(conditionExpression instanceof BinaryExpression)) {
            return null;
        }
        BinaryExpression instanceOfExpression = (BinaryExpression) conditionExpression;
        int op = instanceOfExpression.getOperation().getType();
        if (op != Types.COMPARE_NOT_INSTANCEOF) {
            return null;
        }
        if (notReturningBlock(ifElse.getIfBlock())) {
            return null;
        }
        return instanceOfExpression;
    }

    private boolean notReturningBlock(Statement block) {
        if (!(block instanceof BlockStatement)) {
            return true;
        }
        BlockStatement bs = (BlockStatement) block;
        if (bs.getStatements().size() == 0) {
            return true;
        }
        Statement last = DefaultGroovyMethods.last(bs.getStatements());
        if (!(last instanceof ReturnStatement)) {
            return true;
        }
        return false;
    }

