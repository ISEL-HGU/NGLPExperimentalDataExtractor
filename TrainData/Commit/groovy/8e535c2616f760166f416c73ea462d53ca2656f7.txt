import groovy.lang.Tuple2;
            ClassNode lType = null;
                lType = getType(leftExpression);
                inferParameterAndReturnTypesOfClosureOnRHS(lType, rightExpression, op);


            if (null == lType) lType = getType(leftExpression);
    private void inferParameterAndReturnTypesOfClosureOnRHS(ClassNode lType, Expression rightExpression, int op) {
        if (ASSIGN == op) {
            if (rightExpression instanceof ClosureExpression && ClassHelper.isFunctionalInterface(lType)) {
                Tuple2<ClassNode[], ClassNode> typeInfo = GenericsUtils.parameterizeSAM(lType);
                ClassNode[] paramTypes = typeInfo.getV1();
                ClosureExpression closureExpression = ((ClosureExpression) rightExpression);
                Parameter[] closureParameters = closureExpression.getParameters();

                if (paramTypes.length == closureParameters.length) {
                    for (int i = 0, n = closureParameters.length; i < n; i) {
                        Parameter parameter = closureParameters[i];
                        if (parameter.isDynamicTyped()) {
                            parameter.setType(paramTypes[i]);
                            parameter.setOriginType(paramTypes[i]);
                        }
                    }
                } else {
                    addStaticTypeError("Wrong number of parameters: ", closureExpression);
                }

                storeInferredReturnType(rightExpression, typeInfo.getV2());
            }
        }
    }


            ClassNode expectedReturnType = getInferredReturnType(expression);
            // type argument can not be of primitive type, we should convert it to the wrapper type
            if (null != expectedReturnType && ClassHelper.isPrimitiveType(returnType) && expectedReturnType.equals(ClassHelper.getWrapper(returnType))) {
                returnType = expectedReturnType;
            }

            if (null != blockParameterType && blockParameterType.isGenericsPlaceHolder()) {
                        if (null != type && !type.isGenericsPlaceHolder()) {
