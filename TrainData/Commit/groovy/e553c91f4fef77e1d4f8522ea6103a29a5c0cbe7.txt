    public List<Expression> visitVariableInitializers(VariableInitializersContext ctx) {
        if (!asBoolean(ctx)) {
            return Collections.emptyList();
        }

        return ctx.variableInitializer().stream()
                        .map(this::visitVariableInitializer)
                        .collect(Collectors.toList());
    @Override
    public List<Expression> visitArrayInitializer(ArrayInitializerContext ctx) {
        if (!asBoolean(ctx)) {
            return Collections.emptyList();
        }

        return this.visitVariableInitializers(ctx.variableInitializers());
    }
            if (asBoolean(ctx.arrayInitializer())) {
                ClassNode arrayType = classNode;
                for (int i = 0, n = ctx.b.size() - 1; i < n; i) {
                    arrayType = arrayType.makeArray();
                }
                return this.configureAST(
                        new ArrayExpression(
                                arrayType,
                                this.visitArrayInitializer(ctx.arrayInitializer())),
                        ctx);
            } else {
                Expression[] empties;
                if (asBoolean(ctx.b)) {
                    empties = new Expression[ctx.b.size()];
                    Arrays.setAll(empties, i -> ConstantExpression.EMPTY_EXPRESSION);
                } else {
                    empties = new Expression[0];
                }

                return this.configureAST(
                        new ArrayExpression(
                                classNode,
                                null,
                                Stream.concat(
                                        ctx.expression().stream()
                                                .map(e -> (Expression) this.visit(e)),
                                        Arrays.stream(empties)
                                ).collect(Collectors.toList())),
                        ctx);
            }
