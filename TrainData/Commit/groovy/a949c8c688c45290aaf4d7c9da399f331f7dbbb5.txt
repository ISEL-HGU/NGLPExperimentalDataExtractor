                            int matchingMethod = findMatchingMethod(method, mopName, index, mopMethods);
                                int matchingMethod = findMatchingMethod(method, fixedMopName, index, mopMethods);
                        int matchingMethod = findMatchingMethod(method, mopName, index, mopMethods);
    private int findMatchingMethod(MetaMethod method, String mopName, int index, CachedMethod[] mopMethods) {
        int from = index;
        while (from > 0 && mopMethods[from-1].getName().equals(mopName))
          from--;
        int to = index;
        while (to < mopMethods.length-1 && mopMethods[to1].getName().equals(mopName))
          to;

        return findMatchingMethod(mopMethods, from, to, method);
    }

        method = getMetaMethod(instanceKlazz, methodName, arguments, metaClass, method);

        method = findOwnMethod(instanceKlazz, methodName, arguments, metaClass, method);

        return method;
    }

    private static MetaMethod getMetaMethod(Class instanceKlazz, String methodName, Class[] arguments, MetaClass metaClass, MetaMethod method) {
                    method = findSubClassMethod(instanceKlazz, arguments, method, m);
                        method = findSubClassMethod(instanceKlazz, arguments, method, m);
    private static MetaMethod findSubClassMethod(Class instanceKlazz, Class[] arguments, MetaMethod method, MetaMethod m) {
        if (m.getDeclaringClass().getTheClass().isAssignableFrom(instanceKlazz)) {
            if (m.isValidExactMethod(arguments)) {
                if (method == null)
                  method = m;
                else {
                  method = mostSpecific (method, m, instanceKlazz);
                }
            }
        }
        return method;
    }

            method = getMetaMethod(instanceKlazz, methodName, arguments, infMetaClass, method);
