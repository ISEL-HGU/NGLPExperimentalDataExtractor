            visitGetter(node, getterBlock, getterModifiers, getterName);
                visitGetter(node, getterBlock, getterModifiers, secondGetterName);
    private void visitGetter(PropertyNode node, Statement getterBlock, int getterModifiers, String secondGetterName) {
        MethodNode secondGetter =
                new MethodNode(secondGetterName, getterModifiers, node.getType(), Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, getterBlock);
        secondGetter.setSynthetic(true);
        addPropertyMethod(secondGetter);
        visitMethod(secondGetter);
    }

                        index = addExpression(newParams, arguments, index, parameter);
                        index = addExpression(newParams, arguments, index, parameter);
    private int addExpression(Parameter[] newParams, ArgumentListExpression arguments, int index, Parameter parameter) {
        newParams[index] = parameter;
        arguments.addExpression(
                new CastExpression(
                        parameter.getType(),
                        new VariableExpression(parameter.getName())
                )
        );
        return index;
    }

            storeMissingCovariantMethods(declaredMethods, methodsToAdd, genericsSpec, classMethods);
            storeMissingCovariantMethods(declaredMethods, methodsToAdd, genericsSpec, interfacesMethods);
    private void storeMissingCovariantMethods(List declaredMethods, Map methodsToAdd, Map genericsSpec, List<MethodNode> methodNodeList) {
        for (Object declaredMethod : declaredMethods) {
            MethodNode method = (MethodNode) declaredMethod;
            if (method.isStatic()) continue;
            storeMissingCovariantMethods(methodNodeList, method, methodsToAdd, genericsSpec, false);
        }
    }

