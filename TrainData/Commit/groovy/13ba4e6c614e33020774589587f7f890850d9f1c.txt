     * Checks valid cases for accessing a field from an inner class.
    private String checkOrMarkInnerPropertyOwnerAccess(Expression source, FieldNode fn, boolean lhsOfAssignment, String delegationData) {
        if (fn == null || fn.isStatic() || fn.isPrivate() || "delegate".equals(delegationData)) return delegationData;
        if (source instanceof PropertyExpression && typeCheckingContext.getEnclosingClosure() != null) {
            PropertyExpression pe = (PropertyExpression) source;
            boolean ownerProperty = !("this".equals(pe.getPropertyAsString()));
            if (ownerProperty && pe.getObjectExpression() instanceof VariableExpression) {
                Variable accessedVariable = ((VariableExpression) pe.getObjectExpression()).getAccessedVariable();
                Variable declaredVariable = typeCheckingContext.getEnclosingClosure().getClosureExpression().getVariableScope().getDeclaredVariable(pe.getObjectExpression().getText());
                if (accessedVariable != null && accessedVariable == declaredVariable) ownerProperty = false;
            if (ownerProperty) {
                delegationData = "owner";
                pe.getObjectExpression().putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
            }
        delegationData = checkOrMarkInnerPropertyOwnerAccess(expressionToStoreOn, field, lhsOfAssignment, delegationData);
