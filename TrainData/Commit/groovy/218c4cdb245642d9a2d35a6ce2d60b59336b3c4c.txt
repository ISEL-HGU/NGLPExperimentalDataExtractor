import org.codehaus.groovy.ast.ASTNode;
import static org.apache.groovy.ast.tools.MethodNodeUtils.getPropertyName;
import static org.codehaus.groovy.ast.tools.PropertyNodeUtils.adjustPropertyModifiersForMethod;
                            " is a duplicate of the one declared for this script's body code", sourceOf(mn));
                            " duplicates another method of the same signature", sourceOf(mn));
        int accessorModifiers = adjustPropertyModifiersForMethod(node);
                        sourceOf(method));
                            throw new RuntimeParserException(error, sourceOf(method));
                        intfMethod.getDeclaringClass(), sourceOf(m));
                    sourceOf(overridingMethod));
                    sourceOf(overridingMethod));
                    sourceOf(overridingMethod));
                        sourceOf(overridingMethod));
    private static ASTNode sourceOf(MethodNode methodNode) {
        if (methodNode.getLineNumber() < 1) {
            ClassNode declaringClass = methodNode.getDeclaringClass();
            if (methodNode.isSynthetic()) {
                String propertyName = getPropertyName(methodNode);
                if (propertyName != null) {
                    PropertyNode propertyNode = declaringClass.getProperty(propertyName);
                    if (propertyNode != null && propertyNode.getLineNumber() > 0) {
                        return propertyNode;
                    }
                }
            }
            return declaringClass;
        }
        return methodNode;
    }

