import static org.apache.groovy.ast.tools.ClassNodeUtils.formatTypeName;

 * declared by name with an expression like "def foo" or with type "String foo". However,

     * Creates a DeclarationExpression for VariableExpressions like "def x" or "String y = 'foo'".
     */

     *      the left hand side of a declaration. Must be either a VariableExpression or
     *      a TupleExpression with at least one element.
     */

    @Override
     * be sure to invoke isMultipleAssignmentDeclaration() first to check that it is safe to do so.

     * be sure to invoke isMultipleAssignmentDeclaration() first to check that it is safe to do so.
     * If that method returns true then this method is safe to call.
     * @throws ClassCastException

    @Override
    public String getText() {
        StringBuilder text = new StringBuilder();

        if (!isMultipleAssignmentDeclaration()) {
            VariableExpression v = getVariableExpression();
            if (v.isDynamicTyped()) {
                text.append("def");
            } else {
                text.append(formatTypeName(v.getType()));
            }
            text.append(' ').append(v.getText());
        } else {
            TupleExpression t = getTupleExpression();
            text.append("def (");
            for (Expression e : t.getExpressions()) {
                if (e instanceof VariableExpression) {
                    VariableExpression v = (VariableExpression) e;
                    if (!v.isDynamicTyped()) {
                        text.append(formatTypeName(v.getType())).append(' ');
                    }
                }
                text.append(e.getText()).append(", ");
            }
            text.setLength(text.length() - 2);
            text.append(')');
        }
        text.append(' ').append(getOperation().getText());
        text.append(' ').append(getRightExpression().getText());

        return text.toString();
    }

     * either a VariableExpression or a TupleExpression with one or more elements.
     *      either a VariableExpression or a TupleExpression with one or more elements.
     */
    @Override

    @Override

    @Override

     * This method tells you if this declaration is a multiple assignment declaration, which
     * hand side is an ArgumentListExpression. Do not call "getVariableExpression()" on this
     * object if this method returns true, instead use "getLeftExpression()".
     *      left hand side is an ArgumentListExpression.
     */
