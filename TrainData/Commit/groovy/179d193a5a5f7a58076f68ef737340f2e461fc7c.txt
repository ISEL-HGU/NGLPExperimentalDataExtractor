        assertEquals(4, ctor.getParameterTypes().length);
        checkOuterRef(params[0], Groovy8008Bug.class);
        checkStringWithNoAnnos(params[1]);
        checkDateWithTwoAnnos(params[2]);
        checkStringWithOneAnno(params[3]);
        // do the same again for an inner inner class
        Class<Inner.InnerInner> innerInnerClass = Inner.InnerInner.class;
        Constructor<Inner.InnerInner> innerCtor = innerInnerClass.getDeclaredConstructor(Groovy8008Bug.Inner.class, String.class, Date.class, String.class);
        assertEquals(4, innerCtor.getParameterTypes().length);
        cn = new ClassNode(innerInnerClass);
        // trigger the call to VMPlugin#configureClassNode(CompileUnit,ClassNode)
        ctors = cn.getDeclaredConstructors();
        assertEquals(1, ctors.size());
        params = ctors.get(0).getParameters();
        checkOuterRef(params[0], Groovy8008Bug.Inner.class);
        checkStringWithNoAnnos(params[1]);
        checkDateWithTwoAnnos(params[2]);
        checkStringWithOneAnno(params[3]);
    }

    private void checkOuterRef(Parameter param, Class outerClass) {
        assertEquals(outerClass.getName(), param.getType().getName());
        assertEquals(0, param.getAnnotations().size());
    }

    private void checkStringWithOneAnno(Parameter param) {
        assertEquals(String.class.getName(), param.getType().getName());
        assertEquals(1, param.getAnnotations().size());
        assertEquals(TestAnno2.class.getName(), param.getAnnotations().get(0).getClassNode().getName());
    }

    private void checkStringWithNoAnnos(Parameter param) {
        assertEquals(String.class.getName(), param.getType().getName());
        assertEquals(0, param.getAnnotations().size());
    }

    private void checkDateWithTwoAnnos(Parameter param2) {
        assertEquals(Date.class.getName(), param2.getType().getName());
        assertEquals(2, param2.getAnnotations().size());
        assertEquals(TestAnno1.class.getName(), param2.getAnnotations().get(0).getClassNode().getName());
        assertEquals(TestAnno2.class.getName(), param2.getAnnotations().get(1).getClassNode().getName());

        private class InnerInner {
            private InnerInner(String arg1, @TestAnno1 @TestAnno2 Date arg2, @TestAnno2 String arg3) { }
        }
