import java.util.HashSet;
import java.util.Set;
            boolean allProperties = memberHasValue(anno, "allProperties", true);
                    callSuper, force, excludes, includes, useSetters, defaults, allNames, allProperties, sourceUnit,
        createConstructor(xform, cNode, includeFields, includeProperties, includeSuperFields, includeSuperProperties, callSuper, force, excludes, includes, useSetters, defaults, allNames, false, sourceUnit, pre, post);
    }

    public static void createConstructor(AbstractASTTransformation xform, ClassNode cNode, boolean includeFields,
                                         boolean includeProperties, boolean includeSuperFields, boolean
                                                 includeSuperProperties, boolean callSuper, boolean force,
                                         List<String> excludes, final List<String> includes, boolean useSetters, boolean
                                                 defaults, boolean allNames, boolean allProperties, SourceUnit sourceUnit, ClosureExpression
                                                 pre, ClosureExpression post) {
        Set<String> names = new HashSet<String>();
        List<PropertyNode> superList;
            superList = getAllFields(names, cNode.getSuperClass(), includeSuperProperties, includeSuperFields, allProperties, true);
        } else {
            superList = new ArrayList<PropertyNode>();
        List<PropertyNode> list = getAllFields(names, cNode, true, includeFields, allProperties, false);
        for (PropertyNode pNode : superList) {
            FieldNode fNode = pNode.getField();
            String name = pNode.getName();
        for (PropertyNode pNode : list) {
            String name = pNode.getName();
            FieldNode fNode = pNode.getField();
