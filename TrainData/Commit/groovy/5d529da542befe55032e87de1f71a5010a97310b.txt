        if (!implicitThis || typeCheckingContext.delegationMetadata == null) {
        } else {
            addReceivers(receivers, owners, typeCheckingContext.delegationMetadata, "");
    private static void addReceivers(final List<Receiver<String>> receivers,
                                     final Collection<Receiver<String>> owners,
                                     final DelegationMetadata dmd,
                                     final String path) {
        int strategy = dmd.getStrategy();
        switch (strategy) {
            case Closure.DELEGATE_ONLY:
            case Closure.DELEGATE_FIRST:
                addDelegateReceiver(receivers, dmd.getType(), path  "delegate");
                if (strategy == Closure.DELEGATE_FIRST) {
                    if (dmd.getParent() == null) {
                        receivers.addAll(owners);
                    } else {
                        addReceivers(receivers, owners, dmd.getParent(), path  "owner.");
                    }
                }
                break;
            case Closure.OWNER_ONLY:
            case Closure.OWNER_FIRST:
                if (dmd.getParent() == null) {
                    receivers.addAll(owners);
                } else {
                    addReceivers(receivers, owners, dmd.getParent(), path  "owner.");
                }
                if (strategy == Closure.OWNER_FIRST) {
                    addDelegateReceiver(receivers, dmd.getType(), path  "delegate");
                }
                break;
        }
    }

    private static void addDelegateReceiver(final List<Receiver<String>> receivers, final ClassNode delegate, final String path) {
        receivers.add(new Receiver<String>(delegate, path));
        if (Traits.isTrait(delegate.getOuterClass())) {
            receivers.add(new Receiver<String>(delegate.getOuterClass(), path));
