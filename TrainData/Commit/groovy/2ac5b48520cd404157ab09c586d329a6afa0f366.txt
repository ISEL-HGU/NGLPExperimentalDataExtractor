import static org.apache.groovy.parser.antlr4.GroovyLangParser.BuiltInTypePrmrAltContext;
            if (baseExpr instanceof ClassExpression) { // void and primitive type AST node must be an instance of ClassExpression
    public Expression visitIdentifierPrmrAlt(IdentifierPrmrAltContext ctx) {
        if (asBoolean(ctx.typeArguments())) {
            ClassNode classNode = ClassHelper.make(ctx.identifier().getText());

            classNode.setGenericsTypes(
                    this.visitTypeArguments(ctx.typeArguments()));

            return configureAST(new ClassExpression(classNode), ctx);
        }

    public ClassExpression visitBuiltInTypePrmrAlt(BuiltInTypePrmrAltContext ctx) {
        return configureAST(this.visitBuiltInType(ctx.builtInType()), ctx);
    public ClassExpression visitBuiltInType(BuiltInTypeContext ctx) {
        return configureAST(new ClassExpression(ClassHelper.make(text)), ctx);
        } else if (asBoolean(ctx.VOID())) {
            if (ctx.allowVoid) {
                classNode = configureAST(ClassHelper.make(ctx.getText()), ctx.VOID());
            }
            // TODO refine error message for `void`
