    private boolean compileStatic;
        if (compileStatic) {
            return;
        }
        if (!Boolean.getBoolean("groovy.compile.static")) {
            new CompilationCustomizer(CompilePhase.CONVERSION) {
                @Override
                public void call(final SourceUnit source, GeneratorContext context, ClassNode classNode) throws CompilationFailedException {
                    for (ClassNode cn : source.getAST().getClasses()) {
                        new ClassCodeVisitorSupport() {
                            @Override
                            public void visitClass(ClassNode node) {
                                enableCompileStatic(node);
                            }

                            private void enableCompileStatic(ClassNode classNode) {
                                if (!classNode.getAnnotations(ClassHelper.make(GROOVY_TRANSFORM_COMPILE_STATIC)).isEmpty()) {
                                    return;
                                }
                                if (!classNode.getAnnotations(ClassHelper.make(GROOVY_TRANSFORM_COMPILE_DYNAMIC)).isEmpty()) {
                                    return;
                                classNode.addAnnotation(new AnnotationNode(ClassHelper.make(GROOVY_TRANSFORM_COMPILE_STATIC)));
                            }
                            @Override
                            protected SourceUnit getSourceUnit() {
                                return source;
                            }
                            private static final String GROOVY_TRANSFORM_COMPILE_STATIC = "groovy.transform.CompileStatic";
                            private static final String GROOVY_TRANSFORM_COMPILE_DYNAMIC = "groovy.transform.CompileDynamic";
                        }.visitClass(cn);
            }
        compileStatic = true;
