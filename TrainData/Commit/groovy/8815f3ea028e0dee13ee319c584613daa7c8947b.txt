import java.util.concurrent.locks.ReentrantReadWriteLock;
    private static final Class[] EMPTY_CLASS_ARRAY = new Class[0];
    protected final Map<String, Class> classCache = new HashMap<String, Class>(); // TODO should we make classCache private?

    private final ReentrantReadWriteLock rwlForClassCache = new ReentrantReadWriteLock();
    private final ReentrantReadWriteLock.ReadLock readLockForClassCache = rwlForClassCache.readLock();
    private final ReentrantReadWriteLock.WriteLock writeLockForClassCache = rwlForClassCache.writeLock();

        readLockForClassCache.lock();
        try {
        } finally {
            readLockForClassCache.unlock();
        String className = cls.getName();

        writeLockForClassCache.lock();
        try {
            classCache.put(className, cls);
        } finally {
            writeLockForClassCache.unlock();
        writeLockForClassCache.lock();
        try {
        } finally {
            writeLockForClassCache.unlock();
        final Collection<Class> values;

        readLockForClassCache.lock();
        try {
            values = classCache.values();
        } finally {
            readLockForClassCache.unlock();

        return values.toArray(EMPTY_CLASS_ARRAY);
        Collection<Class> classesToClear;

        writeLockForClassCache.lock();
        try {
            classesToClear = classCache.values();
        } finally {
            writeLockForClassCache.unlock();

        for (Class c : classesToClear) {
