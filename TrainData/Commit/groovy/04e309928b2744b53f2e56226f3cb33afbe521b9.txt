import static org.codehaus.groovy.ast.tools.GenericsUtils.getSuperClass;
        if (target == null || type == target || !isUsingGenericsOrIsArrayUsingGenerics(target)) return;
        if (type == null || type == UNKNOWN_PARAMETER_TYPE) return;
                connections.put(target.getGenericsTypes()[0].getName(), new GenericsType(type));
            ClassNode superClass = getSuperClass(type, target);
            if (superClass != null) {
                ClassNode corrected = getCorrectedClassNode(type, superClass, true);
                throw new GroovyBugError("The type "  type  " seems not to normally extend "  target  ". Sorry, I cannot handle this.");
    public static ClassNode getCorrectedClassNode(ClassNode type, ClassNode superClass, boolean handlingGenerics) {
        ClassNode corrected;
        if (handlingGenerics && missesGenericsTypes(type)) {
            corrected = superClass.getPlainNodeReference();
        } else {
            corrected = GenericsUtils.correctToGenericsSpecRecurse(GenericsUtils.createGenericsSpec(type), superClass);
        }
        return corrected;
    }

