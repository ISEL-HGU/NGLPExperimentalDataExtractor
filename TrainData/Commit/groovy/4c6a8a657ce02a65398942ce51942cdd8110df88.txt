import org.codehaus.groovy.classgen.Verifier;
        ClassNode enclosingClassNode = typeCheckingContext.getEnclosingClassNode();
        ClassNode declaringClass = fn.getDeclaringClass();
                (declaringClass != enclosingClassNode || typeCheckingContext.getEnclosingClosure() != null) &&
                declaringClass.getModule() == enclosingClassNode.getModule()) {
            if (!lhsOfAssignment && enclosingClassNode.isDerivedFrom(declaringClass)) {
                // check for a public/protected getter since JavaBean getters haven't been recognised as properties
                // at this point and we don't want private field access for that case which will be handled later
                boolean isPrimBool = fn.getOriginType().equals(ClassHelper.boolean_TYPE);
                String suffix = Verifier.capitalize(fn.getName());
                MethodNode getterNode = findValidGetter(enclosingClassNode, "get"  suffix);
                if (getterNode == null && isPrimBool) {
                    getterNode = findValidGetter(enclosingClassNode, "is"  suffix);
                }
                if (getterNode != null) {
                    source.setNodeMetaData(StaticTypesMarker.INFERRED_TYPE, getterNode.getReturnType());
                    return;
                }
            }
            addPrivateFieldOrMethodAccess(source, declaringClass, marker, fn);
    private MethodNode findValidGetter(ClassNode classNode, String name) {
        MethodNode getterMethod = classNode.getGetterMethod(name);
        if (getterMethod != null && (getterMethod.isPublic() || getterMethod.isProtected())) {
            return getterMethod;
        }
        return null;
    }

