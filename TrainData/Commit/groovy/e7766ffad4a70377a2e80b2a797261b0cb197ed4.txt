    private static Map<GenericsType, GenericsType> makeDeclaringAndActualGenericsTypeMap(ClassNode declaringClass, ClassNode actualReceiver) {
        GenericsType[] declaringGenericsTypes = declaringClass.getGenericsTypes();
        GenericsType[] actualGenericsTypes = actualReceiver.getGenericsTypes();
            List<ClassNode> superClassAndInterfaceList = getAllSuperClassesAndInterfaces(actualReceiver);
                if (declaringClass.equals(cn.redirect())) {
                    if (isGenericsTypeArraysLengthEqual(declaringGenericsTypes, actualGenericsTypes)) {
        if (!isGenericsTypeArraysLengthEqual(declaringGenericsTypes, actualGenericsTypes)) {
    private static boolean isGenericsTypeArraysLengthEqual(GenericsType[] declaringGenericsTypes, GenericsType[] actualGenericsTypes) {
        return null != actualGenericsTypes && declaringGenericsTypes.length == actualGenericsTypes.length;
    }

    private static List<ClassNode> getAllSuperClassesAndInterfaces(ClassNode actualReceiver) {
        List<ClassNode> allSuperClassNodeList = getAllUnresolvedSuperClasses(actualReceiver);
        superClassAndInterfaceList.addAll(actualReceiver.getAllInterfaces());
    private static List<ClassNode> getAllUnresolvedSuperClasses(ClassNode actualReceiver) {
        for (ClassNode cn = actualReceiver.getUnresolvedSuperClass(); null != cn && ClassHelper.OBJECT_TYPE != cn; cn = cn.getUnresolvedSuperClass()) {
