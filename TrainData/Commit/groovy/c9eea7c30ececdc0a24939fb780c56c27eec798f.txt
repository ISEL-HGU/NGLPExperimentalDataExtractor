        resolveGenericsHeader(types, null, 0);
    }

    private void resolveGenericsHeader(GenericsType[] types, GenericsType rootType, int level) {
        List<Tuple2<ClassNode, GenericsType>> upperBoundsWithGenerics = new LinkedList<>();
            if (level > 0 && type.getName().equals(rootType.getName())) {
                continue;
            }

            boolean isWild = "?".equals(name);
            boolean toDealWithGenerics = 0 == level || (level > 0 && null != genericParameterNames.get(name));

                    if (!isWild) {
                        if (!nameAdded && upperBound != null || !resolve(classNode)) {
                            if (toDealWithGenerics) {
                                genericParameterNames.put(name, type);
                                type.setPlaceholder(true);
                                classNode.setRedirect(upperBound);
                                nameAdded = true;
                            }

                        }
                        resolveOrFail(upperBound, classNode);

                    if (upperBound.isUsingGenerics()) {
                        upperBoundsWithGenerics.add(new Tuple2<>(upperBound, type));
                    }
                if (!isWild) {
                    if (toDealWithGenerics) {
                        genericParameterNames.put(name, type);
                        type.setPlaceholder(true);
                        classNode.setRedirect(ClassHelper.OBJECT_TYPE);
                    }
                }

        for (Tuple2<ClassNode, GenericsType> tp : upperBoundsWithGenerics) {
            ClassNode upperBound = tp.getFirst();
            GenericsType gt = tp.getSecond();
            resolveGenericsHeader(upperBound.getGenericsTypes(), 0 == level ? gt : rootType, level  1);
        }
