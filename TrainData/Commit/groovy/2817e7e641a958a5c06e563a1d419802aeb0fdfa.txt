import org.codehaus.groovy.ast.ASTNode;
import org.codehaus.groovy.ast.AnnotatedNode;
import org.codehaus.groovy.ast.AnnotationNode;
import org.codehaus.groovy.ast.ClassCodeVisitorSupport;
import org.codehaus.groovy.ast.ClassHelper;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.ConstructorNode;
import org.codehaus.groovy.ast.FieldNode;
import org.codehaus.groovy.ast.GenericsType;
import org.codehaus.groovy.ast.MethodNode;
import org.codehaus.groovy.ast.PackageNode;
import org.codehaus.groovy.ast.Parameter;
import org.codehaus.groovy.ast.PropertyNode;
import org.codehaus.groovy.ast.expr.AnnotationConstantExpression;
import org.codehaus.groovy.ast.expr.ClassExpression;
import org.codehaus.groovy.ast.expr.Expression;
import org.codehaus.groovy.ast.expr.ListExpression;
import java.util.LinkedHashMap;
        Map<String, List<AnnotationNode>> runtimeAnnotations = new LinkedHashMap<String, List<AnnotationNode>>();
            String name = visited.getClassNode().getName();
            if (visited.hasRuntimeRetention()) {
                List<AnnotationNode> seen = runtimeAnnotations.get(name);
                if (seen == null) {
                    seen = new ArrayList<AnnotationNode>();
                }
                seen.add(visited);
                runtimeAnnotations.put(name, seen);
            }
            boolean isTargetAnnotation = name.equals("java.lang.annotation.Target");
                addError("Annotation @"  name  " is not allowed on element "
                         AnnotationNode.targetToName(target), visited);
        checkForDuplicateAnnotations(node, runtimeAnnotations);
    }

    private void checkForDuplicateAnnotations(AnnotatedNode node, Map<String, List<AnnotationNode>> runtimeAnnotations) {
        for (Map.Entry<String, List<AnnotationNode>> next : runtimeAnnotations.entrySet()) {
            if (next.getValue().size() > 1) {
                ClassNode repeatable = null;
                AnnotationNode repeatee = next.getValue().get(0);
                List<AnnotationNode> repeateeAnnotations = repeatee.getClassNode().getAnnotations();
                for (AnnotationNode anno : repeateeAnnotations) {
                    ClassNode annoClassNode = anno.getClassNode();
                    if (annoClassNode.getName().equals("java.lang.annotation.Repeatable")) {
                        Expression value = anno.getMember("value");
                        if (value instanceof ClassExpression) {
                            ClassExpression ce = (ClassExpression) value;
                            if (ce.getType() != null && ce.getType().isAnnotationDefinition()) {
                                repeatable = ce.getType();
                                break;
                            }
                        }
                    }
                }
                if (repeatable != null) {
                    AnnotationNode collector = new AnnotationNode(repeatable);
                    collector.setRuntimeRetention(true); // checked earlier
                    List<Expression> annos = new ArrayList<Expression>();
                    for (AnnotationNode an : next.getValue()) {
                        annos.add(new AnnotationConstantExpression(an));
                    }
                    collector.addMember("value", new ListExpression(annos));
                    node.addAnnotation(collector);
                    node.getAnnotations().removeAll(next.getValue());
                }
            }
        }
