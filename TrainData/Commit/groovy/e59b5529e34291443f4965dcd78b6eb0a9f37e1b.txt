import groovy.lang.GroovyClassLoader;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.expr.DeclarationExpression;
import org.codehaus.groovy.ast.expr.Expression;
import org.codehaus.groovy.ast.expr.VariableExpression;
import org.codehaus.groovy.ast.stmt.ExpressionStatement;
import org.codehaus.groovy.ast.stmt.Statement;
import org.codehaus.groovy.control.ErrorCollector;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.List;

    /**
     * Create ClassNode instance for type string
     *
     * @param typeStr type string, e.g. List
     * @return a {@link ClassNode} instance
     * @since 3.0.0
     */
    public ClassNode makeType(String typeStr) {
        SourceUnit sourceUnit =
                new SourceUnit(
                        "Script"  System.nanoTime(),
                        typeStr  " v",
                        compilerConfiguration,
                        AccessController.doPrivileged(
                                new PrivilegedAction<GroovyClassLoader>() {
                                    @Override
                                    public GroovyClassLoader run() {
                                        return new GroovyClassLoader();
                                    }
                                }),
                        new ErrorCollector(compilerConfiguration)
                );
        AstBuilder builder = new AstBuilder(sourceUnit, compilerConfiguration);
        ModuleNode moduleNode = builder.buildAST();

        List<Statement> statementList = moduleNode.getStatementBlock().getStatements();

        Statement statement;
        try {
            statement = statementList.get(0);
        } catch (IndexOutOfBoundsException e) {
            throw new GroovyBugError(statementList  " is empty");
        }

        if (!(statement instanceof ExpressionStatement)) {
            throw new GroovyBugError(statement  " is not an instance of ExpressionStatement");
        }

        ExpressionStatement expressionStatement = (ExpressionStatement) statement;
        Expression expression = expressionStatement.getExpression();

        if (!(expression instanceof DeclarationExpression)) {
            throw new GroovyBugError(expression  " is not an instance of DeclarationExpression");
        }

        DeclarationExpression declarationExpression = (DeclarationExpression) expression;
        Expression leftExpression = declarationExpression.getLeftExpression();

        if (!(leftExpression instanceof VariableExpression)) {
            throw new GroovyBugError(leftExpression  " is not an instance of VariableExpression");
        }

        VariableExpression variableExpression = (VariableExpression) leftExpression;

        return variableExpression.getType();
    }
