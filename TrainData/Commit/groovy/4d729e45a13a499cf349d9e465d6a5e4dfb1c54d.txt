import java.util.LinkedHashMap;
    /**
     * A cache with unlimited size
     */
    /**
     * Another LRU cache, which is slower than {@link LRUCache} but will not put same value multi-times concurrently
     * @param initialCapacity
     * @param maxSize
     */
    public CommonCache(final int initialCapacity, final int maxSize) {
        this(new LinkedHashMap<K, V>(initialCapacity, 0.75f, true) {
            @Override
            protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
                return size() > maxSize;
            }
        });
    }

