import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
  /**
   * The GoraStorage configuration setted at constructor (converted from json to bean)
   */
  protected StorageConfiguration storageConfiguration ;
  private ObjectMapper mapper = new ObjectMapper() ;
  
   * Creates a new GoraStorage to load/save.
   * 
   * The constructor must have a JSON configuration string with the following fields (optional values in brackets):
   * 
   * <pre>
   * {
   *     ["keyClass": "",]
   *     "persistentClass: "",
   *     "fields": "",
   *     ["goraProperties": "",]
   *     ["mapping": "",]
   *     ["configuration": {}]
   * }
   * </pre>
   * 
   * <ul>
   *   <li>keyClass: full class name with namespace of the key class. By default "java.lang.String".</li>
   *   <li>persistentClass: full class name with namespace of the compiled PersistentBase class.</li>
   *   <li>fields: comma-separated list of fields to load, from the first level of fields in the persistent class.. Can use "*" to denote to load all fields, or to save all columns of a relation.</li>
   *   <li>goraProperties: string with the content to use as gora.properties. If this key is missing, will try to load the values from the local file gora.properties.</li>
   *   <li>mapping: string with the XML content to use as gora-xxx-mapping.xml. If this key is missing, will try to load from local file.</li>
   *   <li>configuration: object with string key:values to override in the job configuration for hadoop.
   * </ul>
   * 
   * Example of usage:
   * <pre>
   * webpage = LOAD '.' USING org.apache.gora.pig.GoraStorage('{
   *   "persistentClass": "admin.WebPage",
   *   "fields": "baseUrl,status",
   *   "goraProperties": "gora.datastore.default=org.apache.gora.hbase.store.HBaseStore
   *                      gora.datastore.autocreateschema=true
   *                      gora.hbasestore.scanner.caching=1000",
   *   "mapping": "<?xml version=\\"1.0\\" encoding="UTF-8\\"?>
   *               <gora-odm>
   *                 <table name=\\"webpage\\">
   *                   <family name=\\"f\\" maxVersions=\\"1\\"/>
   *                 </table>
   *                 <class table=\\"webpage\\" keyClass=\\"java.lang.String\\" name=\\"admin.WebPage\\">
   *                   <field name=\\"baseUrl\\" family=\\"f\\" qualifier=\\"bas\\"/>
   *                   <field name=\\"status\\" family=\\"f\\" qualifier=\\"st\\"/>
   *                 </class>
   *               </gora-odm>",
   *   "configuration": {
   *     "hbase.zookeeper.quorum": "hdp4,hdp1,hdp3",
   *     "zookeeper.znode.parent": "/hbase-unsecure"
   *   }
   * }') ;
   * </pre>
   * 
   * @throws IOException 
   * @throws JsonMappingException 
   * @throws JsonParseException 
  public GoraStorage(String storageConfigurationString) throws InstantiationException, IllegalAccessException, JsonParseException, JsonMappingException, IOException {
    super() ;
    this.storageConfiguration = this.mapper.readValue(storageConfigurationString, StorageConfiguration.class) ;
    
      this.keyClass = ClassLoadingUtils.loadClass(this.storageConfiguration.getKeyClass());
      this.persistentClass = ClassLoadingUtils.loadClass(this.storageConfiguration.getPersistentClass()).asSubclass(PersistentBase.class);
      throw new RuntimeException("Error creating instance of key and/or persistent.",e);
    
    String csvFields = this.storageConfiguration.getFields() ;
    if (this.dataStore == null) {      
      try {
        this.dataStore = DataStoreFactory.getDataStore(
            this.storageConfiguration.getKeyClass(),
            this.storageConfiguration.getPersistentClass(),
            this.storageConfiguration.getGoraPropertiesAsProperties(),
            this.localJobConf
            ) ;
      } catch (IOException e) {
        throw new GoraException(e);
      }
    this.mergeGoraStorageConfigurationInto(job.getConfiguration());
    this.localJobConf = new JobConf(job.getConfiguration()) ;
    this.mergeGoraStorageConfigurationInto(this.localJobConf) ;
   * @throws IOException - When the conversion bean->json fails
   * @throws JsonMappingException - When the conversion bean->json fails
   * @throws JsonGenerationException - When the conversion bean->json fails
  private Properties getUDFProperties() throws JsonGenerationException, JsonMappingException, IOException {
    return UDFContext.getUDFContext().getUDFProperties(this.getClass(),
        new String[] {this.udfcSignature,this.storageConfiguration.getKeyClass(),this.storageConfiguration.getPersistentClass(),this.mapper.writeValueAsString(this.storageConfiguration)});
   * Merges the configuration from the constructor into a Configuration. If the keys exists, they are not overwritten.
   * @param configuration - The configuration to update with the non-existant keys-values
   * @throws IOException 
   * @throws JsonMappingException 
   * @throws JsonGenerationException 
  private void mergeGoraStorageConfigurationInto(Configuration configuration) {
    GoraMapReduceUtils.setIOSerializations(configuration, true) ;
    if (this.storageConfiguration.getMapping() != null) {
      configuration.set("gora.mapping", this.storageConfiguration.getMapping()) ;
    
    // Set the constructor configuration into the hadoop configuration
    this.storageConfiguration.mergeConfiguration(configuration) ;
    /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     * The Query instance here will be serialized to the workers (including configuration)
     * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     */
    this.mergeGoraStorageConfigurationInto(this.job.getConfiguration());
    this.localJobConf = new JobConf(this.job.getConfiguration()) ;
    this.mergeGoraStorageConfigurationInto(this.localJobConf);
    this.inputFormat.setConf(this.localJobConf);
    this.localJobConf = new JobConf(job.getConfiguration()) ;
    this.mergeGoraStorageConfigurationInto(this.localJobConf);
