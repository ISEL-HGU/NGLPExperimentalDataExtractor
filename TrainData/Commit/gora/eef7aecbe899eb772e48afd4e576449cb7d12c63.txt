  * http://www.apache.org/licenses/LICENSE-2.0
 * 
package org.apache.gora.examples.generated;  
  private static final long serialVersionUID = 1627924353131816005L;
  /** Enum containing all data bean's fields. */
    SSN(0, "ssn"),
    ;
    Field(int index, String name) {this.index=index;this.name=name;}
    public int getIndex() {return index;}
    public String getName() {return name;}
    public String toString() {return name;}
  "ssn",
  };
  private int ssn;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    case 0: return ssn;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
  
  @SuppressWarnings(value="unchecked")
    case 0: ssn = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    setDirty(0);
  
   * Checks the dirty status of the 'ssn' field. A field is dirty if it represents a change that has not yet been written to the database.
    return isDirty(0);
  /** Creates a new EmployeeInt RecordBuilder */
  public static org.apache.gora.examples.generated.EmployeeInt.Builder newBuilder() {
    return new org.apache.gora.examples.generated.EmployeeInt.Builder();
  
  /** Creates a new EmployeeInt RecordBuilder by copying an existing Builder */
  public static org.apache.gora.examples.generated.EmployeeInt.Builder newBuilder(org.apache.gora.examples.generated.EmployeeInt.Builder other) {
    return new org.apache.gora.examples.generated.EmployeeInt.Builder(other);
  
  /** Creates a new EmployeeInt RecordBuilder by copying an existing EmployeeInt instance */
  public static org.apache.gora.examples.generated.EmployeeInt.Builder newBuilder(org.apache.gora.examples.generated.EmployeeInt other) {
    return new org.apache.gora.examples.generated.EmployeeInt.Builder(other);
  
  public org.apache.gora.examples.generated.EmployeeInt clone() {
  
      java.nio.ByteBuffer input) {
  
    implements org.apache.avro.data.RecordBuilder<EmployeeInt> {
    private int ssn;
    /** Creates a new Builder */
      super(org.apache.gora.examples.generated.EmployeeInt.SCHEMA$);
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.gora.examples.generated.EmployeeInt.Builder other) {
    
    /** Creates a Builder by copying an existing EmployeeInt instance */
    private Builder(org.apache.gora.examples.generated.EmployeeInt other) {
            super(org.apache.gora.examples.generated.EmployeeInt.SCHEMA$);
    /** Gets the value of the 'ssn' field */
    
    /** Sets the value of the 'ssn' field */
    public org.apache.gora.examples.generated.EmployeeInt.Builder setSsn(int value) {
      return this; 
    
    /** Checks whether the 'ssn' field has been set */
    
    /** Clears the value of the 'ssn' field */
    public org.apache.gora.examples.generated.EmployeeInt.Builder clearSsn() {
    
  
  public EmployeeInt.Tombstone getTombstone(){
  	return TOMBSTONE;
  public EmployeeInt newInstance(){
  
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'ssn' field.
		   */
	  public java.lang.Integer getSsn() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'ssn' field.
		   * @param value the value to set.
	   */
	  public void setSsn(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'ssn' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSsnDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  private static final org.apache.avro.io.DatumWriter
            DATUM_WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);
  private static final org.apache.avro.io.DatumReader
            DATUM_READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);
   * Writes AVRO data bean to output stream in the form of AVRO Binary encoding format. This will transform
   * AVRO data bean from its Java object form to it s serializable form.
   * @param out java.io.ObjectOutput output stream to write data bean in serializable form
   * Reads AVRO data bean from input stream in it s AVRO Binary encoding format to Java object format.
   * This will transform AVRO data bean from it s serializable form to deserialized Java object form.
   * @param in java.io.ObjectOutput input stream to read data bean in serializable form
  

