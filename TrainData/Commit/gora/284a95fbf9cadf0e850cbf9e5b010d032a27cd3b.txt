package org.apache.gora.benchmark.generated;
public class User extends org.apache.gora.persistency.impl.PersistentBase
    implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
      "{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"org.apache.gora.benchmark.generated\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field0\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field1\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field2\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field3\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field4\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field5\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field6\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field7\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field8\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field9\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field10\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field11\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field12\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field13\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field14\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field15\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field16\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field17\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field18\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field19\",\"type\":\"string\",\"default\":\"null\"}]}");

    USER_ID(0, "userId"), FIELD0(1, "field0"), FIELD1(2, "field1"), FIELD2(3, "field2"), FIELD3(4, "field3"), FIELD4(5,
        "field4"), FIELD5(6, "field5"), FIELD6(7, "field6"), FIELD7(8, "field7"), FIELD8(9,
            "field8"), FIELD9(10, "field9"), FIELD10(11, "field10"), FIELD11(12, "field11"), FIELD12(13,
                "field12"), FIELD13(14, "field13"), FIELD14(15, "field14"), FIELD15(16, "field15"), FIELD16(17,
                    "field16"), FIELD17(18, "field17"), FIELD18(19, "field18"), FIELD19(20, "field19"),;
     * 
     * @param index
     *          field's index.
     * @param name
     *          field's name.
    Field(int index, String name) {
      this.index = index;
      this.name = name;
    }
     * 
    public int getIndex() {
      return index;
    }
     * 
    public String getName() {
      return name;
    }
     * 
    public String toString() {
      return name;
    }
  public static final String[] _ALL_FIELDS = { "userId", "field0", "field1", "field2", "field3", "field4", "field5",
      "field6", "field7", "field8", "field9", "field10", "field11", "field12", "field13", "field14", "field15",
      "field16", "field17", "field18", "field19", };
   * 

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter. Applications should not call.
    case 0:
      return userId;
    case 1:
      return field0;
    case 2:
      return field1;
    case 3:
      return field2;
    case 4:
      return field3;
    case 5:
      return field4;
    case 6:
      return field5;
    case 7:
      return field6;
    case 8:
      return field7;
    case 9:
      return field8;
    case 10:
      return field9;
    case 11:
      return field10;
    case 12:
      return field11;
    case 13:
      return field12;
    case 14:
      return field13;
    case 15:
      return field14;
    case 16:
      return field15;
    case 17:
      return field16;
    case 18:
      return field17;
    case 19:
      return field18;
    case 20:
      return field19;
    default:
      throw new org.apache.avro.AvroRuntimeException("Bad index");

  // Used by DatumReader. Applications should not call.
  @SuppressWarnings(value = "unchecked")
    case 0:
      userId = (java.lang.CharSequence) (value);
      break;
    case 1:
      field0 = (java.lang.CharSequence) (value);
      break;
    case 2:
      field1 = (java.lang.CharSequence) (value);
      break;
    case 3:
      field2 = (java.lang.CharSequence) (value);
      break;
    case 4:
      field3 = (java.lang.CharSequence) (value);
      break;
    case 5:
      field4 = (java.lang.CharSequence) (value);
      break;
    case 6:
      field5 = (java.lang.CharSequence) (value);
      break;
    case 7:
      field6 = (java.lang.CharSequence) (value);
      break;
    case 8:
      field7 = (java.lang.CharSequence) (value);
      break;
    case 9:
      field8 = (java.lang.CharSequence) (value);
      break;
    case 10:
      field9 = (java.lang.CharSequence) (value);
      break;
    case 11:
      field10 = (java.lang.CharSequence) (value);
      break;
    case 12:
      field11 = (java.lang.CharSequence) (value);
      break;
    case 13:
      field12 = (java.lang.CharSequence) (value);
      break;
    case 14:
      field13 = (java.lang.CharSequence) (value);
      break;
    case 15:
      field14 = (java.lang.CharSequence) (value);
      break;
    case 16:
      field15 = (java.lang.CharSequence) (value);
      break;
    case 17:
      field16 = (java.lang.CharSequence) (value);
      break;
    case 18:
      field17 = (java.lang.CharSequence) (value);
      break;
    case 19:
      field18 = (java.lang.CharSequence) (value);
      break;
    case 20:
      field19 = (java.lang.CharSequence) (value);
      break;
    default:
      throw new org.apache.avro.AvroRuntimeException("Bad index");
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'userId' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field0' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field1' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field2' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field3' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field4' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field5' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field6' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field7' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field8' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field9' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field10' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field11' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field12' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field13' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field14' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field15' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field16' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field17' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field18' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.
   * 
   * @param value
   *          the value to set.

   * Checks the dirty status of the 'field19' field. A field is dirty if it
   * represents a change that has not yet been written to the database.
   * 
   * @param value
   *          the value to set.

  public static org.apache.gora.benchmark.generated.User.Builder newBuilder(
      org.apache.gora.benchmark.generated.User.Builder other) {

  public static org.apache.gora.benchmark.generated.User.Builder newBuilder(
      org.apache.gora.benchmark.generated.User other) {


  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(java.nio.ByteBuffer input) {

      implements org.apache.avro.data.RecordBuilder<User> {


      super(org.apache.gora.benchmark.generated.User.SCHEMA$);

      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




      return this;




  public User.Tombstone getTombstone() {
    return TOMBSTONE;
  public User newInstance() {


    private Tombstone() {
    }

    /**
     * Gets the value of the 'userId' field.
     */
    public java.lang.CharSequence getUserId() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'userId' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setUserId(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'userId' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isUserIdDirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field0' field.
     */
    public java.lang.CharSequence getField0() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field0' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField0(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field0' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField0Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field1' field.
     */
    public java.lang.CharSequence getField1() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field1' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField1(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field1' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField1Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field2' field.
     */
    public java.lang.CharSequence getField2() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field2' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField2(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field2' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField2Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field3' field.
     */
    public java.lang.CharSequence getField3() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field3' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField3(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field3' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField3Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field4' field.
     */
    public java.lang.CharSequence getField4() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field4' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField4(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field4' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField4Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field5' field.
     */
    public java.lang.CharSequence getField5() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field5' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField5(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field5' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField5Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field6' field.
     */
    public java.lang.CharSequence getField6() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field6' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField6(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field6' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField6Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field7' field.
     */
    public java.lang.CharSequence getField7() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field7' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField7(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field7' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField7Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field8' field.
     */
    public java.lang.CharSequence getField8() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field8' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField8(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field8' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField8Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field9' field.
     */
    public java.lang.CharSequence getField9() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field9' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField9(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field9' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField9Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field10' field.
     */
    public java.lang.CharSequence getField10() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field10' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField10(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field10' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField10Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field11' field.
     */
    public java.lang.CharSequence getField11() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field11' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField11(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field11' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField11Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field12' field.
     */
    public java.lang.CharSequence getField12() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field12' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField12(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field12' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField12Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field13' field.
     */
    public java.lang.CharSequence getField13() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field13' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField13(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field13' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField13Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field14' field.
     */
    public java.lang.CharSequence getField14() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field14' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField14(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field14' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField14Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field15' field.
     */
    public java.lang.CharSequence getField15() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field15' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField15(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field15' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField15Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field16' field.
     */
    public java.lang.CharSequence getField16() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field16' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField16(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field16' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField16Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field17' field.
     */
    public java.lang.CharSequence getField17() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field17' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField17(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field17' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField17Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field18' field.
     */
    public java.lang.CharSequence getField18() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field18' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField18(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field18' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField18Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    /**
     * Gets the value of the 'field19' field.
     */
    public java.lang.CharSequence getField19() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field19' field.
     * 
     * @param value
     *          the value to set.
     */
    public void setField19(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }

    /**
     * Checks the dirty status of the 'field19' field. A field is dirty if it
     * represents a change that has not yet been written to the database.
     * 
     * @param value
     *          the value to set.
     */
    public boolean isField19Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

  private static final org.apache.avro.io.DatumWriter DATUM_WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(
      SCHEMA$);
  private static final org.apache.avro.io.DatumReader DATUM_READER$ = new org.apache.avro.specific.SpecificDatumReader(
      SCHEMA$);
   * Writes AVRO data bean to output stream in the form of AVRO Binary encoding
   * format. This will transform AVRO data bean from its Java object form to it
   * s serializable form.
   * @param out
   *          java.io.ObjectOutput output stream to write data bean in
   *          serializable form
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    DATUM_WRITER$.write(this,
        org.apache.avro.io.EncoderFactory.get().directBinaryEncoder((java.io.OutputStream) out, null));
   * Reads AVRO data bean from input stream in it s AVRO Binary encoding format
   * to Java object format. This will transform AVRO data bean from it s
   * serializable form to deserialized Java object form.
   * @param in
   *          java.io.ObjectOutput input stream to read data bean in
   *          serializable form
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    DATUM_READER$.read(this,
        org.apache.avro.io.DecoderFactory.get().directBinaryDecoder((java.io.InputStream) in, null));
}
