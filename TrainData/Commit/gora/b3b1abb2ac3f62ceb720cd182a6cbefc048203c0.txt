import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.apache.spark.api.java.function.PairFunction;
import scala.Tuple2;
   * This method would flattened WebPage data and return an Iterable list of
   * words. The map Function would use this as an input.
  private static Function<WebPage, Iterable<String>> flatMapFun = new Function<WebPage, Iterable<String>>() {
    private static final long serialVersionUID = 1L;
    
    @Override
    public Iterable<String> call(WebPage page) throws Exception {
      String content = "";
      if (page.getContent() != null)
        content = new String(page.getContent().array(), Charset.defaultCharset());
      return Arrays.asList(content.split(" "));
    }
  };

  /**
   * Map function used to map out each word with a count of 1
   */
  private static Function<String, Tuple2<String, Long>> mapFunc = new Function<String, Tuple2<String, Long>>() {
    @Override
    public Tuple2<String, Long> call(String s) throws Exception {
      return new Tuple2<>(s, 1L);
    }
  /**
   * Convert the key value pair <String, Long> to <String, TokenDatum> as per
   * the specification in the mapping file
   */
  private static PairFunction<Tuple2<String, Long>, String, TokenDatum> metricFunc = new PairFunction<Tuple2<String, Long>, String, TokenDatum>() {
    @Override
    public Tuple2<String, TokenDatum> call(Tuple2<String, Long> line) throws Exception {
      String word = line._1();
      TokenDatum tDatum = new TokenDatum();
      tDatum.setCount(line._2.intValue());
      return new Tuple2<>(word, tDatum);
    }
  };
  public int wordCount(DataStore<String, WebPage> inStore, DataStore<String, TokenDatum> outStore) throws IOException {
    // Spark engine initialization
    GoraSparkEngine<String, WebPage> goraSparkEngine = new GoraSparkEngine<>(String.class, WebPage.class);

    SparkConf sparkConf = new SparkConf().setAppName("Gora Spark Word Count Application").setMaster("local");
    JavaPairRDD<String, String> goraRDDFlatenned = goraRDD.flatMapValues(flatMapFun);

    JavaRDD<Tuple2<String, Long>> mappedGoraRdd = goraRDDFlatenned.values().map(mapFunc);
    JavaPairRDD<String, TokenDatum> reducedGoraRdd = JavaPairRDD.fromJavaRDD(mappedGoraRdd).reduceByKey(redFunc)
        .mapToPair(metricFunc);
    // Print output for debug purpose
    Map<String, TokenDatum> tokenDatumMap = reducedGoraRdd.collectAsMap();
    // write output to datastore
    log.info(reducedGoraRdd.collect().toString());
    DataStore<String, WebPage> inStore;
    if (args.length > 0) {
      if (args.length > 1) {
      outStore = DataStoreFactory.getDataStore(dataStoreClass, String.class, TokenDatum.class, hadoopConf);
    } else {
      inStore = DataStoreFactory.getDataStore(String.class, WebPage.class, hadoopConf);
      outStore = DataStoreFactory.getDataStore(String.class, TokenDatum.class, hadoopConf);
    }
    return wordCount(inStore, outStore);
    } catch (Exception ex) {
