    String solrJServerType = ((solrJServerImpl == null || solrJServerImpl.equals("")) ? "http" : solrJServerImpl);
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        this.adminServer = new HttpSolrClient.Builder(SolrClientUrl)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
        this.server = new HttpSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
      } else {
        this.adminServer = new HttpSolrClient.Builder(SolrClientUrl)
                .build();
        this.server = new HttpSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .build();
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        List<String> adminSolrUrls = new ArrayList();
        adminSolrUrls.add(SolrClientUrl);
        this.adminServer = new CloudSolrClient.Builder(adminSolrUrls)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
        List<String> serverSolrUrls = new ArrayList();
        serverSolrUrls.add(SolrClientUrl  "/"  mapping.getCoreName());
        this.server = new CloudSolrClient.Builder(serverSolrUrls)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
      } else {
        List<String> adminSolrUrls = new ArrayList();
        adminSolrUrls.add(SolrClientUrl);
        this.adminServer = new CloudSolrClient.Builder(adminSolrUrls)
                .build();
        List<String> serverSolrUrls = new ArrayList();
        serverSolrUrls.add(SolrClientUrl  "/"  mapping.getCoreName());
        this.server = new CloudSolrClient.Builder(serverSolrUrls)
                .build();
      if (serverUserAuth) {
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        this.adminServer = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl)
                .withHttpClient(HttpClientUtil.createClient(params))
                .withQueueSize(1000)
                .withThreadCount(10)
                .build();
        this.server = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .withHttpClient(HttpClientUtil.createClient(params))
                .withQueueSize(1000)
                .withThreadCount(10)
                .build();
      } else {
        this.adminServer = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl)
                .withQueueSize(1000)
                .withThreadCount(10)
                .build();
        this.server = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .withQueueSize(1000)
                .withThreadCount(10)
                .build();
      }
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        String[] solrUrlElements = StringUtils.split(SolrClientUrl);
        this.adminServer = new LBHttpSolrClient.Builder()
                .withBaseSolrUrls(solrUrlElements)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
        if (solrUrlElements.length > 1) {
          for (int counter = 0; counter < solrUrlElements.length; counter) {
            solrUrlElements[counter] = solrUrlElements[counter]  "/"  mapping.getCoreName();
          }
        }
        this.server = new LBHttpSolrClient.Builder()
                .withHttpClient(HttpClientUtil.createClient(params))
                .withBaseSolrUrls(solrUrlElements)
                .build();
      } else {
        String[] solrUrlElements = StringUtils.split(SolrClientUrl);
        this.adminServer = new LBHttpSolrClient.Builder()
                .withBaseSolrUrls(solrUrlElements)
                .build();
        if (solrUrlElements.length > 1) {
          for (int counter = 0; counter < solrUrlElements.length; counter) {
            solrUrlElements[counter] = solrUrlElements[counter]  "/"  mapping.getCoreName();
          }
        }
        this.server = new LBHttpSolrClient.Builder()
                .withBaseSolrUrls(solrUrlElements)
                .build();
