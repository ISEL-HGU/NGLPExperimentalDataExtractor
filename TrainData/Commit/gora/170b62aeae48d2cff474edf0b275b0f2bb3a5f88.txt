import com.aerospike.client.policy.CommitLevel;
import com.aerospike.client.policy.Priority;
import com.aerospike.client.policy.ConsistencyLevel;
import com.aerospike.client.policy.Replica;

          // Write Policies
          if (policy.equals(AerospikePolicyConst.WRITE_POLICY_NAME)) {
            if (policyElement.getAttributeValue(AerospikePolicyConst.GENERATION_POLICY_NAME)
                    != null) {
                      policyElement.getAttributeValue(AerospikePolicyConst.GENERATION_POLICY_NAME));
            if (policyElement.getAttributeValue(AerospikePolicyConst.RECORD_EXISTS_ACTION_NAME)
                    != null) {
              writePolicy.recordExistsAction = getRecordExistsAction(policyElement
                      .getAttributeValue(AerospikePolicyConst.RECORD_EXISTS_ACTION_NAME));
            if (policyElement.getAttributeValue(AerospikePolicyConst.COMMIT_LEVEL_NAME) != null) {
              writePolicy.commitLevel = getCommitLevel(
                      policyElement.getAttributeValue(AerospikePolicyConst.COMMIT_LEVEL_NAME));
            if (policyElement.getAttributeValue(AerospikePolicyConst.DURABLE_DELETE_NAME) != null) {
              writePolicy.durableDelete = isDurableDelete(
                      policyElement.getAttributeValue(AerospikePolicyConst.DURABLE_DELETE_NAME));
            }
            if (policyElement.getAttributeValue(AerospikePolicyConst.EXPIRATION_NAME) != null) {
              writePolicy.expiration = getTimeDuration(
                      policyElement.getAttributeValue(AerospikePolicyConst.EXPIRATION_NAME));
          }

          // Read Policies
          else if (policy.equals(AerospikePolicyConst.READ_POLICY_NAME)) {

            if (policyElement.getAttributeValue(AerospikePolicyConst.PRIORITY_NAME) != null) {
              readPolicy.priority = getPriority(
                      policyElement.getAttributeValue(AerospikePolicyConst.PRIORITY_NAME));
            if (policyElement.getAttributeValue(AerospikePolicyConst.CONSISTENCY_LEVEL_NAME)
                    != null) {
              readPolicy.consistencyLevel = getConsistencyLevel(
                      policyElement.getAttributeValue(AerospikePolicyConst.CONSISTENCY_LEVEL_NAME));
            }
            if (policyElement.getAttributeValue(AerospikePolicyConst.REPLICA_POLICY_NAME) != null) {
              readPolicy.replica = getReplicaPolicy(
                      policyElement.getAttributeValue(AerospikePolicyConst.REPLICA_POLICY_NAME));
            }
            if (policyElement.getAttributeValue(AerospikePolicyConst.SOCKET_TIMEOUT_NAME) != null) {
              readPolicy.socketTimeout = getTimeDuration(
                      policyElement.getAttributeValue(AerospikePolicyConst.SOCKET_TIMEOUT_NAME));
            }
            if (policyElement.getAttributeValue(AerospikePolicyConst.TOTAL_TIMEOUT_NAME) != null) {
              readPolicy.totalTimeout = getTimeDuration(
                      policyElement.getAttributeValue(AerospikePolicyConst.TOTAL_TIMEOUT_NAME));
            }
            if (policyElement.getAttributeValue(AerospikePolicyConst.TIMEOUT_DELAY_NAME) != null) {
              readPolicy.timeoutDelay = getTimeDuration(
                      policyElement.getAttributeValue(AerospikePolicyConst.TIMEOUT_DELAY_NAME));
            }
            if (policyElement.getAttributeValue(AerospikePolicyConst.MAX_RETRIES_NAME) != null) {
              readPolicy.maxRetries = getMaxRetriesValue(
                      policyElement.getAttributeValue(AerospikePolicyConst.MAX_RETRIES_NAME));
    for (GenerationPolicy generationPolicyEnum : GenerationPolicy.values()) {
      if (genPolicy.equalsIgnoreCase(generationPolicyEnum.toString())) {
        return generationPolicyEnum;
    LOG.warn("Invalid generation policy provided, using the default generation policy.");
    return GenerationPolicy.NONE;
   * Returns the corresponding record exist action from the user specified exists policy name.
   * The default value is UPDATE
    for (RecordExistsAction recordExistsActionEnum : RecordExistsAction.values()) {
      if (existsPolicy.equalsIgnoreCase(recordExistsActionEnum.toString())) {
        return recordExistsActionEnum;
    LOG.warn("Invalid record exists action provided, using the default record exists action.");
    return RecordExistsAction.UPDATE;
   * Returns the corresponding commit level from the user specified commit level name.
   * The default value is COMMIT_ALL
   * @param commitLevel user specified commit level name
   * @return corresponding commit level
  private CommitLevel getCommitLevel(String commitLevel) {
    if (commitLevel == null)
      return CommitLevel.COMMIT_ALL;
    for (CommitLevel commitLevelEnum : CommitLevel.values()) {
      if (commitLevel.equalsIgnoreCase(commitLevelEnum.toString())) {
        return commitLevelEnum;
      }
    }
    LOG.warn("Invalid commit level provided, using the default commit level.");
    return CommitLevel.COMMIT_ALL;
  }

  /**
   * Returns the corresponding durable delete boolean from the user specified durable delete value.
   * The default value is FALSE
   *
   * @param durableDelete user specified durable delete value
   * @return corresponding durable delete boolean value
   */
  private boolean isDurableDelete(String durableDelete) {
    if (durableDelete == null)
    if (durableDelete.equalsIgnoreCase("false")) {
      return false;
    if (durableDelete.equalsIgnoreCase("true")) {
      return true;
    }
    LOG.warn("Invalid durable delete value provided, using the default durable delete value.");
    return false;
   * Returns the corresponding priority level from the user specified priority level name.
   * The default value is DEFAULT
   * @param priority user specified priority level name
   * @return corresponding priority level
  private Priority getPriority(String priority) {
    if (priority == null)
      return Priority.DEFAULT;
    for (Priority priorityEnum : Priority.values()) {
      if (priority.equalsIgnoreCase(priorityEnum.toString())) {
        return priorityEnum;
      }
    }
    LOG.warn("Invalid priority level provided, using the default priority level.");
    return Priority.DEFAULT;
  }

  /**
   * Returns the corresponding consistency level from the user specified consistency level name.
   * The default value is CONSISTENCY_ONE
   *
   * @param consistencyLevel user specified consistency level name
   * @return corresponding consistency level
   */
  private ConsistencyLevel getConsistencyLevel(String consistencyLevel) {
    if (consistencyLevel == null)
      return ConsistencyLevel.CONSISTENCY_ONE;

    for (ConsistencyLevel consistencyLevelEnum : ConsistencyLevel.values()) {
      if (consistencyLevel.equalsIgnoreCase(consistencyLevelEnum.toString())) {
        return consistencyLevelEnum;
      }
    }
    LOG.warn("Invalid consistency level provided, using the default consistency level.");
    return ConsistencyLevel.CONSISTENCY_ONE;
  }

  /**
   * Returns the corresponding replica policy from the user specified replica policy name.
   * The default value is SEQUENCE
   *
   * @param replica user specified replica policy name
   * @return corresponding replica policy
   */
  private Replica getReplicaPolicy(String replica) {
    if (replica == null)
      return Replica.SEQUENCE;

    for (Replica replicaEnum : Replica.values()) {
      if (replica.equalsIgnoreCase(replicaEnum.toString())) {
        return replicaEnum;
      }
    }
    LOG.warn("Invalid replica policy provided, using the default replica policy.");
    return Replica.SEQUENCE;
  }

  /**
   * Returns the corresponding timeDuration value from the user specified timeDuration value.
   * The default value is 0
   *
   * @param timeDuration user specified timeDuration value
   * @return corresponding timeDuration value
   */
  private int getTimeDuration(String timeDuration) {

    if (timeDuration == null) {
    int timeDurationInt = 0;
      timeDurationInt = Integer.valueOf(timeDuration);
    } catch (NumberFormatException e) {
      LOG.warn("Invalid time duration value provided, using the default time duration value");
    }
    return timeDurationInt;
  }

  /**
   * Returns the maximum retires value from the user specified maximum retires value.
   * The default value is 2
   *
   * @param retiesCount user specified retries count
   * @return corresponding maximum retry value
   */
  private int getMaxRetriesValue(String retiesCount) {

    // Default value
    int maxRetriesInt = 2;
    if (retiesCount == null) {
      return maxRetriesInt;
    }
    try {
      maxRetriesInt = Integer.valueOf(retiesCount);
    return maxRetriesInt;
