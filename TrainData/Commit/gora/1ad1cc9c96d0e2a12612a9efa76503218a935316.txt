 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
import com.aerospike.client.policy.ClientPolicy;

 * @param <K> class to be used for the key
 * @param <T> class to be persisted within the store
public class AerospikeStore<K, T extends PersistentBase> extends DataStoreBase<K, T> {
  private static final String PARSE_MAPPING_FILE_KEY = "gora.aerospike.mapping.file";
  private static final String DEFAULT_MAPPING_FILE = "gora-aerospike-mapping.xml";

  private AerospikeParameters aerospikeParameters;
    super.initialize(keyClass, persistentClass, properties);

    try {
      AerospikeMappingBuilder aerospikeMappingBuilder = new AerospikeMappingBuilder(getConf().get
        (PARSE_MAPPING_FILE_KEY, DEFAULT_MAPPING_FILE), keyClass,
        persistentClass);
      aerospikeParameters = new AerospikeParameters(aerospikeMappingBuilder.getAerospikeMapping(), properties);
      ClientPolicy policy = new ClientPolicy();
      policy.writePolicyDefault = aerospikeParameters.getAerospikeMapping().getWritePolicy();
      policy.readPolicyDefault = aerospikeParameters.getAerospikeMapping().getReadPolicy();
      aerospikeClient = new AerospikeClient(aerospikeParameters.getHost(), aerospikeParameters.getPort());
      aerospikeParameters.setServerSpecificParameters(aerospikeClient);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    return null;
  public void put(K key, T value) {

  public long deleteByQuery(Query<K, T> query) {
  public Result<K, T> execute(Query<K, T> query) {
  public Query<K, T> newQuery() {
  public List<PartitionQuery<K, T>> getPartitions(Query<K, T> query) throws IOException {
