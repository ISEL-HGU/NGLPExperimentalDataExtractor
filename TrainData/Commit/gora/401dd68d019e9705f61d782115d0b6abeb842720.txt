import java.nio.ByteBuffer;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.gora.util.AvroUtils;
import org.apache.avro.Schema;
import org.apache.avro.specific.SpecificDatumReader;
import org.apache.avro.specific.SpecificDatumWriter;
import org.apache.avro.util.Utf8;
import org.apache.gora.kudu.utils.KuduClientUtils;
import org.apache.gora.persistency.Persistent;
import org.apache.gora.util.IOUtils;
import org.apache.kudu.client.Delete;
import org.apache.kudu.client.Insert;
import org.apache.kudu.client.OperationResponse;
import org.apache.kudu.client.RowResult;
import org.apache.kudu.client.RowResultIterator;
  private static final ConcurrentHashMap<Schema, SpecificDatumReader<?>> readerMap = new ConcurrentHashMap<>();
  private static final ConcurrentHashMap<Schema, SpecificDatumWriter<?>> writerMap = new ConcurrentHashMap<>();

        mappingStream = org.apache.commons.io.IOUtils.toInputStream(properties.getProperty(XML_MAPPING_DEFINITION), (Charset) null);
      } else {
        table = client.openTable(kuduMapping.getTableName());
      org.apache.kudu.Schema sch = new org.apache.kudu.Schema(columns);
      table = client.createTable(kuduMapping.getTableName(), sch, cto);
      table = null;
    try {
      ColumnSchema column = table.getSchema().getColumn(kuduMapping.getPrimaryKey().get(0).getName());
      KuduScanner.KuduScannerBuilder scannerBuilder = client.newScannerBuilder(table);
      scannerBuilder.limit(1);
      scannerBuilder.setProjectedColumnIndexes(new ArrayList<>());
      scannerBuilder.addPredicate(KuduClientUtils.createEqualPredicate(column, key));
      KuduScanner build = scannerBuilder.build();
      boolean hasMoreRows = build.hasMoreRows();
      RowResultIterator nextRows = build.nextRows();
      return hasMoreRows && nextRows.hasNext();
    } catch (Exception e) {
      throw new GoraException(e);
    String[] avFields = getFieldsToQuery(fields);
    List<String> dbFields = new ArrayList<>();
    for (String af : avFields) {
      dbFields.add(kuduMapping.getFields().get(af).getName());
    }
    try {
      ColumnSchema column = table.getSchema().getColumn(kuduMapping.getPrimaryKey().get(0).getName());
      KuduScanner.KuduScannerBuilder scannerBuilder = client.newScannerBuilder(table);
      scannerBuilder.limit(1);
      scannerBuilder.setProjectedColumnNames(dbFields);
      scannerBuilder.addPredicate(KuduClientUtils.createEqualPredicate(column, key));
      KuduScanner build = scannerBuilder.build();
      boolean data = build.hasMoreRows();
      RowResultIterator nextRows = build.nextRows();
      data = nextRows.hasNext();
      T resp = null;
      if (data) {
        RowResult next = nextRows.next();
        resp = newInstance(next, fields);
        if (nextRows.hasNext()) {
          LOG.warn("Multiple results for primary key {} in the schema {}, ignoring additional rows.", key, kuduMapping.getTableName());
        }
      }
      build.close();
      return resp;
    } catch (Exception ex) {
      throw new GoraException(ex);
    }
    try {
      if (obj.isDirty()) {
        Column pkc = kuduMapping.getPrimaryKey().get(0);
        Insert insert = table.newInsert();
        PartialRow row = insert.getRow();
        KuduClientUtils.addObjectRow(row, pkc, key);
        Schema schema = obj.getSchema();
        List<Schema.Field> fields = schema.getFields();
        for (Schema.Field field : fields) {
          Column mappedColumn = kuduMapping.getFields().get(field.name());
          Object fieldValue = obj.get(field.pos());
          if (mappedColumn != null && fieldValue != null) {
            Schema fieldSchema = field.schema();
            Object serializedObj = serializeFieldValue(fieldSchema, fieldValue);
            KuduClientUtils.addObjectRow(row, mappedColumn, serializedObj);
          }
        }
        session.apply(insert);
      } else {
        LOG.info("Ignored putting object {} in the store as it is neither "
             "new, neither dirty.", new Object[]{obj});
      }
    } catch (Exception e) {
      throw new GoraException(e);
    }
    try {
      Column pkc = kuduMapping.getPrimaryKey().get(0);
      Delete delete = table.newDelete();
      PartialRow row = delete.getRow();
      KuduClientUtils.addObjectRow(row, pkc, key);
      OperationResponse apply = session.apply(delete);
      return !apply.hasRowError();
    } catch (KuduException ex) {
      throw new GoraException(ex);
    }
  public T newInstance(RowResult next, String[] fields) throws GoraException, IOException {
    fields = getFieldsToQuery(fields);
    T persistent = newPersistent();
    for (String f : fields) {
      Schema.Field field = fieldMap.get(f);
      Schema fieldSchema = field.schema();
      Column column = kuduMapping.getFields().get(f);
      if (next.isNull(column.getName())) {
        continue;
      }
      Object fieldValue = KuduClientUtils.getObjectRow(next, column);
      Object v = deserializeFieldValue(field, fieldSchema, fieldValue, persistent);
      persistent.put(field.pos(), v);
      persistent.setDirty(field.pos());
    }
    return persistent;
  }

  @SuppressWarnings("unchecked")
  private Object deserializeFieldValue(Schema.Field field, Schema fieldSchema,
      Object igniteValue, T persistent) throws IOException {
    Object fieldValue = null;
    switch (fieldSchema.getType()) {
      case MAP:
      case ARRAY:
      case RECORD:
        @SuppressWarnings("rawtypes") SpecificDatumReader reader = getDatumReader(fieldSchema);
        fieldValue = IOUtils.deserialize((byte[]) igniteValue, reader,
            persistent.get(field.pos()));
        break;
      case ENUM:
        fieldValue = AvroUtils.getEnumValue(fieldSchema, igniteValue.toString());
        break;
      case FIXED:
        break;
      case BYTES:
        fieldValue = ByteBuffer.wrap((byte[]) igniteValue);
        break;
      case STRING:
        fieldValue = new Utf8(igniteValue.toString());
        break;
      case UNION:
        if (fieldSchema.getTypes().size() == 2 && isNullable(fieldSchema)) {
          int schemaPos = getUnionSchema(igniteValue, fieldSchema);
          Schema unionSchema = fieldSchema.getTypes().get(schemaPos);
          fieldValue = deserializeFieldValue(field, unionSchema, igniteValue, persistent);
        } else {
          reader = getDatumReader(fieldSchema);
          fieldValue = IOUtils.deserialize((byte[]) igniteValue, reader,
              persistent.get(field.pos()));
        }
        break;
      default:
        fieldValue = igniteValue;
    }
    return fieldValue;
  }

  @SuppressWarnings("unchecked")
  private Object serializeFieldValue(Schema fieldSchema, Object fieldValue) {
    Object output = fieldValue;
    switch (fieldSchema.getType()) {
      case ARRAY:
      case MAP:
      case RECORD:
        byte[] data = null;
        try {
          @SuppressWarnings("rawtypes")
          SpecificDatumWriter writer = getDatumWriter(fieldSchema);
          data = IOUtils.serialize(writer, fieldValue);
        } catch (IOException e) {
          LOG.error(e.getMessage(), e);
        }
        output = data;
        break;
      case UNION:
        if (fieldSchema.getTypes().size() == 2 && isNullable(fieldSchema)) {
          int schemaPos = getUnionSchema(fieldValue, fieldSchema);
          Schema unionSchema = fieldSchema.getTypes().get(schemaPos);
          output = serializeFieldValue(unionSchema, fieldValue);
        } else {
          data = null;
          try {
            @SuppressWarnings("rawtypes")
            SpecificDatumWriter writer = getDatumWriter(fieldSchema);
            data = IOUtils.serialize(writer, fieldValue);
          } catch (IOException e) {
            LOG.error(e.getMessage(), e);
          }
          output = data;
        }
        break;
      case FIXED:
        break;
      case ENUM:
      case STRING:
        output = fieldValue.toString();
        break;
      case BYTES:
        output = ((ByteBuffer) fieldValue).array();
        break;
      case INT:
      case LONG:
      case FLOAT:
      case DOUBLE:
      case BOOLEAN:
        output = fieldValue;
        break;
      case NULL:
        break;
      default:
        throw new AssertionError(fieldSchema.getType().name());
    }
    return output;
  }

  /**
   * Method to retrieve the corresponding schema type index of a particular
   * object having UNION schema. As UNION type can have one or more types and at
   * a given instance, it holds an object of only one type of the defined types,
   * this method is used to figure out the corresponding instance's schema type
   * index.
   *
   * @param instanceValue value that the object holds
   * @param unionSchema union schema containing all of the data types
   * @return the unionSchemaPosition corresponding schema position
   */
  private int getUnionSchema(Object instanceValue, Schema unionSchema) {
    int unionSchemaPos = 0;
    for (Schema currentSchema : unionSchema.getTypes()) {
      Schema.Type schemaType = currentSchema.getType();
      if (instanceValue instanceof CharSequence && schemaType.equals(Schema.Type.STRING)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof ByteBuffer && schemaType.equals(Schema.Type.BYTES)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof byte[] && schemaType.equals(Schema.Type.BYTES)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof Integer && schemaType.equals(Schema.Type.INT)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof Long && schemaType.equals(Schema.Type.LONG)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof Double && schemaType.equals(Schema.Type.DOUBLE)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof Float && schemaType.equals(Schema.Type.FLOAT)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof Boolean && schemaType.equals(Schema.Type.BOOLEAN)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof Map && schemaType.equals(Schema.Type.MAP)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof List && schemaType.equals(Schema.Type.ARRAY)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof Persistent && schemaType.equals(Schema.Type.RECORD)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof byte[] && schemaType.equals(Schema.Type.MAP)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof byte[] && schemaType.equals(Schema.Type.RECORD)) {
        return unionSchemaPos;
      }
      if (instanceValue instanceof byte[] && schemaType.equals(Schema.Type.ARRAY)) {
        return unionSchemaPos;
      }
      unionSchemaPos;
    }
    return 0;
  }

  @SuppressWarnings("rawtypes")
  private SpecificDatumReader getDatumReader(Schema fieldSchema) {
    SpecificDatumReader<?> reader = readerMap.get(fieldSchema);
    if (reader == null) {
      reader = new SpecificDatumReader(fieldSchema);// ignore dirty bits
      SpecificDatumReader localReader = null;
      if ((localReader = readerMap.putIfAbsent(fieldSchema, reader)) != null) {
        reader = localReader;
      }
    }
    return reader;
  }

  @SuppressWarnings("rawtypes")
  private SpecificDatumWriter getDatumWriter(Schema fieldSchema) {
    SpecificDatumWriter writer = writerMap.get(fieldSchema);
    if (writer == null) {
      writer = new SpecificDatumWriter(fieldSchema);// ignore dirty bits
      writerMap.put(fieldSchema, writer);
    }
    return writer;
  }

  private boolean isNullable(Schema unionSchema) {
    for (Schema innerSchema : unionSchema.getTypes()) {
      if (innerSchema.getType().equals(Schema.Type.NULL)) {
        return true;
      }
    }
    return false;
  }
