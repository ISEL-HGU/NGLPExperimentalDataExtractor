  protected static final int DEFAULT_SOLR_CONCURRENT_CLIENT_QUEUE_SIZE = 1000;

  protected static final int DEFAULT_SOLR_CONCURRENT_CLIENT_THREAD_COUNT = 10;

  protected static final String SOLR_CONCURRENT_CLIENT_QUEUE_SIZE_PROPERTY
          = "solr.concurrentclient.queue_size";

  protected static final String SOLR_CONCURRENT_CLIENT_THREAD_COUNT_PROPERTY
          = "solr.concurrentclient.thread_count";

  private int queueSize = DEFAULT_SOLR_CONCURRENT_CLIENT_QUEUE_SIZE;

  private int threadCount = DEFAULT_SOLR_CONCURRENT_CLIENT_THREAD_COUNT;


    String queueSizeString = DataStoreFactory.findProperty(properties, this,
            SOLR_CONCURRENT_CLIENT_QUEUE_SIZE_PROPERTY, null);
    if (queueSizeString != null) {
      try {
        queueSize = Integer.parseInt(queueSizeString);
      } catch (NumberFormatException nfe) {
        LOG.warn("Invalid concurrent client queue size '{}' , using default {}", queueSizeString,
                DEFAULT_SOLR_CONCURRENT_CLIENT_QUEUE_SIZE);
      }
    }

    String threadCountString = DataStoreFactory.findProperty(properties, this,
            SOLR_CONCURRENT_CLIENT_THREAD_COUNT_PROPERTY, null);
    if (threadCountString != null) {
      try {
        threadCount = Integer.parseInt(threadCountString);
      } catch (NumberFormatException nfe) {
        LOG.warn("Invalid concurrent client thread count '{}' , using default {}", threadCountString,
                DEFAULT_SOLR_CONCURRENT_CLIENT_THREAD_COUNT);
      }
    }

    String solrJServerType = ((solrJServerImpl == null || solrJServerImpl.equals("")) ? "http" : solrJServerImpl);
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        this.adminServer = new HttpSolrClient.Builder(SolrClientUrl)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
        this.server = new HttpSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
      } else {
        this.adminServer = new HttpSolrClient.Builder(SolrClientUrl)
                .build();
        this.server = new HttpSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .build();
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        List<String> adminSolrUrls = new ArrayList();
        adminSolrUrls.add(SolrClientUrl);
        this.adminServer = new CloudSolrClient.Builder(adminSolrUrls)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
        List<String> serverSolrUrls = new ArrayList();
        serverSolrUrls.add(SolrClientUrl  "/"  mapping.getCoreName());
        this.server = new CloudSolrClient.Builder(serverSolrUrls)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
      } else {
        List<String> adminSolrUrls = new ArrayList();
        adminSolrUrls.add(SolrClientUrl);
        this.adminServer = new CloudSolrClient.Builder(adminSolrUrls)
                .build();
        List<String> serverSolrUrls = new ArrayList();
        serverSolrUrls.add(SolrClientUrl  "/"  mapping.getCoreName());
        this.server = new CloudSolrClient.Builder(serverSolrUrls)
                .build();
      if (serverUserAuth) {
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        this.adminServer = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl)
                .withHttpClient(HttpClientUtil.createClient(params))
                .withQueueSize(queueSize)
                .withThreadCount(threadCount)
                .build();
        this.server = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .withHttpClient(HttpClientUtil.createClient(params))
                .withQueueSize(queueSize)
                .withThreadCount(threadCount)
                .build();
      } else {
        this.adminServer = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl)
                .withQueueSize(queueSize)
                .withThreadCount(threadCount)
                .build();
        this.server = new ConcurrentUpdateSolrClient.Builder(SolrClientUrl  "/"  mapping.getCoreName())
                .withQueueSize(queueSize)
                .withThreadCount(threadCount)
                .build();
      }
        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("httpBasicAuthUser", serverUsername);
        params.set("httpBasicAuthPassword", serverPassword);
        String[] solrUrlElements = StringUtils.split(SolrClientUrl);
        this.adminServer = new LBHttpSolrClient.Builder()
                .withBaseSolrUrls(solrUrlElements)
                .withHttpClient(HttpClientUtil.createClient(params))
                .build();
        if (solrUrlElements.length > 0) {
          for (int counter = 0; counter < solrUrlElements.length; counter) {
            solrUrlElements[counter] = solrUrlElements[counter]  "/"  mapping.getCoreName();
          }
        }
        this.server = new LBHttpSolrClient.Builder()
                .withHttpClient(HttpClientUtil.createClient(params))
                .withBaseSolrUrls(solrUrlElements)
                .build();
      } else {
        String[] solrUrlElements = StringUtils.split(SolrClientUrl);
        this.adminServer = new LBHttpSolrClient.Builder()
                .withBaseSolrUrls(solrUrlElements)
                .build();
        if (solrUrlElements.length > 0) {
          for (int counter = 0; counter < solrUrlElements.length; counter) {
            solrUrlElements[counter] = solrUrlElements[counter]  "/"  mapping.getCoreName();
          }
        }
        this.server = new LBHttpSolrClient.Builder()
                .withBaseSolrUrls(solrUrlElements)
                .build();
