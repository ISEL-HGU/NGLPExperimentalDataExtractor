import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
    ArrayList<Column> fieldsList = Lists.newArrayList(mapping.getPrimaryKey());
    fieldsList.addAll(Lists.newArrayList(mapping.getFields().values()));
    for (Column aColumn : fieldsList) {
      sqlBuilder.append(mapping.getPrimaryKey().get(i).getName());

  public static String baseInsertStatement(IgniteMapping mapping, Map<Column, Object> data) {
    StringBuilder sqlBuilder = new StringBuilder();
    sqlBuilder.append("MERGE INTO ");
    sqlBuilder.append(mapping.getTableName());
    sqlBuilder.append(" (");
    List<Entry<Column, Object>> list = new ArrayList<>(data.entrySet());
    for (int i = 0; i < list.size(); i) {
      sqlBuilder.append(list.get(i).getKey().getName());
      sqlBuilder.append(i == list.size() - 1 ? "" : ",");
    }
    sqlBuilder.append(")");
    sqlBuilder.append(" VALUES ");
    sqlBuilder.append(" (");
    for (int i = 0; i < list.size(); i) {
      sqlBuilder.append("?");
      sqlBuilder.append(i == list.size() - 1 ? "" : ",");
    }
    sqlBuilder.append(" )");
    return sqlBuilder.toString();
  }

  public static void fillInsertStatement(PreparedStatement st, Map<Column, Object> data) throws SQLException {
    List<Entry<Column, Object>> list = new ArrayList<>(data.entrySet());
    for (int i = 0; i < list.size(); i) {
      int j = i  1;
      st.setObject(j, list.get(i).getValue());
    }
  }

  public static String delete(IgniteMapping mapping) {
    StringBuilder sqlBuilder = new StringBuilder();
    sqlBuilder.append("DELETE FROM ");
    sqlBuilder.append(mapping.getTableName());
    sqlBuilder.append(" WHERE ");
    for (int i = 0; i < mapping.getPrimaryKey().size(); i) {
      sqlBuilder.append(mapping.getPrimaryKey().get(i).getName());
      sqlBuilder.append("= ? ");
      sqlBuilder.append(i == mapping.getPrimaryKey().size() - 1 ? "" : " AND ");
    }
    return sqlBuilder.toString();
  }

  public static void fillDeleteStatement(PreparedStatement st, IgniteMapping mapping, Object... data) throws SQLException {
    assert mapping.getPrimaryKey().size() == data.length;
    for (int i = 0; i < mapping.getPrimaryKey().size(); i) {
      int j = i  1;
      st.setObject(j, data[i]);
    }
  }

  public static String selectGet(IgniteMapping mapping, List<String> fields) {
    StringBuilder sqlBuilder = new StringBuilder();
    sqlBuilder.append("SELECT ");
    for (int i = 0; i < fields.size(); i) {
      sqlBuilder.append(fields.get(i));
      sqlBuilder.append(i == fields.size() - 1 ? "" : " , ");
    }
    sqlBuilder.append(" FROM ");
    sqlBuilder.append(mapping.getTableName());
    sqlBuilder.append(" WHERE ");
    for (int i = 0; i < mapping.getPrimaryKey().size(); i) {
      sqlBuilder.append(mapping.getPrimaryKey().get(i).getName());
      sqlBuilder.append("= ? ");
      sqlBuilder.append(i == mapping.getPrimaryKey().size() - 1 ? "" : " AND ");
    }
    return sqlBuilder.toString();
  }

  public static void fillSelectStatement(PreparedStatement st, IgniteMapping mapping, Object... data) throws SQLException {
    assert mapping.getPrimaryKey().size() == data.length;
    for (int i = 0; i < mapping.getPrimaryKey().size(); i) {
      int j = i  1;
      st.setObject(j, data[i]);
    }
  }
