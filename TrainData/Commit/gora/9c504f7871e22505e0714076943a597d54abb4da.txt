import java.util.ArrayList;
import java.util.List;

        res = row.getBinaryCopy(column.getName());



  public static List<KuduPredicate> createRangePredicate(ColumnSchema column, Object startK, Object endK) {
    List<KuduPredicate> predList = new ArrayList<>();
    switch (column.getType()) {
      case INT8:
      case INT16:
      case INT32:
      case INT64:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (long) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (long) endK));
        }
        break;
      case BINARY:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (byte[]) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (byte[]) endK));
        }
        break;
      case STRING:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (String) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (String) endK));
        }
        break;
      case BOOL:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (boolean) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (boolean) endK));
        }
        break;
      case FLOAT:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (float) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (float) endK));
        }
        break;
      case DOUBLE:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (double) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (double) endK));
        }
        break;
      case UNIXTIME_MICROS:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (Timestamp) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (Timestamp) endK));
        }
        break;
      case DECIMAL:
        if (startK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.GREATER_EQUAL, (BigDecimal) startK));
        }
        if (endK != null) {
          predList.add(KuduPredicate.newComparisonPredicate(column, KuduPredicate.ComparisonOp.LESS_EQUAL, (BigDecimal) endK));
        }
        break;
      default:
        throw new AssertionError(column.getType().name());
    }
    return predList;
  }
