  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"org.apache.gora.benchmark.generated\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field0\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field1\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field2\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field3\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field4\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field5\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field6\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field7\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field8\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field9\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field10\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field11\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field12\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field13\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field14\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field15\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field16\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field17\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field18\",\"type\":\"string\",\"default\":\"null\"},{\"name\":\"field19\",\"type\":\"string\",\"default\":\"null\"}]}");
  private static final long serialVersionUID = -7912162892761759126L;
    FIELD10(11, "field10"),
    FIELD11(12, "field11"),
    FIELD12(13, "field12"),
    FIELD13(14, "field13"),
    FIELD14(15, "field14"),
    FIELD15(16, "field15"),
    FIELD16(17, "field16"),
    FIELD17(18, "field17"),
    FIELD18(19, "field18"),
    FIELD19(20, "field19"),
  "field10",
  "field11",
  "field12",
  "field13",
  "field14",
  "field15",
  "field16",
  "field17",
  "field18",
  "field19",
  private java.lang.CharSequence field10;
  private java.lang.CharSequence field11;
  private java.lang.CharSequence field12;
  private java.lang.CharSequence field13;
  private java.lang.CharSequence field14;
  private java.lang.CharSequence field15;
  private java.lang.CharSequence field16;
  private java.lang.CharSequence field17;
  private java.lang.CharSequence field18;
  private java.lang.CharSequence field19;
    case 11: return field10;
    case 12: return field11;
    case 13: return field12;
    case 14: return field13;
    case 15: return field14;
    case 16: return field15;
    case 17: return field16;
    case 18: return field17;
    case 19: return field18;
    case 20: return field19;
    case 11: field10 = (java.lang.CharSequence)(value); break;
    case 12: field11 = (java.lang.CharSequence)(value); break;
    case 13: field12 = (java.lang.CharSequence)(value); break;
    case 14: field13 = (java.lang.CharSequence)(value); break;
    case 15: field14 = (java.lang.CharSequence)(value); break;
    case 16: field15 = (java.lang.CharSequence)(value); break;
    case 17: field16 = (java.lang.CharSequence)(value); break;
    case 18: field17 = (java.lang.CharSequence)(value); break;
    case 19: field18 = (java.lang.CharSequence)(value); break;
    case 20: field19 = (java.lang.CharSequence)(value); break;
  /**
   * Gets the value of the 'field10' field.
   */
  public java.lang.CharSequence getField10() {
    return field10;
  }

  /**
   * Sets the value of the 'field10' field.
   * @param value the value to set.
   */
  public void setField10(java.lang.CharSequence value) {
    this.field10 = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'field10' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField10Dirty() {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'field11' field.
   */
  public java.lang.CharSequence getField11() {
    return field11;
  }

  /**
   * Sets the value of the 'field11' field.
   * @param value the value to set.
   */
  public void setField11(java.lang.CharSequence value) {
    this.field11 = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'field11' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField11Dirty() {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'field12' field.
   */
  public java.lang.CharSequence getField12() {
    return field12;
  }

  /**
   * Sets the value of the 'field12' field.
   * @param value the value to set.
   */
  public void setField12(java.lang.CharSequence value) {
    this.field12 = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'field12' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField12Dirty() {
    return isDirty(13);
  }

  /**
   * Gets the value of the 'field13' field.
   */
  public java.lang.CharSequence getField13() {
    return field13;
  }

  /**
   * Sets the value of the 'field13' field.
   * @param value the value to set.
   */
  public void setField13(java.lang.CharSequence value) {
    this.field13 = value;
    setDirty(14);
  }
  
  /**
   * Checks the dirty status of the 'field13' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField13Dirty() {
    return isDirty(14);
  }

  /**
   * Gets the value of the 'field14' field.
   */
  public java.lang.CharSequence getField14() {
    return field14;
  }

  /**
   * Sets the value of the 'field14' field.
   * @param value the value to set.
   */
  public void setField14(java.lang.CharSequence value) {
    this.field14 = value;
    setDirty(15);
  }
  
  /**
   * Checks the dirty status of the 'field14' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField14Dirty() {
    return isDirty(15);
  }

  /**
   * Gets the value of the 'field15' field.
   */
  public java.lang.CharSequence getField15() {
    return field15;
  }

  /**
   * Sets the value of the 'field15' field.
   * @param value the value to set.
   */
  public void setField15(java.lang.CharSequence value) {
    this.field15 = value;
    setDirty(16);
  }
  
  /**
   * Checks the dirty status of the 'field15' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField15Dirty() {
    return isDirty(16);
  }

  /**
   * Gets the value of the 'field16' field.
   */
  public java.lang.CharSequence getField16() {
    return field16;
  }

  /**
   * Sets the value of the 'field16' field.
   * @param value the value to set.
   */
  public void setField16(java.lang.CharSequence value) {
    this.field16 = value;
    setDirty(17);
  }
  
  /**
   * Checks the dirty status of the 'field16' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField16Dirty() {
    return isDirty(17);
  }

  /**
   * Gets the value of the 'field17' field.
   */
  public java.lang.CharSequence getField17() {
    return field17;
  }

  /**
   * Sets the value of the 'field17' field.
   * @param value the value to set.
   */
  public void setField17(java.lang.CharSequence value) {
    this.field17 = value;
    setDirty(18);
  }
  
  /**
   * Checks the dirty status of the 'field17' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField17Dirty() {
    return isDirty(18);
  }

  /**
   * Gets the value of the 'field18' field.
   */
  public java.lang.CharSequence getField18() {
    return field18;
  }

  /**
   * Sets the value of the 'field18' field.
   * @param value the value to set.
   */
  public void setField18(java.lang.CharSequence value) {
    this.field18 = value;
    setDirty(19);
  }
  
  /**
   * Checks the dirty status of the 'field18' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField18Dirty() {
    return isDirty(19);
  }

  /**
   * Gets the value of the 'field19' field.
   */
  public java.lang.CharSequence getField19() {
    return field19;
  }

  /**
   * Sets the value of the 'field19' field.
   * @param value the value to set.
   */
  public void setField19(java.lang.CharSequence value) {
    this.field19 = value;
    setDirty(20);
  }
  
  /**
   * Checks the dirty status of the 'field19' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isField19Dirty() {
    return isDirty(20);
  }

    private java.lang.CharSequence field10;
    private java.lang.CharSequence field11;
    private java.lang.CharSequence field12;
    private java.lang.CharSequence field13;
    private java.lang.CharSequence field14;
    private java.lang.CharSequence field15;
    private java.lang.CharSequence field16;
    private java.lang.CharSequence field17;
    private java.lang.CharSequence field18;
    private java.lang.CharSequence field19;
      if (isValidValue(fields()[11], other.field10)) {
        this.field10 = (java.lang.CharSequence) data().deepCopy(fields()[11].schema(), other.field10);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.field11)) {
        this.field11 = (java.lang.CharSequence) data().deepCopy(fields()[12].schema(), other.field11);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.field12)) {
        this.field12 = (java.lang.CharSequence) data().deepCopy(fields()[13].schema(), other.field12);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.field13)) {
        this.field13 = (java.lang.CharSequence) data().deepCopy(fields()[14].schema(), other.field13);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.field14)) {
        this.field14 = (java.lang.CharSequence) data().deepCopy(fields()[15].schema(), other.field14);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.field15)) {
        this.field15 = (java.lang.CharSequence) data().deepCopy(fields()[16].schema(), other.field15);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.field16)) {
        this.field16 = (java.lang.CharSequence) data().deepCopy(fields()[17].schema(), other.field16);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.field17)) {
        this.field17 = (java.lang.CharSequence) data().deepCopy(fields()[18].schema(), other.field17);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.field18)) {
        this.field18 = (java.lang.CharSequence) data().deepCopy(fields()[19].schema(), other.field18);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.field19)) {
        this.field19 = (java.lang.CharSequence) data().deepCopy(fields()[20].schema(), other.field19);
        fieldSetFlags()[20] = true;
      }
    /** Gets the value of the 'field10' field */
    public java.lang.CharSequence getField10() {
      return field10;
    }
    
    /** Sets the value of the 'field10' field */
    public org.apache.gora.benchmark.generated.User.Builder setField10(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.field10 = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'field10' field has been set */
    public boolean hasField10() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'field10' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField10() {
      field10 = null;
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'field11' field */
    public java.lang.CharSequence getField11() {
      return field11;
    }
    
    /** Sets the value of the 'field11' field */
    public org.apache.gora.benchmark.generated.User.Builder setField11(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.field11 = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'field11' field has been set */
    public boolean hasField11() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'field11' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField11() {
      field11 = null;
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'field12' field */
    public java.lang.CharSequence getField12() {
      return field12;
    }
    
    /** Sets the value of the 'field12' field */
    public org.apache.gora.benchmark.generated.User.Builder setField12(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.field12 = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'field12' field has been set */
    public boolean hasField12() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'field12' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField12() {
      field12 = null;
      fieldSetFlags()[13] = false;
      return this;
    }
    
    /** Gets the value of the 'field13' field */
    public java.lang.CharSequence getField13() {
      return field13;
    }
    
    /** Sets the value of the 'field13' field */
    public org.apache.gora.benchmark.generated.User.Builder setField13(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.field13 = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'field13' field has been set */
    public boolean hasField13() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'field13' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField13() {
      field13 = null;
      fieldSetFlags()[14] = false;
      return this;
    }
    
    /** Gets the value of the 'field14' field */
    public java.lang.CharSequence getField14() {
      return field14;
    }
    
    /** Sets the value of the 'field14' field */
    public org.apache.gora.benchmark.generated.User.Builder setField14(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.field14 = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'field14' field has been set */
    public boolean hasField14() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'field14' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField14() {
      field14 = null;
      fieldSetFlags()[15] = false;
      return this;
    }
    
    /** Gets the value of the 'field15' field */
    public java.lang.CharSequence getField15() {
      return field15;
    }
    
    /** Sets the value of the 'field15' field */
    public org.apache.gora.benchmark.generated.User.Builder setField15(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.field15 = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'field15' field has been set */
    public boolean hasField15() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'field15' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField15() {
      field15 = null;
      fieldSetFlags()[16] = false;
      return this;
    }
    
    /** Gets the value of the 'field16' field */
    public java.lang.CharSequence getField16() {
      return field16;
    }
    
    /** Sets the value of the 'field16' field */
    public org.apache.gora.benchmark.generated.User.Builder setField16(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.field16 = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'field16' field has been set */
    public boolean hasField16() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'field16' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField16() {
      field16 = null;
      fieldSetFlags()[17] = false;
      return this;
    }
    
    /** Gets the value of the 'field17' field */
    public java.lang.CharSequence getField17() {
      return field17;
    }
    
    /** Sets the value of the 'field17' field */
    public org.apache.gora.benchmark.generated.User.Builder setField17(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.field17 = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'field17' field has been set */
    public boolean hasField17() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'field17' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField17() {
      field17 = null;
      fieldSetFlags()[18] = false;
      return this;
    }
    
    /** Gets the value of the 'field18' field */
    public java.lang.CharSequence getField18() {
      return field18;
    }
    
    /** Sets the value of the 'field18' field */
    public org.apache.gora.benchmark.generated.User.Builder setField18(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.field18 = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'field18' field has been set */
    public boolean hasField18() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'field18' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField18() {
      field18 = null;
      fieldSetFlags()[19] = false;
      return this;
    }
    
    /** Gets the value of the 'field19' field */
    public java.lang.CharSequence getField19() {
      return field19;
    }
    
    /** Sets the value of the 'field19' field */
    public org.apache.gora.benchmark.generated.User.Builder setField19(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.field19 = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'field19' field has been set */
    public boolean hasField19() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'field19' field */
    public org.apache.gora.benchmark.generated.User.Builder clearField19() {
      field19 = null;
      fieldSetFlags()[20] = false;
      return this;
    }
    
        record.field10 = fieldSetFlags()[11] ? this.field10 : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.field11 = fieldSetFlags()[12] ? this.field11 : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.field12 = fieldSetFlags()[13] ? this.field12 : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.field13 = fieldSetFlags()[14] ? this.field13 : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.field14 = fieldSetFlags()[15] ? this.field14 : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.field15 = fieldSetFlags()[16] ? this.field15 : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.field16 = fieldSetFlags()[17] ? this.field16 : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.field17 = fieldSetFlags()[18] ? this.field17 : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.field18 = fieldSetFlags()[19] ? this.field18 : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.field19 = fieldSetFlags()[20] ? this.field19 : (java.lang.CharSequence) defaultValue(fields()[20]);
    return TOMBSTONE;
    private Tombstone() { }
      /**
     * Gets the value of the 'userId' field.
         */
    public java.lang.CharSequence getUserId() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'userId' field.
         * @param value the value to set.
     */
    public void setUserId(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'userId' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isUserIdDirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field0' field.
         */
    public java.lang.CharSequence getField0() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field0' field.
         * @param value the value to set.
     */
    public void setField0(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field0' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField0Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field1' field.
         */
    public java.lang.CharSequence getField1() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field1' field.
         * @param value the value to set.
     */
    public void setField1(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field1' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField1Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field2' field.
         */
    public java.lang.CharSequence getField2() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field2' field.
         * @param value the value to set.
     */
    public void setField2(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field2' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField2Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field3' field.
         */
    public java.lang.CharSequence getField3() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field3' field.
         * @param value the value to set.
     */
    public void setField3(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field3' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField3Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field4' field.
         */
    public java.lang.CharSequence getField4() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field4' field.
         * @param value the value to set.
     */
    public void setField4(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field4' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField4Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field5' field.
         */
    public java.lang.CharSequence getField5() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field5' field.
         * @param value the value to set.
     */
    public void setField5(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field5' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField5Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field6' field.
         */
    public java.lang.CharSequence getField6() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field6' field.
         * @param value the value to set.
     */
    public void setField6(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field6' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField6Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field7' field.
         */
    public java.lang.CharSequence getField7() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field7' field.
         * @param value the value to set.
     */
    public void setField7(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field7' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField7Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field8' field.
         */
    public java.lang.CharSequence getField8() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field8' field.
         * @param value the value to set.
     */
    public void setField8(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field8' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField8Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field9' field.
         */
    public java.lang.CharSequence getField9() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field9' field.
         * @param value the value to set.
     */
    public void setField9(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field9' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField9Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field10' field.
         */
    public java.lang.CharSequence getField10() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field10' field.
         * @param value the value to set.
     */
    public void setField10(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field10' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField10Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field11' field.
         */
    public java.lang.CharSequence getField11() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field11' field.
         * @param value the value to set.
     */
    public void setField11(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field11' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField11Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field12' field.
         */
    public java.lang.CharSequence getField12() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field12' field.
         * @param value the value to set.
     */
    public void setField12(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field12' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField12Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field13' field.
         */
    public java.lang.CharSequence getField13() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field13' field.
         * @param value the value to set.
     */
    public void setField13(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field13' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField13Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field14' field.
         */
    public java.lang.CharSequence getField14() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field14' field.
         * @param value the value to set.
     */
    public void setField14(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field14' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField14Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field15' field.
         */
    public java.lang.CharSequence getField15() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field15' field.
         * @param value the value to set.
     */
    public void setField15(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field15' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField15Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field16' field.
         */
    public java.lang.CharSequence getField16() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field16' field.
         * @param value the value to set.
     */
    public void setField16(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field16' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField16Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field17' field.
         */
    public java.lang.CharSequence getField17() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field17' field.
         * @param value the value to set.
     */
    public void setField17(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field17' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField17Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field18' field.
         */
    public java.lang.CharSequence getField18() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field18' field.
         * @param value the value to set.
     */
    public void setField18(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field18' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField18Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

        /**
     * Gets the value of the 'field19' field.
         */
    public java.lang.CharSequence getField19() {
      throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
    }

    /**
     * Sets the value of the 'field19' field.
         * @param value the value to set.
     */
    public void setField19(java.lang.CharSequence value) {
      throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
    }
  
    /**
     * Checks the dirty status of the 'field19' field. A field is dirty if it represents a change that has not yet been written to the database.
         * @param value the value to set.
     */
    public boolean isField19Dirty() {
      throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
    }

    
