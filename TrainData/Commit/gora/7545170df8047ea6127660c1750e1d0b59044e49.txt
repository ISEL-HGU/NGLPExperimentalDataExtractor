import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.Locale;
import java.util.logging.Level;
 * @param <K> class to be used for the key
 * @param <T> class to be persisted within the store
public class IgniteStore<K, T extends PersistentBase> extends DataStoreBase<K, T> {
  private static final String PARSE_MAPPING_FILE_KEY = "gora.ignite.mapping.file";
  private static final String DEFAULT_MAPPING_FILE = "gora-ignite-mapping.xml";
  private IgniteParameters igniteParameters;
  private IgniteMapping igniteMapping;
  private Connection connection;
      super.initialize(keyClass, persistentClass, properties);
      IgniteMappingBuilder builder = new IgniteMappingBuilder(this);
      builder.readMappingFile(getConf().get(PARSE_MAPPING_FILE_KEY, DEFAULT_MAPPING_FILE));
      igniteMapping = builder.getIgniteMapping();
      igniteParameters = IgniteParameters.load(properties, conf);
      connection = acquiereConnection();
      LOG.info("Ignite store was successfully initialized");
    } catch (ClassNotFoundException | SQLException ex) {
      LOG.error("Error while initializing Ignite store", ex);
      throw new GoraException(ex);
  private Connection acquiereConnection() throws ClassNotFoundException, SQLException {
    Class.forName("org.apache.ignite.IgniteJdbcThinDriver");
    StringBuilder urlBuilder = new StringBuilder();
    urlBuilder.append("jdbc:ignite:thin://");
    urlBuilder.append(igniteParameters.getHost());
    if (igniteParameters.getPort() != null) {
      urlBuilder.append(":"  igniteParameters.getPort());
    if (igniteParameters.getSchema() != null) {
      urlBuilder.append("/"  igniteParameters.getSchema());
    }
    if (igniteParameters.getUser() != null) {
      urlBuilder.append(";"  igniteParameters.getUser());
    }
    if (igniteParameters.getPassword() != null) {
      urlBuilder.append(";"  igniteParameters.getPassword());
    }
    if (igniteParameters.getAdditionalConfigurations() != null) {
      urlBuilder.append(igniteParameters.getAdditionalConfigurations());
    }
    Connection conn = DriverManager.getConnection(urlBuilder.toString());
    return conn;
    return igniteMapping.getTableName();
  }

  @Override
  public String getSchemaName(final String mappingSchemaName,
      final Class<?> persistentClass) {
    return super.getSchemaName(mappingSchemaName, persistentClass);
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    boolean exists = false;
    try (Statement stmt = connection.createStatement()) {
      MessageFormat messageFormat = new MessageFormat("select * from {0} limit 0", Locale.getDefault());
      ResultSet executeQuery = stmt.executeQuery(messageFormat.format(igniteMapping.getTableName()));
      executeQuery.close();
      exists = true;
    } catch (SQLException ex) {
      /**
       * a 42000 error code is thrown by Ignite when a non-existent table
       * queried. More details:
       * https://apacheignite-sql.readme.io/docs/jdbc-error-codes
       */
      if (ex.getSQLState() != null && ex.getSQLState().equals("42000")) {
        exists = false;
        throw new GoraException(ex);
    return exists;
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
  public void put(K key, T obj) throws GoraException {
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
  public long deleteByQuery(Query<K, T> query) throws GoraException {
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
  public Result<K, T> execute(Query<K, T> query) throws GoraException {
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
  public Query<K, T> newQuery() {
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
  @Override
  public List<PartitionQuery<K, T>> getPartitions(Query<K, T> query) throws IOException {
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
      connection.commit();
      connection.close();
      LOG.info("Ignite datastore destroyed successfully.");
    } catch (Exception ex) {
      LOG.error(ex.getMessage(), ex);

