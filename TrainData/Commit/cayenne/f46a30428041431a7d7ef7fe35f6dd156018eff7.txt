 *
        managedDataSources = new ConcurrentHashMap<>();
        String typeName;
    private String getDataNodePropertyName(DataNodeDescriptor nodeDescriptor, String propertyConstant) {
        return propertyConstant
                 "."
                 nodeDescriptor.getDataChannelDescriptor().getName()
                 "."
                 nodeDescriptor.getName();
    }

    private void findUnusedProperties(DataNodeDescriptor nodeDescriptor) {
        boolean found = false;
        StringBuilder logResult = new StringBuilder();
        String nodeName = nodeDescriptor.getDataChannelDescriptor().getName()
                 "."
                 nodeDescriptor.getName();
        logResult.append("Found unused runtime properties for '").append(nodeName).append("': ");
        String[] verifiableProperties = new String[] {
                Constants.JDBC_USERNAME_PROPERTY, Constants.JDBC_PASSWORD_PROPERTY,
                Constants.JDBC_MAX_CONNECTIONS_PROPERTY, Constants.JDBC_MIN_CONNECTIONS_PROPERTY,
                Constants.JDBC_MAX_QUEUE_WAIT_TIME, Constants.JDBC_VALIDATION_QUERY_PROPERTY
        };
        for (String propertyConstant : verifiableProperties) {
            String property = properties.get(getDataNodePropertyName(nodeDescriptor, propertyConstant));
            if (property != null) {
                logResult.append(getDataNodePropertyName(nodeDescriptor, propertyConstant)).append(", ");
                found = true;
            }
            property = properties.get(propertyConstant);
            if (property != null) {
                logResult.append(propertyConstant).append(", ");
                found = true;
            }
        }
        if (found) {
            logResult.delete(logResult.length() - 2, logResult.length());
            logResult.append(". This runtime properties was ignored. Configuration were taken from project DataSource. ");
            logResult.append("For using configuration from runtime properties, move driver and url configuration to properties.");
            logger.info(logResult.toString());
        }
    }

            driver = properties.get(getDataNodePropertyName(nodeDescriptor, Constants.JDBC_DRIVER_PROPERTY));
            if ((channelName != null) && (logger.isInfoEnabled())) {
                findUnusedProperties(nodeDescriptor);
            }
            url = properties.get(getDataNodePropertyName(nodeDescriptor, Constants.JDBC_URL_PROPERTY));
            if ((channelName != null) && (logger.isInfoEnabled())) {
                findUnusedProperties(nodeDescriptor);
            }
