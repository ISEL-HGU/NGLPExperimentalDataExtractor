import org.apache.cayenne.map.SQLResult;
import org.apache.cayenne.testdo.testmap.Artist;
import static org.hamcrest.CoreMatchers.instanceOf;
		tArtist.setColumns("ARTIST_ID", "ARTIST_NAME", "DATE_OF_BIRTH");
	private void createArtistDataSet() throws SQLException {
		tArtist.insert(15, "Surikov", new Date(System.currentTimeMillis()));
		tArtist.insert(16, "Ivanov", new Date(System.currentTimeMillis()));
	}

	public void testSQLTemplateForDataMapWithInsert() throws SQLException {
		createArtistDataSet();
		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		assertEquals(2, result.size());
	public void testSQLTemplateForDataMapWithInsertException() throws SQLException {
		createArtistDataSet();
		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
	public void testExceptionWhenUsingColumnsTypesAndSQLResult() throws SQLException {
		createArtistDataSet();

		SQLTemplate query = new SQLTemplate("SELECT ARTIST_ID P FROM ARTIST", true);
		query.setResultColumnsTypes(Float.class);
		SQLResult resultDescriptor = new SQLResult();
		resultDescriptor.addColumnResult("P");
		query.setResult(resultDescriptor);
		context.performQuery(query);
	}

	@Test(expected = CayenneRuntimeException.class)
	public void testExceptionWhenUsingColumnsTypesAndSQLResultUsingScalar() throws SQLException {
		createArtistDataSet();

		SQLTemplate query = new SQLTemplate(testDataMap, "SELECT ARTIST_ID, ARTIST_NAME P FROM ARTIST", false);
		query.setResultColumnsTypes(Float.class, String.class);
		query.setUseScalar(true);
		SQLResult resultDescriptor = new SQLResult();
		resultDescriptor.addColumnResult("P");
		resultDescriptor.addColumnResult("N");
		query.setResult(resultDescriptor);
		context.performQuery(query);
	}

	@Test
	public void testWithRootUsingScalar() throws SQLException {
		createArtistDataSet();

		SQLTemplate q3 = new SQLTemplate(Artist.class, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST");
		q3.setResultColumnsTypes(Double.class, String.class);
		q3.setUseScalar(true);
		List<Object[]> result = context.performQuery(q3);
		assertEquals(2, result.size());
		assertTrue(result.get(0) instanceof Object[]);
		assertTrue(result.get(0)[0] instanceof Double);
	}

	@Test
	public void testWithRootUsingDataRow() throws SQLException {
		createArtistDataSet();

		SQLTemplate q3 = new SQLTemplate(Artist.class, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST");
		q3.setResultColumnsTypes(Double.class, String.class);
		q3.setFetchingDataRows(true);
		q3.setColumnNamesCapitalization(CapsStrategy.UPPER);
		List<DataRow> result = context.performQuery(q3);
		assertEquals(2, result.size());
		assertTrue(result.get(0) instanceof DataRow);
		assertThat(result.get(0).get("ARTIST_ID"), instanceOf(Double.class));
	}

	@Test(expected = CayenneRuntimeException.class)
	public void testWithRootException() throws SQLException {
		createArtistDataSet();

		SQLTemplate q3 = new SQLTemplate(Artist.class, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST");
		q3.setResultColumnsTypes(Double.class, String.class);
		context.performQuery(q3);
	}

	@Test(expected = CayenneRuntimeException.class)
	public void testUsingScalarAndDataRow() throws SQLException {
		createArtistDataSet();

		SQLTemplate q3 = new SQLTemplate(Artist.class, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST");
		q3.setUseScalar(true);
		q3.setFetchingDataRows(true);
	public void testDataRowWithTypes() throws SQLException {
		createArtistDataSet();
		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST", true);
		q3.setResultColumnsTypes(Double.class, String.class);
		q3.setColumnNamesCapitalization(CapsStrategy.UPPER);
		List<DataRow> artists = context.performQuery(q3);
		assertTrue(artists.get(0) instanceof DataRow);
		assertThat(artists.get(0).get("ARTIST_ID"), instanceOf(Double.class));
	public void testDataRowReturnAndDirectives() throws SQLException {
		createArtistDataSet();

		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT #result('ARTIST_ID' 'java.lang.Long'), #result('ARTIST_NAME' 'java.lang.String') FROM ARTIST", true);
		List<DataRow> result = context.performQuery(q3);
		assertEquals(2, result.size());
		assertTrue(result.get(0) instanceof DataRow);
		assertEquals(2, result.get(0).size());
		assertTrue(result.get(0).get("ARTIST_ID") instanceof Long);
		assertTrue(result.get(0).get("ARTIST_NAME") instanceof String);
	}

	@Test(expected = CayenneRuntimeException.class)
	public void testDataRowReturnAndDirectivesExc() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT #result('ARTIST_ID' 'java.lang.Long'), #result('ARTIST_NAME' 'java.lang.String') FROM ARTIST", true);
		q3.setResultColumnsTypes(Integer.class, String.class);
		context.performQuery(q3);
	}

	@Test
	public void testObjectArrayReturnAndDirectives() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT #result('ARTIST_ID' 'java.lang.Long'), #result('ARTIST_NAME' 'java.lang.String') FROM ARTIST", false);
		q3.setUseScalar(true);
		List<Object[]> result = context.performQuery(q3);
		assertEquals(2, result.size());
		assertTrue(result.get(0) instanceof Object[]);
		assertEquals(2, result.get(0).length);
		assertTrue(result.get(0)[0] instanceof Long);
		assertTrue(result.get(0)[1] instanceof String);
	}

	@Test(expected = CayenneRuntimeException.class)
	public void testObjectArrayReturnAndDirectivesException() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT #result('ARTIST_ID' 'java.lang.Long'), #result('ARTIST_NAME' 'java.lang.String') FROM ARTIST", false);
		q3.setResultColumnsTypes(Integer.class, String.class);
		q3.setUseScalar(true);
		context.performQuery(q3);
	}

	@Test
	public void testObjectArrayWithSingleObjectReturnAndDirectives() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT #result('ARTIST_ID' 'java.lang.Long') FROM ARTIST", false);
		q3.setUseScalar(true);
		List<Object[]> result = context.performQuery(q3);
		assertEquals(2, result.size());
		assertTrue(result.get(0) instanceof Object[]);
		assertEquals(1, result.get(0).length);
		assertTrue(result.get(0)[0] instanceof Long);
	}

	@Test(expected = CayenneRuntimeException.class)
	public void testObjectArrayReturnWithException() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST", false);
		q3.setResultColumnsTypes(Integer.class);
		q3.setUseScalar(true);
		context.performQuery(q3);
	}

	@Test
	public void testObjectArrayWithSingleObjectReturn() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT ARTIST_ID FROM ARTIST", false);
		q3.setUseScalar(true);
		List<Object[]> artists = context.performQuery(q3);
		assertEquals(2, artists.size());
		assertEquals(1, artists.get(0).length);
		assertTrue(artists.get(0) instanceof Object[]);
		assertTrue(artists.get(0)[0] instanceof Long);
	}

	@Test
	public void testObjectArrayReturnWithDefaultTypes() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST", false);
		q3.setUseScalar(true);
		List<Object[]> artists = context.performQuery(q3);
		assertEquals(2, artists.size());
		assertEquals(2, artists.get(0).length);
		assertTrue(artists.get(0) instanceof Object[]);
		assertTrue(artists.get(0)[0] instanceof Long);
	}

	@Test
	public void testObjectArrayReturn() throws SQLException {
		createArtistDataSet();

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q5 = new SQLTemplate(testDataMap, "SELECT * FROM ARTIST", false);
		q5.setResultColumnsTypes(Float.class, String.class, LocalDateTime.class);
		q5.setUseScalar(true);

		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		SQLTemplate q5 = new SQLTemplate(testDataMap, "SELECT ARTIST_NAME FROM ARTIST_CT", false);
		q5.setResultColumnsTypes(String.class);
		q5.setUseScalar(true);
		tArtist.insert(1, "artist1", null);
		tArtist.insert(2, "artist2", null);
