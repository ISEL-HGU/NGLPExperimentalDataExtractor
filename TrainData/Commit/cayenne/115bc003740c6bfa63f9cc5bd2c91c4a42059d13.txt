import org.apache.cayenne.map.DbAttribute;
import javax.swing.KeyStroke;
import java.awt.Toolkit;
	public DbEntitySyncAction(final Application application) {
	public void performAction(final ActionEvent e) {
		final ProjectController mediator = getProjectController();
		final DbEntity dbEntity = mediator.getCurrentDbEntity();
			final Collection<ObjEntity> entities = dbEntity.getDataMap().getMappedEntities(dbEntity);
			final EntityMergeSupport merger = new EntitySyncController(Application.getInstance().getFrameController(), dbEntity)
			final DbEntitySyncUndoableEdit undoableEdit = new DbEntitySyncUndoableEdit((DataChannelDescriptor) mediator
			boolean hasChanges = false;
			for (final ObjEntity entity : entities) {
				final DbEntitySyncUndoableEdit.EntitySyncUndoableListener listener = undoableEdit.new EntitySyncUndoableListener(
				final Collection<DbAttribute> meaningfulFKs = merger.getMeaningfulFKs(entity);

				if (merger.isRemovingMeaningfulFKs() && !meaningfulFKs.isEmpty()) {
					undoableEdit.addEdit(undoableEdit.new MeaningfulFKsUndoableEdit(entity, meaningfulFKs));
					hasChanges = true;
					hasChanges = true;
			if (hasChanges) {
				application.getUndoManager().addEdit(undoableEdit);
			}
	private void filterInheritedEntities(final Collection<ObjEntity> entities) {
		final Iterator<ObjEntity> it = entities.iterator();
		while (it.hasNext()) {
			if (it.next().getSuperEntity() != null) {
		public String relationshipName(final DbRelationship... relationshipChain) {
			if (relationshipChain.length == 0) {
			final DbRelationship last = relationshipChain[relationshipChain.length - 1];
			if (last.getName().startsWith("untitledRel")) {
