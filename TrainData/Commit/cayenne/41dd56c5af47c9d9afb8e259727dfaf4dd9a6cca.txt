import org.apache.cayenne.exp.Expression;
import org.apache.cayenne.exp.ExpressionFactory;
import org.apache.cayenne.map.DbEntity;
import org.apache.cayenne.query.ObjectSelect;
import org.apache.cayenne.testdo.qualified.Qualified3;
import org.apache.cayenne.testdo.qualified.Qualified4;
    private TableHelper tQualified3;
    private TableHelper tQualified4;
        tQualified1 = new TableHelper(dbHelper, "TEST_QUALIFIED1")
                .setColumns("ID", "NAME", "DELETED")
                .setColumnTypes(Types.INTEGER, Types.VARCHAR, bool);
        tQualified2 = new TableHelper(dbHelper, "TEST_QUALIFIED2")
                .setColumns("ID", "NAME", "DELETED", "QUALIFIED1_ID")
                .setColumnTypes(Types.INTEGER, Types.VARCHAR, bool, Types.INTEGER);

        tQualified3 = new TableHelper(dbHelper, "TEST_QUALIFIED3")
                .setColumns("ID", "NAME", "DELETED")
                .setColumnTypes(Types.INTEGER, Types.VARCHAR, bool);

        tQualified4 = new TableHelper(dbHelper, "TEST_QUALIFIED4")
                .setColumns("ID", "NAME", "DELETED", "QUALIFIED3_ID")
                .setColumnTypes(Types.INTEGER, Types.VARCHAR, bool, Types.INTEGER);
    private void createJoinDataSet() throws Exception {
        tQualified3.insert(1, "O1", null);
        tQualified3.insert(2, "O2", accessStackAdapter.supportsBoolean() ? true : 1);

        tQualified4.insert(1, "SHOULD_SELECT", null, 1);
        tQualified4.insert(2, "SHOULD_NOT_SELECT", null, 2);
    }

            assertNull(target);
        }
    }

    @Test
    public void joinWithQualifier() throws Exception {
        createJoinDataSet();

        List<Qualified4> result = ObjectSelect.query(Qualified4.class)
                .where(Qualified4.QUALIFIED3.dot(Qualified3.NAME).like("O%"))
                .select(context);

        assertEquals(1, result.size());
        assertEquals("SHOULD_SELECT", result.get(0).getName());
    }

    @Test
    public void joinWithCustomDbQualifier() throws Exception {
        createJoinDataSet();

        DbEntity entity1 = context.getEntityResolver().getDbEntity("TEST_QUALIFIED3");
        DbEntity entity2 = context.getEntityResolver().getDbEntity("TEST_QUALIFIED4");
        Expression oldExpression1 = entity1.getQualifier();
        Expression oldExpression2 = entity2.getQualifier();
        try {
            entity1.setQualifier(ExpressionFactory.matchDbExp("DELETED", null));
            entity2.setQualifier(ExpressionFactory.matchDbExp("DELETED", null));

            List<Qualified4> result = ObjectSelect.query(Qualified4.class)
                    .where(Qualified4.QUALIFIED3.dot(Qualified3.NAME).like("O%"))
                    .select(context);

            assertEquals(1, result.size());
            assertEquals("SHOULD_SELECT", result.get(0).getName());
        } finally {
            entity1.setQualifier(oldExpression1);
            entity2.setQualifier(oldExpression2);
