import java.time.LocalDateTime;
import static org.junit.Assert.*;
	private TableHelper tArtistCt;


		tArtistCt = new TableHelper(dbHelper, "ARTIST_CT");
		tArtistCt.setColumns("ARTIST_ID", "ARTIST_NAME", "DATE_OF_BIRTH");
	@Test(expected = CayenneRuntimeException.class)
	public void testObjectArrayReturnWithException() {
		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		String sql = "INSERT INTO ARTIST VALUES (15, 'Surikov', null)";
		SQLTemplate q1 = new SQLTemplate(testDataMap, sql, true);
		context.performNonSelectingQuery(q1);
		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST", true)
				.resultColumnsTypes(Integer.class);
		context.performQuery(q3);
	}

	@Test
	public void testObjectArrayReturn() throws SQLException {
		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		String sql = "INSERT INTO ARTIST VALUES (15, 'Surikov', null)";
		String sql1 = "INSERT INTO ARTIST VALUES (16, 'Ivanov', null)";
		SQLTemplate q1 = new SQLTemplate(testDataMap, sql, true);
		context.performNonSelectingQuery(q1);
		SQLTemplate q2 = new SQLTemplate(testDataMap, sql1, true);
		context.performNonSelectingQuery(q2);

		SQLTemplate q3 = new SQLTemplate(testDataMap, "SELECT ARTIST_ID, ARTIST_NAME FROM ARTIST", true)
				.resultColumnsTypes(Integer.class, String.class);
		List<Object[]> artists = context.performQuery(q3);
		assertEquals(2, artists.size());
		assertEquals(2, artists.get(0).length);
	}

	@Test
	public void testObjectArrayReturnWithCustomType() throws SQLException {
		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		tArtistCt.insert(1, "Test", "2018-10-10");
		tArtistCt.insert(2, "Test1", "2017-09-09");
		SQLTemplate q5 = new SQLTemplate(testDataMap, "SELECT * FROM ARTIST_CT", true)
				.resultColumnsTypes(Integer.class, String.class, LocalDateTime.class);
		List dates = context.performQuery(q5);
		assertEquals(2, dates.size());
		assertTrue(dates.get(0) instanceof Object[]);
		assertEquals(3, ((Object[])dates.get(0)).length);
		assertTrue(((Object[])dates.get(0))[2] instanceof LocalDateTime);
	}

	@Test
	public void testSingleObjectReturn() throws SQLException {
		DataMap testDataMap = context.getEntityResolver().getDataMap("testmap");
		tArtistCt.insert(1, "Test", "2018-10-10");
		SQLTemplate q5 = new SQLTemplate(testDataMap, "SELECT ARTIST_NAME FROM ARTIST_CT", true)
				.resultColumnsTypes(String.class);
		List dates = context.performQuery(q5);
		assertEquals(1, dates.size());
		assertTrue(dates.get(0) instanceof String);
		assertEquals("Test", dates.get(0));
	}

	public void testSQLTemplate_PositionalParams_ToFewParams() {
	public void testSQLTemplateWithDisjointPrefetch() {
