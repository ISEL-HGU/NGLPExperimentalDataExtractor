import org.apache.cayenne.modeler.ProjectController;
import java.util.Arrays;
import java.util.regex.Pattern;

    public static Collection<ObjRelationship> findObjRelationshipsForDbRelationship(ProjectController mediator,
                                                                                    DbRelationship relationship) {
        DataChannelDescriptor domain = (DataChannelDescriptor) mediator.getProject().getRootNode();
        List<ObjRelationship> objRelationships = new ArrayList<>();
        if (domain != null) {
            for (DataMap map : domain.getDataMaps()) {
                for (ObjEntity entity : map.getObjEntities()) {
                    for (ObjRelationship objRelationship : entity.getRelationships()) {
                        if (objRelationship.getDbRelationships().contains(relationship)) {
                            objRelationships.add(objRelationship);
                        }
                    }
                }
            }
        }
        return objRelationships;
    }

    public static Collection<ObjAttribute> findObjAttributesForDbRelationship(ProjectController mediator,
                                                                               DbRelationship relationship) {
        DataChannelDescriptor domain = (DataChannelDescriptor) mediator.getProject().getRootNode();
        List<ObjAttribute> attributes = new ArrayList<>();
        String[] dbAttrPathByDot;
        if (domain != null) {
            for (DataMap map : domain.getDataMaps()) {
                for (ObjEntity entity : map.getObjEntities()) {
                    for (ObjAttribute objAttribute : entity.getAttributes()) {
                        if(objAttribute.getDbAttributePath() != null) {
                            dbAttrPathByDot = objAttribute.getDbAttributePath()
                                    .split(Pattern.quote("."));
                            for (String partOfPath : dbAttrPathByDot) {
                                if (partOfPath.equals(relationship.getName())) {
                                    attributes.add(objAttribute);
                                }
                            }
                        }
                    }
                }
            }
        }
        return attributes;
    }
