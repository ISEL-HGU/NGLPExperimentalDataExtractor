    @Parameter(name = "dbimport", property = "dbimport", alias = "dbImport")
    private ReverseEngineering dbImportConfig = new ReverseEngineering();

    /**
     * @deprecated use {@code <dataSource>} tag to set connection properties
     */
    @Deprecated @Parameter(name = "url", property = "url")
    private final String oldUrl = "";                // TODO remove in 4.0.BETA

    /**
     * @deprecated moved to {@code <dbimport>} section
     */
    @Deprecated @Parameter(name = "meaningfulPkTables", property = "meaningfulPkTables")
    private final String oldMeaningfulPkTables = ""; // TODO remove in 4.0.BETA

    /**
     * @deprecated use {@code <dataSource>} tag to set connection properties
     */
    @Deprecated @Parameter(name = "driver", property = "driver")
    private final String oldDriver = "";             // TODO remove in 4.0.BETA

    /**
     * @deprecated moved to {@code <dbimport>} section
     */
    @Deprecated @Parameter(name = "defaultPackage", property = "defaultPackage")
    private final String oldDefaultPackage = "";     // TODO remove in 4.0.BETA

                dbImportConfig, config, injector);
        config.setDefaultPackage(dbImportConfig.getDefaultPackage());
        config.setFiltersConfig(new FiltersConfigBuilder(dbImportConfig).build());
        config.setForceDataMapCatalog(dbImportConfig.isForceDataMapCatalog());
        config.setForceDataMapSchema(dbImportConfig.isForceDataMapSchema());
        config.setMeaningfulPkTables(dbImportConfig.getMeaningfulPkTables());
        config.setNamingStrategy(dbImportConfig.getNamingStrategy());
        config.setSkipRelationshipsLoading(dbImportConfig.getSkipRelationshipsLoading());
        config.setSkipPrimaryKeyLoading(dbImportConfig.getSkipPrimaryKeyLoading());
        config.setStripFromTableNames(dbImportConfig.getStripFromTableNames());
        config.setTableTypes(dbImportConfig.getTableTypes());
        config.setUsePrimitives(dbImportConfig.isUsePrimitives());
    /**
     * Used only in tests, Maven will inject value directly into the "map" field
     */
     * This setter is used by Maven when defined {@code <dbimport>} tag
    public void setDbimport(ReverseEngineering dbImportConfig) {
        this.dbImportConfig = dbImportConfig;
     * This setter is used by Maven {@code <dbImport>} tag
    public void setDbImport(ReverseEngineering dbImportConfig) {
        this.dbImportConfig = dbImportConfig;
        return dbImportConfig;
    // TODO ⬇⬇⬇ All following setters should be removed in 4.0.BETA ⬇⬇⬇
