import java.util.ArrayList;
        ObjectContext child21 = runtime.newContext(child2);
        List<Artist> objects = new SelectQuery<>(Artist.class).select(child);

        @SuppressWarnings("unchecked")
        SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
        final List<Painting> childSources = q.select(child);
        queryInterceptor.runWithQueriesBlocked(() -> {
            Painting childHollowTargetSrc = childSources.get(0);
            assertSame(child, childHollowTargetSrc.getObjectContext());
            Artist childHollowTarget = childHollowTargetSrc.getToArtist();
            assertNotNull(childHollowTarget);
            assertEquals(PersistenceState.HOLLOW, childHollowTarget.getPersistenceState());
            assertSame(child, childHollowTarget.getObjectContext());
            Artist childModifiedTarget = childSources.get(1).getToArtist();
            assertEquals(PersistenceState.COMMITTED, childModifiedTarget.getPersistenceState());
            assertSame(child, childModifiedTarget.getObjectContext());
            assertEquals("M1", childModifiedTarget.getArtistName());
            Painting childDeletedTargetSrc = childSources.get(2);
            // make sure we got the right object...
            assertEquals(deletedTargetSrc.getObjectId(), childDeletedTargetSrc.getObjectId());
            Artist childDeletedTarget = childDeletedTargetSrc.getToArtist();
            assertNull(childDeletedTarget);
            Artist childCommittedTarget = childSources.get(3).getToArtist();
            assertEquals(PersistenceState.COMMITTED, childCommittedTarget.getPersistenceState());
            assertSame(child, childCommittedTarget.getObjectContext());
            Painting childNewTargetSrc = childSources.get(4);
            // make sure we got the right object...
            assertEquals(newTargetSrc.getObjectId(), childNewTargetSrc.getObjectId());

            Artist childNewTarget = childNewTargetSrc.getToArtist();
            assertNotNull(childNewTarget);
            assertEquals(PersistenceState.COMMITTED, childNewTarget.getPersistenceState());
            assertSame(child, childNewTarget.getObjectContext());
            assertEquals("N1", childNewTarget.getArtistName());
        SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
        final List<Painting> results = q.select(child);
        queryInterceptor.runWithQueriesBlocked(() -> {
            assertEquals(2, results.size());
            for (Painting o : results) {
                assertEquals(PersistenceState.COMMITTED, o.getPersistenceState());
                assertSame(child, o.getObjectContext());
                Artist o1 = o.getToArtist();
                assertNotNull(o1);
                assertEquals(PersistenceState.COMMITTED, o1.getPersistenceState());
                assertSame(child, o1.getObjectContext());
                assertEquals(prefetchedId, o1.getObjectId());
        SelectQuery<Artist> q = new SelectQuery<>(Artist.class);
        final List<Artist> results = q.select(child);
        queryInterceptor.runWithQueriesBlocked(() -> {
            Artist o1 = results.get(0);
            assertEquals(PersistenceState.COMMITTED, o1.getPersistenceState());
            assertSame(child, o1.getObjectContext());
            List<Painting> children1 = o1.getPaintingArray();
            assertEquals(ArrayList.class, children1.getClass());
            assertEquals(2, children1.size());
            for (Painting o : children1) {
                assertEquals(PersistenceState.COMMITTED, o.getPersistenceState());
                assertSame(child, o.getObjectContext());
                assertEquals(o1, o.getToArtist());

            Artist o2 = results.get(1);
            assertEquals(PersistenceState.COMMITTED, o2.getPersistenceState());
            assertSame(child, o2.getObjectContext());

            List<Painting> children2 = o2.getPaintingArray();
            assertEquals(0, children2.size());
    public void testObjectFromDataRow() {
        row.put("ARTIST_ID", 5L);

