	public void test_DataRowWithTypesMapped() throws Exception {
		createArtistDataSet();

		List<Object> result = SQLSelect.dataRowQuery("SELECT * FROM ARTIST_CT", Integer.class, String.class, LocalDateTime.class)
				.columnNameCaps(CapsStrategy.UPPER)
				.map(dataRow -> dataRow.get("ARTIST_ID"))
				.select(context);
		assertEquals(2, result.size());
		assertTrue(result.get(0) instanceof Integer);
	}

	@Test
	@Test
	public void testObjectArrayWithDefaultTypesReturnAndDirectivesMappedToPojo() throws Exception {
		createArtistDataSet();

		List<ArtistDataWrapper> result = SQLSelect
				.arrayQuery("SELECT #result('ARTIST_ID' 'java.lang.Long'), #result('ARTIST_NAME' 'java.lang.String') FROM ARTIST_CT")
				.map(ArtistDataWrapper::new)
				.select(context);

		assertEquals(2, result.size());
		assertTrue(result.get(0).id > 0);
		assertNotNull(result.get(0).name);
	}

	public void testObjectArrayWithCustomTypeMappedToPojo() throws SQLException {
		createArtistDataSet();

		List<ArtistDataWrapper> result = SQLSelect.scalarQuery("SELECT * FROM ARTIST_CT",
				Integer.class, String.class, LocalDateTime.class)
				.map(ArtistDataWrapper::new)
				.select(context);

		assertEquals(2, result.size());
		assertTrue(result.get(0).id > 0);
		assertNotNull(result.get(0).name);
		assertNotNull(result.get(0).date);
	}

	@Test
	public void test_DataRows_ColumnNameCaps() {
				.param("a", "painting3")
				.columnNameCaps(CapsStrategy.UPPER)
				.select(context);
				.columnNameCaps(CapsStrategy.UPPER).iterator(context)) {
				.columnNameCaps(CapsStrategy.UPPER).batchIterator(context, 5)) {
		assertEquals(3L, id);
		assertEquals(2L, ids.get(1).intValue());
		assertEquals(3L, id.intValue());
		assertEquals(2L, ids.get(0).intValue());
		assertEquals(3L, ids.get(1).intValue());
		assertEquals(1L, ids.get(0).longValue());
		assertEquals(1L, ids.get(0).longValue());
	}

	static class ArtistDataWrapper {
		long id;
		String name;
		LocalDateTime date;
		ArtistDataWrapper(Object[] data) {
			id = ((Number)data[0]).longValue();
			name = (String)data[1];
			if(data.length > 2) {
				date = (LocalDateTime)data[2];
			}
		}
