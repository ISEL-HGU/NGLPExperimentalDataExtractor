import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

        // need to do double commit as Ashwood sorter blows on Employees/Departments ordering...
        // need to make sure source relationship is resolved as a result of some Ashwood strangeness...
        context1.performQuery(new SelectQuery<>(Employee.class));
        assertMergeResult(d1, op);
    public void testDeepMergeNonExistentSubclass() {
        // need to do double commit as Ashwood sorter blows on Employees/Departments ordering...
        // need to make sure source relationship is resolved as a result of some Ashwood strangeness...
        assertMergeResult(d1, op);
    }
    private void assertMergeResult(Department d1, DeepMergeOperation op) {
        queryInterceptor.runWithQueriesBlocked(() -> {
            Department d2 = op.merge(d1);
            assertNotNull(d2);
            assertEquals(PersistenceState.COMMITTED, d2.getPersistenceState());
            for (Employee ex : d2.getEmployees()) {
                if ("E2".equals(ex.getName())) {
                    assertThat(ex, is(instanceOf(Manager.class)));
                } else {
                    assertThat(ex, is(not(instanceOf(Manager.class))));
