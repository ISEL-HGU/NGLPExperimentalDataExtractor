        if(!catalogs.isEmpty()) {
            catalogs.forEach(catalog -> {
                Collection<Schema> schemas = catalog.getSchemas();
                if(!schemas.isEmpty()) {
                    DbImportTreeNode currentRoot = findNodeInParent(root, catalog);
                    schemas.forEach(schema -> packNextFilter(schema, currentRoot, model));
                } else {
                    packNextFilter(catalog, root, model);
                }
            });
        } else {
            reverseEngineering.getSchemas().forEach(schema -> {
                packNextFilter(schema, root, model);
            });
        }
    }
    private void packNextFilter(FilterContainer filterContainer,
                                DbImportTreeNode root,
                                DbImportModel model) {
        DbImportTreeNode container = findNodeInParent(root, filterContainer);

        if (container == null) {
            return;
        }

        packTables(filterContainer, container, model);
    }

    private void packTables(FilterContainer filterContainer,
                            DbImportTreeNode root,
                            DbImportModel model) {
        filterContainer.getIncludeTables().forEach(tableFilter -> {
            DbImportTreeNode container = findNodeInParent(root, tableFilter );
            if (container.getChildCount() != 0) {
                container.removeAllChildren();
            }
            packColumns(tableFilter , container);

            container.setLoaded(true);
            model.reload(container);
    private void packColumns(IncludeTable includeTable, DbImportTreeNode tableNode) {
        includeTable.getIncludeColumns().forEach(column ->
                tableNode.add(new DbImportTreeNode(column)));
    }

