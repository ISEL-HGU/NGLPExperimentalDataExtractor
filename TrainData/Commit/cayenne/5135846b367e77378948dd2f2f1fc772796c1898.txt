import org.apache.cayenne.Fault;
import org.apache.cayenne.query.ObjectSelect;
import org.apache.cayenne.testdo.testmap.Gallery;
		tPainting.setColumns("PAINTING_ID", "PAINTING_TITLE", "ARTIST_ID", "ESTIMATED_PRICE", "GALLERY_ID").setColumnTypes(
				Types.INTEGER, Types.VARCHAR, Types.BIGINT, Types.DECIMAL, Types.INTEGER);
		tPainting.insert(6, "p_artist3", 101, 1000, null);
		tPainting.insert(7, "p_artist2", 11, 2000, null);
		tPainting.insert(6, "p_artist2", 11, 1000, null);
		tPainting.insert(7, "p_artist3", 11, 2000, null);
		tPainting.insert(6, "p_artist3", 101, 1000, null);
		tPainting.insert(7, "p_artist21", 11, 2000, null);
		tPainting.insert(8, "p_artist22", 11, 3000, null);
		tPainting.insert(6, "p_Xty", null, 1000, null);
	/**
	 * This test and next one is the result of CAY-2349 fix
	 */
	@Test
	public void testPrefetchWithLocalCache() throws Exception {
		tArtist.deleteAll();
		tGallery.deleteAll();
		tPainting.deleteAll();
		tArtist.insert(1, "artist1");
		tGallery.insert(1, "gallery1");
		tPainting.insert(1, "painting1", 1, 100, 1);

		List<Painting> paintings = ObjectSelect.query(Painting.class)
				.localCache("g1").select(context);
		assertEquals(1, paintings.size());
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Fault);

		paintings = ObjectSelect.query(Painting.class)
				.prefetch(Painting.TO_ARTIST.joint())
				.localCache("g1").select(context);
		assertEquals(1, paintings.size());
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);

		queryInterceptor.runWithQueriesBlocked(new UnitTestClosure() {

			public void execute() {
				List<Painting> paintings = ObjectSelect.query(Painting.class)
						.prefetch(Painting.TO_ARTIST.joint())
						.localCache("g1").select(context);
				assertEquals(1, paintings.size());
				assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
			}
		});
	}

	@Test
	public void testPrefetchWithSharedCache() throws Exception {
		tArtist.deleteAll();
		tGallery.deleteAll();
		tPainting.deleteAll();
		tArtist.insert(1, "artist1");
		tGallery.insert(1, "gallery1");
		tPainting.insert(1, "painting1", 1, 100, 1);

		final ObjectSelect<Painting> s1 = ObjectSelect.query(Painting.class)
				.sharedCache("g1");

		final ObjectSelect<Painting> s2 = ObjectSelect.query(Painting.class)
				.prefetch(Painting.TO_ARTIST.disjoint())
				.sharedCache("g1");

		final ObjectSelect<Painting> s3 = ObjectSelect.query(Painting.class)
				.prefetch(Painting.TO_GALLERY.joint())
				.sharedCache("g1");

		final ObjectSelect<Painting> s4 = ObjectSelect.query(Painting.class)
				.prefetch(Painting.TO_ARTIST.disjoint())
				.prefetch(Painting.TO_GALLERY.joint())
				.sharedCache("g1");

		// first iteration select from DB and cache
		List<Painting> paintings = s1.select(context);
		assertEquals(1, paintings.size());
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Fault);
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Fault);

		paintings = s2.select(context);
		assertEquals(1, paintings.size());
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Fault);

		paintings = s3.select(context);
		assertEquals(1, paintings.size());
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Fault);
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Gallery);

		paintings = s4.select(context);
		assertEquals(1, paintings.size());
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
		assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Gallery);

		queryInterceptor.runWithQueriesBlocked(new UnitTestClosure() {

			public void execute() {
				// select from cache
				List<Painting> paintings = s2.select(context);
				assertEquals(1, paintings.size());
				assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
				assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Fault);

				paintings = s3.select(context);
				assertEquals(1, paintings.size());
				assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Fault);
				assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Gallery);

				paintings = s4.select(context);
				assertEquals(1, paintings.size());
				assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
				assertTrue(paintings.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Gallery);
			}
		});
	}

