import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import java.util.Comparator;
import java.util.function.Function;
    private static final Comparator<DbEntity> DB_ENTITY_COMPARATOR =
            Comparator.comparing((Function<DbEntity, String>) ent -> ent.getDataMap().getName())
                    .thenComparing(DbEntity::getName);

        TargetComboBoxModel targetComboBoxModel =
                new TargetComboBoxModel(projectController.getEntityResolver().getDbEntities());
            DbEntity selectedItem = ((TargetComboBoxModel)view.getTargetEntities().getModel()).selected;
                relationship.setTargetEntityName(selectedItem.getName());
            } else if(!relationship.getTargetEntityName().equals(selectedItem.getName())){
                    relationship.setTargetEntityName(selectedItem.getName());
    final class TargetComboBoxModel extends AbstractListModel<String> implements ComboBoxModel<String> {

        private List<DbEntity> entities;
        private DbEntity selected;
            this.entities = new ArrayList<>(dbEntities);
            this.entities.sort(DB_ENTITY_COMPARATOR);
            selected = relationship.getTargetEntity();
        private String getTitle(DbEntity entity) {
            if(entity == null) {
                return "";
            }
            return relationship.getSourceEntity().getDataMap() == entity.getDataMap()
                    ? entity.getName()
                    : entity.getName()  " ("  entity.getDataMap().getName()  ')';
        }

        @Override
        public int getSize() {
            return entities.size();
        }

        @Override
        public String getElementAt(int index) {
            return getTitle(entities.get(index));
        }

        @Override
        public void setSelectedItem(Object anItem) {
            String title = (String)anItem;
            if(title != null) {
                int spacer = title.indexOf(' ');
                if (spacer != -1) {
                    title = title.substring(0, spacer);
                }
            }
            selected = projectController.getEntityResolver().getDbEntity(title);
        }

        @Override
        public Object getSelectedItem() {
            return getTitle(selected);
        }
