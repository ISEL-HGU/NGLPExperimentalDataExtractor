import java.util.Date;
import org.apache.cayenne.ObjectContext;
import org.apache.cayenne.configuration.server.ServerRuntime;
import static org.junit.Assert.*;
    private ServerRuntime runtime;

    @Inject

    /*
     * Test selection from nested context
     */

    @Test
    public void testNestedContextScalarResult() {
        ObjectContext childContext = runtime.newContext(context);

        List<String> names = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME)
                .select(childContext);
        assertEquals(20, names.size());
        for(String name : names) {
            assertNotNull(name);
        }
    }
    @Test
    public void testNestedContextObjectResult() {
        ObjectContext childContext = runtime.newContext(context);

        Property<Artist> artistProperty = Property.createSelf(Artist.class);
        List<Artist> artists = ObjectSelect.columnQuery(Artist.class, artistProperty)
                .select(childContext);
        assertEquals(20, artists.size());
        for(Artist artist : artists) {
            assertNotNull(artist);
        }
    }

    @Test
    public void testNestedContextScalarArrayResult() {
        ObjectContext childContext = runtime.newContext(context);

        List<Object[]> data = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME, Artist.DATE_OF_BIRTH)
                .select(childContext);
        assertEquals(20, data.size());
        for(Object[] next : data) {
            assertTrue(next[0] instanceof String);
            assertTrue(next[1] instanceof Date);
        }
    }

    @Test
    public void testNestedContextMixedResult() {
        ObjectContext childContext = runtime.newContext(context);

        Property<Artist> artistProperty = Property.createSelf(Artist.class);
        List<Object[]> data = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME, artistProperty)
                .select(childContext);
        assertEquals(20, data.size());
        for(Object[] next : data) {
            assertTrue(next[0] instanceof String);
            assertTrue(next[1] instanceof Artist);
        }
    }

