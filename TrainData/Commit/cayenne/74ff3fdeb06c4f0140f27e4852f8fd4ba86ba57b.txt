import org.apache.cayenne.DataRow;
import org.apache.cayenne.query.ObjectSelect;
import org.apache.cayenne.testdo.meaningful_pk.MeaningfulPkTest2;
import static org.junit.Assert.*;
    public void testInsertWithMeaningfulPK() {
        ObjectId objId = new ObjectId("MeaningfulPKTest1", MeaningfulPKTest1.PK_ATTRIBUTE_PK_COLUMN, 1000);
        ObjectIdQuery q = new ObjectIdQuery(objId, true, ObjectIdQuery.CACHE_REFRESH);
        @SuppressWarnings("unchecked")
        List<DataRow> result = (List<DataRow>)context.performQuery(q);
        assertEquals(1, result.size());
        assertEquals(1000, result.get(0).get(MeaningfulPKTest1.PK_ATTRIBUTE_PK_COLUMN));
    public void testGeneratedKey() {
        assertNotEquals(0, obj.getPkAttribute());
        assertSame(obj, Cayenne.objectForPK(context, MeaningfulPKTest1.class, obj.getPkAttribute()));
        Map snapshot = context.getObjectStore().getDataRowCache().getCachedSnapshot(obj.getObjectId());
        assertEquals(id, snapshot.get(MeaningfulPKTest1.PK_ATTRIBUTE_PK_COLUMN));
    public void testChangeKey() {
        MeaningfulPKTest1 obj = context.newObject(MeaningfulPKTest1.class);
        obj.setPkAttribute(1000);
        obj.setPkAttribute(2000);
        assertEquals(2000, id.getIdSnapshot().get("PK_ATTRIBUTE"));
    public void testToManyRelationshipWithMeaningfulPK1() {
        MeaningfulPKTest1 obj = context.newObject(MeaningfulPKTest1.class);
        obj.setPkAttribute(1000);
        List<MeaningfulPKTest1> objects = ObjectSelect.query(MeaningfulPKTest1.class).select(context);
        obj = objects.get(0);
    public void testToManyRelationshipWithMeaningfulPK2() {
        MeaningfulPKTest1 obj = context.newObject(MeaningfulPKTest1.class);
        obj.setPkAttribute(1000);
        MeaningfulPKDep dep = context.newObject(MeaningfulPKDep.class);
    @Test
    public void testGeneratedIntegerPK(){
        MeaningfulPkTest2 obj1 = context.newObject(MeaningfulPkTest2.class);
        obj1.setIntegerAttribute(10);
        MeaningfulPkTest2 obj2 = context.newObject(MeaningfulPkTest2.class);
        obj2.setIntegerAttribute(20);
        context.commitChanges();

        ObjectContext context = runtime.newContext();
        List<MeaningfulPkTest2> objects = ObjectSelect.query(MeaningfulPkTest2.class).select(context);
        assertEquals(2, objects.size());
        assertNotEquals(Integer.valueOf(0), obj1.getPkAttribute());
        assertNotEquals(Integer.valueOf(0), obj2.getPkAttribute());
        assertNotEquals(obj1.getPkAttribute(), obj2.getPkAttribute());
    }

    @Test
    public void testMeaningfulIntegerPK(){
        MeaningfulPkTest2 obj1 = context.newObject(MeaningfulPkTest2.class);
        obj1.setIntegerAttribute(10);
        obj1.setPkAttribute(1);
        MeaningfulPkTest2 obj2 = context.newObject(MeaningfulPkTest2.class);
        obj2.setIntegerAttribute(20);
        obj2.setPkAttribute(2);
        context.commitChanges();

        ObjectContext context = runtime.newContext();
        List<MeaningfulPkTest2> objects = ObjectSelect.query(MeaningfulPkTest2.class).select(context);
        assertEquals(2, objects.size());
        assertEquals(Integer.valueOf(1), obj1.getPkAttribute());
        assertEquals(Integer.valueOf(2), obj2.getPkAttribute());
    }

    @Test
    public void testGeneratedIntPK(){
        MeaningfulPKTest1 obj1 = context.newObject(MeaningfulPKTest1.class);
        obj1.setIntAttribute(10);
        MeaningfulPKTest1 obj2 = context.newObject(MeaningfulPKTest1.class);
        obj2.setIntAttribute(20);
        context.commitChanges();

        ObjectContext context = runtime.newContext();
        List<MeaningfulPKTest1> objects = ObjectSelect.query(MeaningfulPKTest1.class).select(context);
        assertEquals(2, objects.size());
        assertNotEquals(0, obj1.getPkAttribute());
        assertNotEquals(0, obj2.getPkAttribute());
        assertNotEquals(obj1.getPkAttribute(), obj2.getPkAttribute());
    }

    @Test
    public void testMeaningfulIntPK(){
        MeaningfulPKTest1 obj1 = context.newObject(MeaningfulPKTest1.class);
        obj1.setIntAttribute(10);
        obj1.setPkAttribute(1);
        MeaningfulPKTest1 obj2 = context.newObject(MeaningfulPKTest1.class);
        obj2.setIntAttribute(20);
        obj2.setPkAttribute(2);
        context.commitChanges();

        ObjectContext context = runtime.newContext();
        List<MeaningfulPKTest1> objects = ObjectSelect.query(MeaningfulPKTest1.class).select(context);
        assertEquals(2, objects.size());
        assertEquals(1, obj1.getPkAttribute());
        assertEquals(2, obj2.getPkAttribute());
    }
