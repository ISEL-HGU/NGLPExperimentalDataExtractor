import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.cayenne.testdo.testmap.Painting;
    private static final DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.SHORT, Locale.US);
    private TableHelper tArtist;
        tArtist = new TableHelper(dbHelper, "ARTIST");
        tPaintings.setColumns("PAINTING_ID", "PAINTING_TITLE", "ARTIST_ID", "GALLERY_ID", "ESTIMATED_PRICE");
            tPaintings.insert(i, "painting"  i, i % 5  1, 1, 22 - i);
        tPaintings.insert(21, "painting21", 2, 1, 30);
        Object[] result = ObjectSelect.query(Artist.class)
                .columns(Artist.DATE_OF_BIRTH, Property.COUNT)
        Object[] result = ObjectSelect.query(Artist.class)
                .columns(Artist.DATE_OF_BIRTH, Property.COUNT)
        Object[] q = ObjectSelect.columnQuery(Artist.class, nameSubstr, Property.COUNT)
        Object[] result = ObjectSelect.query(Artist.class)
                .columns(Artist.DATE_OF_BIRTH, Artist.PAINTING_ARRAY.count())
            q = ObjectSelect.columnQuery(Artist.class, nameSubstr, Property.COUNT)
                    .having(Property.COUNT.gt(10L))
            q = ObjectSelect.columnQuery(Artist.class, nameSubstr, Property.COUNT)
                    .having(Property.COUNT.gt(10L))
            q = ObjectSelect.columnQuery(Artist.class, nameSubstr, Property.COUNT)
                    .having(Property.COUNT.gt(10L))
        Property<Long> paintingCount = Artist.PAINTING_ARRAY.count();
            result = ObjectSelect.query(Artist.class)
        Property<Long> paintingCount = Artist.PAINTING_ARRAY.count();
            result = ObjectSelect.query(Artist.class)
            Object[] result = ObjectSelect.query(Artist.class)
                    .columns(Artist.DATE_OF_BIRTH, Property.COUNT)

    @Test
    public void testAgregateOnRelation() throws Exception {
        BigDecimal min = new BigDecimal(3);
        BigDecimal max = new BigDecimal(30);
        BigDecimal avg = new BigDecimal(BigInteger.valueOf(1290L), 2);
        BigDecimal sum = new BigDecimal(258);

        Property<BigDecimal> estimatedPrice = Artist.PAINTING_ARRAY.dot(Painting.ESTIMATED_PRICE);
        Object[] minMaxAvgPrice = ObjectSelect.query(Artist.class)
                .where(estimatedPrice.gte(min))
                .min(estimatedPrice).max(estimatedPrice)
                .avg(estimatedPrice)
                .sum(estimatedPrice)
                .count()
                .selectOne(context);

        assertEquals(0, min.compareTo((BigDecimal)minMaxAvgPrice[0]));
        assertEquals(0, max.compareTo((BigDecimal)minMaxAvgPrice[1]));
        assertEquals(0, avg.compareTo((BigDecimal)minMaxAvgPrice[2]));
        assertEquals(0, sum.compareTo((BigDecimal)minMaxAvgPrice[3]));
        assertEquals(20L, minMaxAvgPrice[4]);
    }

    @Test
    public void testQueryCount() throws Exception {
        long count = ObjectSelect
                .columnQuery(Artist.class, Property.COUNT)
                .selectOne(context);

        assertEquals(20, count);

        long count2 = ObjectSelect
                .query(Artist.class)
                .count()
                .selectOne(context);

        assertEquals(count, count2);

        long count3 = ObjectSelect
                .query(Artist.class)
                .selectCount(context);

        assertEquals(count, count3);
    }

    @Test
    public void testQueryCountWithProperty() throws Exception {
        tArtist.insert(21, "artist_21", null);
        tArtist.insert(22, "artist_21", null);

        long count = ObjectSelect
                .columnQuery(Artist.class, Property.COUNT)
                .selectOne(context);
        assertEquals(22, count);

        // COUNT(attribute) should return count of non null values of attribute
        long count2 = ObjectSelect
                .columnQuery(Artist.class, Artist.DATE_OF_BIRTH.count())
                .selectOne(context);
        assertEquals(20, count2);

        long count3 = ObjectSelect
                .query(Artist.class)
                .count(Artist.DATE_OF_BIRTH)
                .selectOne(context);
        assertEquals(count2, count3);


    }
