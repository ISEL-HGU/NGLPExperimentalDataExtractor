public class PersistentObjectSet<E> extends RelationshipFault<E>
    implements Set<E>, ValueHolder<Object>, PersistentObjectCollection<E> {
    protected Set<E> objectSet;
    protected Set<E> addedToUnresolved;
    protected Set<E> removedFromUnresolved;
    @Override
            objectSet = new HashSet<>();
    @Override
    @Override
        Set<E> old = this.objectSet;
            setObjectSet((Set<E>) value);
            setObjectSet(new HashSet<>((Collection<E>) value));
    @Override
    public Set<E> getValue() throws CayenneRuntimeException {
    @Override
    public Set<E> getValueDirectly() throws CayenneRuntimeException {
        return setValueDirectly(value);
    public void setObjectSet(Set<E> objectSet) {
    @Override
    public boolean add(E o) {
    @Override
    public boolean addAll(Collection<? extends E> c) {
    @Override
        Set<E> resolved = resolvedObjectSet();
    @Override
    @Override
    @Override
    @Override
    public Iterator<E> iterator() {
    @SuppressWarnings("unchecked")
    @Override
        E object = (E) o;
        if ((isFault()) ? removeLocal(object) : objectSet.remove(o)) {
            postprocessRemove(object);
    @SuppressWarnings("unchecked")
    @Override
    public boolean removeAll(Collection<?> c) {
            postprocessRemove((Collection<? extends E>) c);
    @Override
    public boolean retainAll(Collection<?> c) {
    	Collection<E> toRemove = new HashSet<>(resolvedObjectSet().size());
    	for (E object : resolvedObjectSet()) {
    @Override
    @Override
    @Override
    public <T> T[] toArray(T[] a) {
    protected Set<E> resolvedObjectSet() {
                    List<E> localList = resolveFromDB();
                    this.objectSet = new HashSet<>(localList);
    protected void mergeLocalChanges(List<E> resolved) {
                for (E next : addedToUnresolved) {
    boolean addLocal(E object) {
            addedToUnresolved = new HashSet<>();
    boolean removeLocal(E object) {
            removedFromUnresolved = new HashSet<>();
        if (shouldAddToRemovedFromUnresolvedSet(object)) {
            removedFromUnresolved.add(object);
        }
    protected void postprocessAdd(Collection<? extends E> collection) {
        for (E next : collection) {
    protected void postprocessRemove(Collection<? extends E> collection) {
        for (E next : collection) {
    protected void postprocessAdd(E addedObject) {
    protected void postprocessRemove(E removedObject) {
    protected boolean shouldAddToRemovedFromUnresolvedSet(E object) {
        return true;
    }

    @Override
    public void addDirectly(E target) {
    @Override
    public void removeDirectly(E target) {
