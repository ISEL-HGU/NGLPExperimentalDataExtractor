import org.apache.cayenne.di.ClassLoaderManager;
import org.apache.maven.plugins.annotations.*;
import org.apache.maven.project.MavenProject;
@Mojo(name = "cdbimport", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE)
    @Parameter(defaultValue = "${project}" )
    private MavenProject project;

        final Logger logger = new MavenLogger(this);

        if (project == null) {
            throw new MojoExecutionException("Can't load MavenProject.");
        }
        final DbImportConfiguration config = createConfig(logger);
        final Injector injector = DIBootstrap.createInjector(
                new DbSyncModule(), new ToolsModule(logger), new DbImportModule(),
                binder -> binder.bind(ClassLoaderManager.class).toInstance(new MavenPluginClassLoaderManager(project)));
        final DbImportConfigurationValidator validator = new DbImportConfigurationValidator(
           final Throwable th = Util.unwindException(ex);
    DbImportConfiguration createConfig(final Logger logger) {
    public void setMap(final File map) {
    public void setDbimport(final ReverseEngineering dbImportConfig) {
    public void setDbImport(final ReverseEngineering dbImportConfig) {
