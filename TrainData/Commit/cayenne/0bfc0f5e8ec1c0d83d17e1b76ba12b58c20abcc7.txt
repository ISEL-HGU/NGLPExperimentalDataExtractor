import java.sql.SQLException;
	private void createArtistWithPaintingAndGallery() throws SQLException {
		tArtist.insert(1, "artist1");
		tGallery.insert(1, "gallery1");
		tPainting.insert(1, "painting1", 1, 100, 1);
	}

	public void testPrefetchToMany_ViaPath() throws Exception {
		SelectQuery<Artist> q = new SelectQuery<>(Artist.class);
		q.addPrefetch("paintingArray");
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(2, artists.size());
			for (int i = 0; i < 2; i) {
				Artist a = artists.get(i);
				List<?> toMany = (List<?>) a.readPropertyDirectly("paintingArray");
				assertNotNull(toMany);
				assertFalse(((ValueHolder) toMany).isFault());
				assertEquals(1, toMany.size());
				Painting p = (Painting) toMany.get(0);
				assertEquals("Invalid prefetched painting:"  p, "p_"  a.getArtistName(), p.getPaintingTitle());
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(2, artists.size());
			Artist a1 = artists.get(0);
			List<?> toMany = (List<?>) a1.readPropertyDirectly(Artist.PAINTING_ARRAY.getName());
			assertNotNull(toMany);
			assertFalse(((ValueHolder) toMany).isFault());
			assertEquals(1, toMany.size());
			Painting p1 = (Painting) toMany.get(0);
			assertEquals("p_"  a1.getArtistName(), p1.getPaintingTitle());
			Artist a2 = artists.get(1);
			List<?> toMany2 = (List<?>) a2.readPropertyDirectly(Artist.PAINTING_ARRAY.getName());
			assertNotNull(toMany2);
			assertFalse(((ValueHolder) toMany2).isFault());
			assertEquals(1, toMany2.size());
			Painting p2 = (Painting) toMany2.get(0);
			assertEquals("p_"  a2.getArtistName(), p2.getPaintingTitle());
		SelectQuery<Artist> q = new SelectQuery<>(Artist.class);
		final List<Artist> artists = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(2, artists.size());
			for (int i = 0; i < 2; i) {
				Artist a = artists.get(i);
				List<?> toMany = (List<?>) a.readPropertyDirectly("paintingArray");
				assertNotNull(toMany);
				assertFalse(((ValueHolder) toMany).isFault());
				assertEquals(1, toMany.size());
				Painting p = (Painting) toMany.get(0);
				assertEquals("Invalid prefetched painting:"  p, "p_"  a.getArtistName(), p.getPaintingTitle());
		SelectQuery<Artist> q = new SelectQuery<>(Artist.class);
		final List<Artist> artists = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(2, artists.size());
			Artist a1 = artists.get(0);
			assertEquals("artist2", a1.getArtistName());
			List<?> toMany = (List<?>) a1.readPropertyDirectly(Artist.ARTIST_EXHIBIT_ARRAY.getName());
			assertNotNull(toMany);
			assertFalse(((ValueHolder) toMany).isFault());
			assertEquals(2, toMany.size());
			ArtistExhibit artistExhibit = (ArtistExhibit) toMany.get(0);
			assertEquals(PersistenceState.COMMITTED, artistExhibit.getPersistenceState());
			assertSame(a1, artistExhibit.getToArtist());
			Artist a2 = artists.get(1);
			assertEquals("artist3", a2.getArtistName());
			List<?> toMany2 = (List<?>) a2.readPropertyDirectly(Artist.ARTIST_EXHIBIT_ARRAY.getName());
			assertNotNull(toMany2);
			assertFalse(((ValueHolder) toMany2).isFault());
			assertEquals(3, toMany2.size());
			ArtistExhibit artistExhibit2 = (ArtistExhibit) toMany2.get(0);
			assertEquals(PersistenceState.COMMITTED, artistExhibit2.getPersistenceState());
			assertSame(a2, artistExhibit2.getToArtist());
	public void testPrefetchToMany_OnJoinTableJoinedPrefetch() throws Exception {
		SelectQuery<Artist> q = new SelectQuery<>(Artist.class);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(2, artists.size());
			Artist a1 = artists.get(0);
			assertEquals("artist2", a1.getArtistName());
			List<?> toMany = (List<?>) a1.readPropertyDirectly(Artist.ARTIST_EXHIBIT_ARRAY.getName());
			assertNotNull(toMany);
			assertFalse(((ValueHolder) toMany).isFault());
			assertEquals(2, toMany.size());
			ArtistExhibit artistExhibit = (ArtistExhibit) toMany.get(0);
			assertEquals(PersistenceState.COMMITTED, artistExhibit.getPersistenceState());
			assertSame(a1, artistExhibit.getToArtist());
			Artist a2 = artists.get(1);
			assertEquals("artist3", a2.getArtistName());
			List<?> toMany2 = (List<?>) a2.readPropertyDirectly(Artist.ARTIST_EXHIBIT_ARRAY.getName());
			assertNotNull(toMany2);
			assertFalse(((ValueHolder) toMany2).isFault());
			assertEquals(3, toMany2.size());
			ArtistExhibit artistExhibit2 = (ArtistExhibit) toMany2.get(0);
			assertEquals(PersistenceState.COMMITTED, artistExhibit2.getPersistenceState());
			assertSame(a2, artistExhibit2.getToArtist());
			final List<Artist> result = context.select(q);
			queryInterceptor.runWithQueriesBlocked(() -> {
				assertFalse(result.isEmpty());
				Artist a1 = result.get(0);
				List<?> toMany = (List<?>) a1.readPropertyDirectly("paintingArray");
				assertNotNull(toMany);
				assertFalse(((ValueHolder) toMany).isFault());
			SelectQuery<Artist> q = new SelectQuery<>(Artist.class);
			final List<Artist> result = context.select(q);
			queryInterceptor.runWithQueriesBlocked(() -> {
				assertFalse(result.isEmpty());
				Artist a1 = result.get(0);
				List<?> toMany = (List<?>) a1.readPropertyDirectly("paintingArray");
				assertNotNull(toMany);
				assertFalse(((ValueHolder) toMany).isFault());
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
		final List<Painting> result = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertFalse(result.isEmpty());
			Painting p1 = result.get(0);
			Object toOnePrefetch = p1.readNestedProperty("toArtist");
			assertNotNull(toOnePrefetch);
			assertTrue("Expected Artist, got: "  toOnePrefetch.getClass().getName(),
					toOnePrefetch instanceof Artist);
			Artist a1 = (Artist) toOnePrefetch;
			assertEquals(PersistenceState.COMMITTED, a1.getPersistenceState());
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
		List<Painting> results = context.select(q);
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
		List<Painting> results = context.select(q);
	public void testPrefetch_ReflexiveRelationship() {
		SelectQuery<ArtGroup> q = new SelectQuery<>("ArtGroup");
		final List<ArtGroup> results = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			ArtGroup fetchedChild = results.get(0);
			// The parent must be fully fetched, not just HOLLOW (a fault)
			assertEquals(PersistenceState.COMMITTED, fetchedChild.getToParentGroup().getPersistenceState());
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class, exp);
		final List<Painting> results = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			Painting painting = results.get(0);
			// The parent must be fully fetched, not just HOLLOW (a fault)
			assertEquals(PersistenceState.COMMITTED, painting.getToArtist().getPersistenceState());
		SelectQuery<Artist> q = new SelectQuery<>(Artist.class, exp);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			Artist a = results.get(0);
			assertEquals("artist2", a.getArtistName());
			assertEquals(2, a.getPaintingArray().size());
		SelectQuery<Artist> artistQuery = new SelectQuery<>(Artist.class, artistExp);
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class, exp);
		final List<Painting> results = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			// see that artists are resolved...
			Painting px = results.get(0);
			Artist ax = (Artist) px.readProperty(Painting.TO_ARTIST.getName());
			assertEquals(PersistenceState.COMMITTED, ax.getPersistenceState());
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class, e);
		final List<Painting> results = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(2, results.size());
			// testing non-null to-one target
			Painting p0 = results.get(0);
			Object o2 = p0.readPropertyDirectly(Painting.TO_PAINTING_INFO.getName());
			assertTrue(o2 instanceof PaintingInfo);
			PaintingInfo pi2 = (PaintingInfo) o2;
			assertEquals(PersistenceState.COMMITTED, pi2.getPersistenceState());
			assertEquals(Cayenne.intPKForObject(p0), Cayenne.intPKForObject(pi2));
			// testing null to-one target
			Painting p1 = results.get(1);
			assertNull(p1.readPropertyDirectly(Painting.TO_PAINTING_INFO.getName()));
			// there was a bug marking an object as dirty when clearing the
			// relationships
			assertEquals(PersistenceState.COMMITTED, p1.getPersistenceState());
		SelectQuery<Artist> q = new SelectQuery<>(Artist.class, e);
		// prefetch with query using date in qualifier used to fail on SQL Server
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
		final List<Painting> paintings = context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, paintings.size());
			Painting p2 = paintings.get(0);
			assertNull(p2.readProperty(Painting.TO_ARTIST.getName()));
		SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
		context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			// per CAY-499 second run of a cached query with prefetches
			// (i.e. when the
			// result is served from cache) used to throw an exception...
			List<Painting> cachedResult = context.select(q);
			assertFalse(cachedResult.isEmpty());
			Painting p1 = cachedResult.get(0);
			Object toOnePrefetch = p1.readNestedProperty("toArtist");
			assertNotNull(toOnePrefetch);
			assertTrue("Expected Artist, got: "  toOnePrefetch.getClass().getName(),
					toOnePrefetch instanceof Artist);
			Artist a1 = (Artist) toOnePrefetch;
			assertEquals(PersistenceState.COMMITTED, a1.getPersistenceState());
			// and just in case - run one more time...
			context.performQuery(q);
		final SelectQuery<Painting> q = new SelectQuery<>(Painting.class);
		context.select(q);
		queryInterceptor.runWithQueriesBlocked(() -> {
			// per CAY-499 second run of a cached query with prefetches
			// (i.e. when the
			// result is served from cache) used to throw an exception...
			List<Painting> cachedResult = context.select(q);
			assertFalse(cachedResult.isEmpty());
			Painting p1 = cachedResult.get(0);
			Object toOnePrefetch = p1.readNestedProperty("toArtist");
			assertNotNull(toOnePrefetch);
			assertTrue("Expected Artist, got: "  toOnePrefetch.getClass().getName(),
					toOnePrefetch instanceof Artist);
			Artist a1 = (Artist) toOnePrefetch;
			assertEquals(PersistenceState.COMMITTED, a1.getPersistenceState());
			// and just in case - run one more time...
			context.performQuery(q);
		SelectQuery<Painting> query = new SelectQuery<>(Painting.class);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			Painting p0 = results.get(0);
			PaintingInfo pi0 = (PaintingInfo) p0.readPropertyDirectly(Painting.TO_PAINTING_INFO.getName());
			assertNotNull(pi0);
			assertNotNull(pi0.readPropertyDirectly(PaintingInfo.PAINTING.getName()));
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			Painting p0 = results.get(0);
			Artist a0 = (Artist) p0.readPropertyDirectly(Painting.TO_ARTIST.getName());
			assertNotNull(a0);
			List<?> paintings = (List<?>) a0.readPropertyDirectly(Artist.PAINTING_ARRAY.getName());
			assertEquals(2, paintings.size());
		SelectQuery<Painting> query = new SelectQuery<>(Painting.class);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			Painting p0 = results.get(0);
			PaintingInfo pi0 = (PaintingInfo) p0.readPropertyDirectly(Painting.TO_PAINTING_INFO.getName());
			assertNotNull(pi0);
			assertNotNull(pi0.readPropertyDirectly(PaintingInfo.PAINTING.getName()));
		SelectQuery<Painting> query = new SelectQuery<>(Painting.class);
		queryInterceptor.runWithQueriesBlocked(() -> {
			assertEquals(1, results.size());
			Painting p0 = results.get(0);
			Artist a0 = (Artist) p0.readPropertyDirectly(Painting.TO_ARTIST.getName());
			assertNotNull(a0);
			PaintingInfo info = (PaintingInfo) p0.readPropertyDirectly(Painting.TO_PAINTING_INFO.getName());
			assertNotNull(info);
		createArtistWithPaintingAndGallery();
		queryInterceptor.runWithQueriesBlocked(() -> {
			List<Painting> paintings1 = ObjectSelect.query(Painting.class)
					.prefetch(Painting.TO_ARTIST.joint())
					.localCache("g1").select(context);
			assertEquals(1, paintings1.size());
			assertTrue(paintings1.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
		createArtistWithPaintingAndGallery();
		ObjectSelect<Painting> s1 = ObjectSelect.query(Painting.class)
			.sharedCache("g1");
		ObjectSelect<Painting> s2 = ObjectSelect.query(Painting.class)
			.prefetch(Painting.TO_ARTIST.disjoint())
			.sharedCache("g1");
		ObjectSelect<Painting> s3 = ObjectSelect.query(Painting.class)
			.prefetch(Painting.TO_GALLERY.joint())
			.sharedCache("g1");
		ObjectSelect<Painting> s4 = ObjectSelect.query(Painting.class)
		queryInterceptor.runWithQueriesBlocked(() -> {
			// select from cache
			List<Painting> paintings1 = s2.select(context);
			assertEquals(1, paintings1.size());
			assertTrue(paintings1.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
			assertTrue(paintings1.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Fault);
			paintings1 = s3.select(context);
			assertEquals(1, paintings1.size());
			assertTrue(paintings1.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Fault);
			assertTrue(paintings1.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Gallery);
			paintings1 = s4.select(context);
			assertEquals(1, paintings1.size());
			assertTrue(paintings1.get(0).readPropertyDirectly(Painting.TO_ARTIST.getName()) instanceof Artist);
			assertTrue(paintings1.get(0).readPropertyDirectly(Painting.TO_GALLERY.getName()) instanceof Gallery);
