import java.net.URI;
import java.net.URISyntaxException;
import org.apache.cayenne.CayenneRuntimeException;
    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectFileChangeTracker.class);
    protected final Map<URI, FileInfo> files;
    protected final ProjectController mediator;

    public ProjectFileChangeTracker(ProjectController mediator) {
            try {
                addFile(project.getConfigurationResource().getURL().toURI());
                for (DataMap dm : ((DataChannelDescriptor) project.getRootNode()).getDataMaps()) {
                    if (dm.getConfigurationSource() != null) {
                        // if DataMap is in separate file, monitor it
                        addFile(dm.getConfigurationSource().getURL().toURI());
                    }
            } catch (URISyntaxException ex) {
                throw new CayenneRuntimeException("Unable to start change tracker", ex);
        SwingUtilities.invokeLater(() -> {
            isShownChangeDialog = true;
            if (showConfirmation("One or more project files were changed by external program. "
                     "Do you want to load the changes?")) {
                // Currently we are reloading all project
                if (mediator.getProject() != null) {
                    File fileDirectory;
                    try {
                        fileDirectory = new File(mediator.getProject().getConfigurationResource().getURL().toURI());
                    } catch (URISyntaxException e) {
                        throw new CayenneRuntimeException("Unable to open project %s",
                                e, mediator.getProject().getConfigurationResource().getURL());
                    Application.getInstance().getActionManager()
                            .getAction(OpenProjectAction.class)
                            .openProject(fileDirectory);
            } else {
                mediator.setDirty(true);
            isShownChangeDialog = false;
            SwingUtilities.invokeLater(() -> {
                isShownRemoveDialog = true;
                FileDeletedDialog dialog = new FileDeletedDialog(Application.getFrame());
                dialog.show();
                if (dialog.shouldSave()) {
                    Application.getInstance().getActionManager().getAction(SaveAction.class).performAction(null);
                } else if (dialog.shouldClose()) {
                    Application.getInstance().getFrameController().projectClosedAction();
                } else {
                    mediator.setDirty(true);
                isShownRemoveDialog = false;
    public void addFile(URI location) {
            LOGGER.error("SecurityException adding file "  location, e);
        files.remove(URI.create(location));
                LOGGER.error("SecurityException checking file "  fi.getFile().getPath(), e);
            } else if (fi.getLastModified() != -1) {
                // the file has been removed
    protected static class FileInfo {
        private final File file;
        private long lastModified;
        protected FileInfo(URI location) {
        protected File getFile() {
        protected long getLastModified() {
        protected void setLastModified(long l) {
