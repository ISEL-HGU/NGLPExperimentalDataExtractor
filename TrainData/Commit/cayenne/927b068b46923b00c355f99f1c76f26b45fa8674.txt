import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import java.util.ArrayList;
import java.util.List;
    private static final String JOINT_PREFETCH_SEMANTICS = "Joint";
    private static final String DISJOINT_PREFETCH_SEMANTICS = "Disjoint";
    private static final String DISJOINT_BY_ID_PREFETCH_SEMANTICS = "Disjoint by id";
    private static final String UNDEFINED_SEMANTICS = "Undefined semantics";

    protected void initFromModel(){
        super.initFromModel();
        setUpPrefetchBox(table.getColumnModel().getColumn(2));
    }

    protected void setUpPrefetchBox(TableColumn column) {

        JComboBox prefetchBox = new JComboBox();
        prefetchBox.addItem(JOINT_PREFETCH_SEMANTICS);
        prefetchBox.addItem(DISJOINT_PREFETCH_SEMANTICS);
        prefetchBox.addItem(DISJOINT_BY_ID_PREFETCH_SEMANTICS);

        prefetchBox.addActionListener(e -> Application.getInstance().getFrameController().getEditorView().getEventController().setDirty(true));

        column.setCellEditor(new DefaultCellEditor(prefetchBox));

        DefaultTableCellRenderer renderer =
                new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        column.setCellRenderer(renderer);
    }

        add.addActionListener(e -> {
            String prefetch = getSelectedPath();

            if (prefetch == null) {
                return;
            addPrefetch(prefetch);

            Application.getInstance().getUndoManager().addEdit(new AddPrefetchUndoableEdit(prefetch, SelectQueryPrefetchTab.this));
        remove.addActionListener(e -> {
            int selection = table.getSelectedRow();
            if (selection < 0) {
                return;
            String prefetch = (String) table.getModel().getValueAt(selection, 0);

            removePrefetch(prefetch);
        if (!selectQuery.getPrefetchesMap().isEmpty() && selectQuery.getPrefetchesMap().containsKey(prefetch)) {
        //default value id disjoint
        selectQuery.addPrefetch(prefetch, getPrefetchType(DISJOINT_PREFETCH_SEMANTICS));
        setUpPrefetchBox(table.getColumnModel().getColumn(2));
        setUpPrefetchBox(table.getColumnModel().getColumn(2));

    protected int getPrefetchType(String semantics) {
        switch (semantics){
            case "Joint" :
                return 1;
            case "Disjoint":
                return 2;
            case "Disjoint by id":
                return 3;
            default: return 0;
        }
    }

    protected String getPrefetchTypeString(int semantics) {
        switch (semantics){
            case 1 :
                return JOINT_PREFETCH_SEMANTICS;
            case 2:
                return DISJOINT_PREFETCH_SEMANTICS;
            case 3:
                return DISJOINT_BY_ID_PREFETCH_SEMANTICS;
            default: return UNDEFINED_SEMANTICS;
        }
    }

     * A table model for the Prefetch table.
                prefetches = new String[selectQuery.getPrefetchesMap().size()];
                List<String> list = new ArrayList<>(selectQuery.getPrefetchesMap().keySet());
                for(int i = 0; i < list.size(); i) {
                    prefetches[i] = list.get(i);
            return 3;
                case 2:
                    return getPrefetchTypeString(selectQuery.getPrefetchesMap().get(prefetches[row]));
                case 2:
                    return String.class;
                case 2:
                    return "Prefetch Type";
                    throw new IndexOutOfBoundsException("Invalid columnw: "  column);
            return column == 2 ? true : false;
        }
        public void setValueAt(Object value, int row, int column){
            switch (column) {
                case 2:
                    selectQuery.addPrefetch(prefetches[row], getPrefetchType((String)value));
                    break;
            }
