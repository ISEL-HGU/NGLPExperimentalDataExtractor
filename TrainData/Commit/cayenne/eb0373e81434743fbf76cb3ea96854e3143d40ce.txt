        assertEquals("artist1", paintings.get(0).getToArtist().getArtistName());
        assertEquals("artist1", paintings.get(1).getToArtist().getArtistName());
        ASTPath astPath = new ASTObjPath("paintingArray.a.galleryName");
        astPath.setPathAliases(Collections.singletonMap("a", "toGallery"));
                .orderBy(Artist.PAINTING_ARRAY.alias("p1").dot(Painting.TO_GALLERY).dot(Gallery.GALLERY_NAME).asc());
        assertEquals(6, artists.size());
        assertEquals("tate modern", artists.get(0).getPaintingArray().get(0).getToGallery().getGalleryName());
        assertEquals("test gallery", artists.get(artists.size() - 1).getPaintingArray().get(0).getToGallery().getGalleryName());

    @Test
    public void testExpWithAliases() {
        Expression e1 = ExpressionFactory.exp("paintingArray#p1.paintingTitle = 'painting2'");
        Expression e2 = ExpressionFactory.exp("paintingArray#p2.paintingTitle = 'painting4'");
        List<Artist> artists = ObjectSelect.query(Artist.class)
                .where(e1)
                .and(e2)
                .select(context);
        assertEquals(1, artists.size());
        assertEquals("artist4", artists.get(0).getArtistName());
    }

    @Test
    public void testExpWithSeveralAliases() {
        Expression e1 = ExpressionFactory.exp("paintingArray#p1.toGallery#g1.galleryName = 'tate modern'");
        List<Artist> artists = ObjectSelect.query(Artist.class)
                .where(e1)
                .orderBy(Artist.ARTIST_NAME.asc())
                .select(context);
        assertEquals(5, artists.size());
        assertEquals("artist1", artists.get(0).getArtistName());
    }

    @Test
    public void testMiddleAliasForExp() {
        Expression e1 = ExpressionFactory.exp("paintingArray.toGallery.paintingArray#p1.paintingTitle = 'painting2'");
        Expression e2 = ExpressionFactory.exp("paintingArray.toGallery.paintingArray#p2.paintingTitle = 'painting4'");
        List<Artist> artists = ObjectSelect.query(Artist.class)
                .where(e1)
                .and(e2)
                .select(context);
        assertEquals(1, artists.size());
        assertEquals("artist4", artists.get(0).getArtistName());
    }

    @Test
    public void testEntityPropertyAliasesInExp() {
        Painting painting2 = Cayenne.objectForPK(context, Painting.class, 2);
        Painting painting4 = Cayenne.objectForPK(context, Painting.class, 4);

        SelectQuery<Artist> query = SelectQuery.query(Artist.class);
        Expression e1 = ExpressionFactory.and(
                ExpressionFactory.exp("paintingArray#p1 = $painting1", painting2),
                ExpressionFactory.exp("paintingArray#p2 = $painting2", painting4));
        query.setQualifier(e1);
        List<Artist> artists = query.select(context);
        assertEquals(1, artists.size());
        assertEquals("artist4", artists.get(0).getArtistName());
    }

    @Test
    public void testAliasForPathExp() {
        ASTPath astPath = new ASTObjPath("paintingArray.p1.galleryName");
        astPath.setPathAliases(Collections.singletonMap("a", "toGallery"));
        ASTEqual astEqual = new ASTEqual(astPath, "test gallery");
        Expression e1 = ExpressionFactory.exp("paintingArray.toGallery#p1.galleryName");
        List<Object[]> artists = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME, PropertyFactory.createBase(e1, String.class))
                .where(astEqual)
                .select(context);
        assertEquals(1, artists.size());
        assertEquals("artist4", artists.get(0)[0]);
        assertEquals("test gallery", artists.get(0)[1]);
    }

    @Test
    public void testTheSameAliasesForExp() {
        Expression e1 = ExpressionFactory.exp("paintingArray#p1.paintingTitle");
        Expression e2 = ExpressionFactory.exp("paintingArray#p2.paintingTitle");
        Expression e3 = ExpressionFactory.exp("paintingArray#p1.paintingTitle = 'painting2'");
        Expression e4 = ExpressionFactory.exp("paintingArray#p2.paintingTitle = 'painting4'");
        List<Object[]> results = ObjectSelect.columnQuery(Artist.class,
                Artist.ARTIST_NAME,
                PropertyFactory.createBase(e1, String.class),
                PropertyFactory.createBase(e2, String.class))
                .where(e3)
                .and(e4)
                .select(context);
        assertEquals(1, results.size());
        assertEquals("artist4", results.get(0)[0]);
        assertEquals("painting2", results.get(0)[1]);
        assertEquals("painting4", results.get(0)[2]);
    }

    @Test
    public void testOrderWithAliasForExp() {
        Expression e1 = ExpressionFactory.exp("paintingArray#p1.toGallery#p2.galleryName");
        ObjectSelect<Artist> query = ObjectSelect.query(Artist.class)
                .orderBy(PropertyFactory.createBase(e1, String.class).asc());
        List<Artist> artists = query.select(context);
        assertEquals(6, artists.size());
        assertEquals("tate modern", artists.get(0).getPaintingArray().get(0).getToGallery().getGalleryName());
        assertEquals("test gallery", artists.get(artists.size() - 1).getPaintingArray().get(0).getToGallery().getGalleryName());
    }

    @Test
    public void testAggregationWithAliasesForExp() {
        Expression e1 = ExpressionFactory.exp("paintingArray#p1");
        List<Object[]> artistAndPaintingCount = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME, Artist.PAINTING_ARRAY.count())
                .having(PropertyFactory.createBase(e1, Number.class).count().lt(5L))
                .select(context);
        assertEquals(4, artistAndPaintingCount.size());
        assertTrue((Long)artistAndPaintingCount.get(0)[1] < 5);
    }

    @Test(expected = CayenneRuntimeException.class)
    public void testPrefetchWithAliasesForExp() {
        Expression e1 = ExpressionFactory.exp("paintingArray#p1");
        ObjectSelect<Artist> query = ObjectSelect.query(Artist.class);
        query.prefetch(PropertyFactory.createList("p1", e1, Painting.class).disjoint());
        query.select(context);
    }

    @Test(expected = CayenneRuntimeException.class)
    public void testExpWithAliasNotToRelSegment() {
        Expression e1 = ExpressionFactory.exp("paintingArray.paintingTitle#p1 = 'painting2'");
        ObjectSelect.query(Artist.class)
               .where(e1)
               .select(context);
    }
