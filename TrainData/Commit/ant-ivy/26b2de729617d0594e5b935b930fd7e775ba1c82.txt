import java.util.Set;
            Set<ModuleRevisionId> parents = ivyContext.get(PARENT_MAP_KEY);
                final ResolvedModuleRevision parentModule = parseOtherPom(ivySettings, parentModRevID, true);
                    ResolvedModuleRevision relocatedModule = parseOtherPom(ivySettings, relocation, false);
            // In Maven, "import" scope semantics are equivalent to getting (only) the
            // dependency management section of the imported module, into the current
            // module, so that those "managed dependency versions" are usable/applicable
            // in the current module's dependencies
                    dep.getArtifactId(), dep.getVersion());
            ResolvedModuleRevision importModule = parseOtherPom(ivySettings, importModRevID, false);
    private ResolvedModuleRevision parseOtherPom(final ParserSettings ivySettings,
            final ModuleRevisionId parentModRevID, final boolean isParentPom) throws ParseException {
        Set<ModuleRevisionId> previousParents = null;
        if (!isParentPom) {
            // IVY-1588: we "reset" the parent tracking, since the parent tracking should only be
            // non-null when we are parsing a parent pom.
            previousParents = IvyContext.getContext().get(PARENT_MAP_KEY);
            if (previousParents != null) {
                IvyContext.getContext().set(PARENT_MAP_KEY, null);
            }
        try {
            DependencyDescriptor dd = new DefaultDependencyDescriptor(parentModRevID, true);
            ResolveData data = IvyContext.getContext().getResolveData();
            if (data == null) {
                ResolveEngine engine = IvyContext.getContext().getIvy().getResolveEngine();
                ResolveOptions options = new ResolveOptions();
                options.setDownload(false);
                data = new ResolveData(engine, options);
            }

            DependencyResolver resolver = ivySettings.getResolver(parentModRevID);
            if (resolver == null) {
                // TODO: Throw exception here?
                return null;
            }
            dd = toSystem(dd, ivySettings.getContextNamespace());
            return resolver.getDependency(dd, data);
        } finally {
            if (!isParentPom) {
                // switch back to the previous state of the parent tracking
                IvyContext.getContext().set(PARENT_MAP_KEY, previousParents);
            }
        }
