import org.apache.ivy.core.module.descriptor.DefaultIncludeRule;
import org.apache.ivy.core.module.id.ArtifactId;
import org.apache.ivy.core.module.id.ModuleId;
import org.apache.ivy.plugins.matcher.ExactPatternMatcher;
import org.apache.ivy.plugins.matcher.PatternMatcher;
    protected Set<IncludeRule> getDependencyIncludesSet(final String rootModuleConf) {
        final Collection<Depender> dependersInConf = dependers.get(rootModuleConf);
        final Set<IncludeRule> dependencyIncludes = new HashSet<>();
        // true if the depedency descriptor of any of the depender *doesn't* have an explicit
        // "<artifact>" or an "<include>". false otherwise
        boolean atLeastOneDependerNeedsAllArtifacts = false;
        // true if the dependency descriptor of any of the depender either has an explicit "<artifact>"
        // or an "<include>". false otherwise
        boolean atLeastOneDependerHasSpecificArtifactSelection = false;
        for (final Depender depender : dependersInConf) {
            final DependencyArtifactDescriptor dads[] = depender.dd.getDependencyArtifacts(depender.dd.getModuleConfigurations());
            final boolean declaresArtifacts = dads != null && dads.length > 0;
            final IncludeRule[] rules = depender.dd.getIncludeRules(depender.dependerConf);
            final boolean hasIncludeRule = rules != null && rules.length > 0;
            if (hasIncludeRule) {
                dependencyIncludes.addAll(Arrays.asList(rules));
            if (declaresArtifacts || hasIncludeRule) {
                atLeastOneDependerHasSpecificArtifactSelection = true;
            }
            if (!hasIncludeRule && !declaresArtifacts) {
                atLeastOneDependerNeedsAllArtifacts = true;
            }
        }
        // so there's at least one depender D1 which has a specific artifact dependency and at the
        // same time there's a depender D2 which doesn't have any explicit artifact/includes.
        // so it is expected that an implicit "include all artifacts" is applied so that dependencies
        // such as D2 get (all) the artifacts that are published by the dependency's module
        if (atLeastOneDependerHasSpecificArtifactSelection && atLeastOneDependerNeedsAllArtifacts) {
            // add a "include all artifacts" rule
            dependencyIncludes.add(includeAllArtifacts());
    private static IncludeRule includeAllArtifacts() {
        final ArtifactId aid = new ArtifactId(
                new ModuleId(PatternMatcher.ANY_EXPRESSION, PatternMatcher.ANY_EXPRESSION),
                PatternMatcher.ANY_EXPRESSION, PatternMatcher.ANY_EXPRESSION,
                PatternMatcher.ANY_EXPRESSION);
        return new DefaultIncludeRule(aid, ExactPatternMatcher.INSTANCE, null);
    }


