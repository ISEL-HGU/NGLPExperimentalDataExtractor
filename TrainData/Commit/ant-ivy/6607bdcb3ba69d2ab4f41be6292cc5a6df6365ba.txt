import org.apache.ivy.core.settings.TimeoutConstraint;
import org.apache.ivy.util.CopyProgressListener;

    @Override
    public boolean isReachable(final URL url) {
        return this.isReachable(url, null);
    @Override
    public boolean isReachable(final URL url, final int timeout) {
        return this.isReachable(url, createTimeoutConstraints(timeout));
    @Override
    public boolean isReachable(final URL url, final TimeoutConstraint timeoutConstraint) {
        return this.getHandler(url.getProtocol()).isReachable(url, timeoutConstraint);
    @Override
    public long getContentLength(final URL url) {
        return this.getContentLength(url, null);
    @Override
    public long getContentLength(final URL url, final int timeout) {
        return this.getContentLength(url, createTimeoutConstraints(timeout));
    @Override
    public long getContentLength(final URL url, final TimeoutConstraint timeoutConstraint) {
        return this.getHandler(url.getProtocol()).getContentLength(url, timeoutConstraint);
    @Override
    public long getLastModified(final URL url) {
        return this.getLastModified(url, null);
    @Override
    public long getLastModified(final URL url, final int timeout) {
        return this.getLastModified(url, createTimeoutConstraints(timeout));
    @Override
    public long getLastModified(final URL url, final TimeoutConstraint timeoutConstraint) {
        return this.getHandler(url.getProtocol()).getLastModified(url, timeoutConstraint);
    @Override
    public URLInfo getURLInfo(final URL url) {
        return this.getURLInfo(url, null);
    @Override
    public URLInfo getURLInfo(final URL url, final int timeout) {
        return this.getURLInfo(url, createTimeoutConstraints(timeout));
    }

    @Override
    public URLInfo getURLInfo(final URL url, final TimeoutConstraint timeoutConstraint) {
        return this.getHandler(url.getProtocol()).getURLInfo(url, timeoutConstraint);
    }

    @Override
    public InputStream openStream(final URL url) throws IOException {
        return this.openStream(url, null);
    }

    @Override
    public InputStream openStream(final URL url, final TimeoutConstraint timeoutConstraint) throws IOException {
        return this.getHandler(url.getProtocol()).openStream(url, timeoutConstraint);
    }

    @Override
    public void download(final URL src, final File dest, final CopyProgressListener l) throws IOException {
        this.download(src, dest, l);
    }

    @Override
    public void download(final URL src, final File dest, final CopyProgressListener listener, final TimeoutConstraint timeoutConstraint) throws IOException {
        this.getHandler(src.getProtocol()).download(src, dest, listener, timeoutConstraint);
    }

    @Override
    public void upload(final File src, final URL dest, final CopyProgressListener l) throws IOException {
        this.upload(src, dest, l);
    }

    @Override
    public void upload(final File src, final URL dest, final CopyProgressListener listener, final TimeoutConstraint timeoutConstraint) throws IOException {
        this.getHandler(dest.getProtocol()).upload(src, dest, listener, timeoutConstraint);

    private static TimeoutConstraint createTimeoutConstraints(final int connectionTimeout) {
        return new TimeoutConstraint() {
            @Override
            public int getConnectionTimeout() {
                return connectionTimeout;
            }

            @Override
            public int getReadTimeout() {
                return -1;
            }

        };
    }
